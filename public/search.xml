<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql的waitimeout</title>
      <link href="2021/06/02/mysql%E7%9A%84waitimeout/"/>
      <url>2021/06/02/mysql%E7%9A%84waitimeout/</url>
      
        <content type="html"><![CDATA[<p>首先，我们来看下</p><pre><code class="shell">show GLOBAL VARIABLES like &#39;%timeout%&#39;;</code></pre><p>默认值为28800s即8小时,我们改为100s</p><pre><code class="ini"># Default Homebrew MySQL server config[mysqld]# Only allow connections from localhostbind-address = 0.0.0.0wait_timeout=100interactive_timeout=100</code></pre><p>重新查看结果</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210603144255.png" alt=""></p><p>查看对守护进程连接的影响</p><pre><code class="php"> public function longT()    &#123;        $TicketModel = new TicketModel();        $this-&gt;success(&#39;开始建立连接...&#39;);        while (true) &#123;            sleep(120);            dump($TicketModel-&gt;select(&#39;t_id&#39;)-&gt;fetch());        &#125;    &#125;</code></pre><p>发现在100s后的连接已被主动断开</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210603144315.png" alt=""></p><p>代码中的场景是，<strong>在wait_timeout之内无任何操作会自动关闭</strong></p><h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><p>interactive_timeout 28800</p><blockquote><p>The number of seconds the server waits for activity on an interactive connection before closing it. An interactive client is defined as a client that uses the <strong>CLIENT_INTERACTIVE</strong> option to mysql_real_connect(). See also wait_timeout.</p></blockquote><p>waitimeout 28800</p><p>The number of seconds the server waits for activity on a noninteractive connection before closing it.</p><p>On thread startup, the session wait_timeout value is initialized from the global wait_timeout value or from the global interactive_timeout value, depending on the type of client (as defined by the CLIENT_INTERACTIVE connect option to mysql_real_connect()). See also interactive_timeout.</p><p>通过MySQL客户端连接db的是交互会话，通过jdbc等程序连接db的是非交互会话。 </p><p>总结：</p><p>如果应用程序长时间的使用一个连接，而有机会长时间不进行任何操作。则会导致连接被关闭。</p><p>参考文献:</p><p>1.<a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html">https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html</a><br>2.<a href="https://cloud.tencent.com/developer/article/1181515">https://cloud.tencent.com/developer/article/1181515</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+quasar+electron+springboot+mysql撸一个TODO LIST 看板</title>
      <link href="2021/04/09/vue-quasar-electron-springboot-mysql%E6%92%B8%E4%B8%80%E4%B8%AATODO-LIST-%E7%9C%8B%E6%9D%BF/"/>
      <url>2021/04/09/vue-quasar-electron-springboot-mysql%E6%92%B8%E4%B8%80%E4%B8%AATODO-LIST-%E7%9C%8B%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>先看效果</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210330200044.png" alt=""></p><p>写本项目的目的有几点：</p><ol><li>学习下vue+electron桌面开发</li><li>学习下java和spring开发(本人一直使用PHP)</li><li>一直缺少一款能适合自己的TODO LIST软件，能有桌面端的</li></ol><span id="more"></span><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210409114201.png" alt=""></p><p>可直接打包成dmg、exe 等二进制文件使用。<br>这是我打包后的效果。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>vue</li><li>quasar</li><li>electron</li><li>springboot</li><li>mysql</li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><ul><li>前端 <a href="https://github.com/visonforcoding/carambola-todo">https://github.com/visonforcoding/carambola-todo</a></li><li>后端 <a href="https://github.com/visonforcoding/carambola-todo-service">https://github.com/visonforcoding/carambola-todo-service</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程日记-线程不安全的危害</title>
      <link href="2021/03/03/%E7%BC%96%E5%8F%91%E7%BC%96%E7%A8%8B%E6%97%A5%E8%AE%B0-%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%B1%E5%AE%B3/"/>
      <url>2021/03/03/%E7%BC%96%E5%8F%91%E7%BC%96%E7%A8%8B%E6%97%A5%E8%AE%B0-%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%B1%E5%AE%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210303192545.png" alt=""></p><span id="more"></span><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><pre><code class="java">@WebServlet(name = &quot;HelloServlet&quot;, urlPatterns = &#123;&quot;/hello&quot;&#125;)public class HelloServlet extends HttpServlet &#123;    private static final Logger LOG = Logger.getLogger(HelloServlet.class.getName());    private Integer count = 0;    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException &#123;        ++count;        processRequest(request, response);        LOG.info(String.format(&quot;计数 %d&quot;, count));    &#125;&#125;</code></pre><p>按常理多少次请求后就会打印出计数多少。</p><pre><code>ab -n300 -c20 http://localhost:8080/servlet-demo/hello</code></pre><p>正常下，执行第一次 计数应为300</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210303194840.png" alt=""></p><p>事实上得到的却不是</p><p>再执行..</p><p>2 ~ 590<br>3 ~ 879<br>4 ~ 1170</p><p>几乎没有规律，并不是预期的 300的倍数。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>实际上<code>++count</code>是一个读取-修改-写入的操作。</p><p>假设线程A、B 同时读取到了值是m,同时写入+1后的值m+1。结果count = m+1,则事实上整个计数就少了1,应该为m+2。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>将<code>count</code>声明为<code>AtomicInter</code></p><pre><code class="java">    private Integer count = 0;    private AtomicInteger atomicCount = new AtomicInteger(0);    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException &#123;        ++count;        processRequest(request, response);        LOG.info(String.format(&quot;计数count %d&quot;, count));        LOG.info(String.format(&quot;计数atomicCount %d&quot;, atomicCount.incrementAndGet()));    &#125;</code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210309095018.png" alt=""></p><p>可以看到，<code>AtomicInteger</code>统计的是正确的了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot记录sql探索</title>
      <link href="2021/02/23/java/spring-boot%E8%AE%B0%E5%BD%95sql%E6%8E%A2%E7%B4%A2/"/>
      <url>2021/02/23/java/spring-boot%E8%AE%B0%E5%BD%95sql%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标记录每次请求内的http、es、mysql耗时，本篇讨论mysql部分</p></blockquote><p>为什么说要探索，这不是很简单的事么？但是能满足以下几点么？</p><ul><li>能记录limit等参数</li><li>能将参数和sql写一起，能直接使用</li><li>能记录耗时</li><li>能计数累加,统计一次请求中sql执行的总数和总耗时</li></ul><span id="more"></span><h2 id="spring原生能力"><a href="#spring原生能力" class="headerlink" title="spring原生能力"></a>spring原生能力</h2><pre><code class="ini">logging.level.org.hibernate.SQL=debuglogging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace</code></pre><p>通过上面两条配置。</p><ul><li>✔️可以显示sql.</li><li>❌不能和参数一行显示</li><li>❌不能显示limit参数</li><li>❌不能计数和记录耗时</li></ul><pre><code>2021-02-23 19:35:42.932 DEBUG 97586 --- [  restartedMain] org.hibernate.SQL                        : select admin0_.id as id1_0_, admin0_.create_time as create_t2_0_, admin0_.modify_time as modify_t3_0_, admin0_.email as email4_0_, admin0_.password as password5_0_, admin0_.status as status6_0_, admin0_.username as username7_0_ from admin admin0_ where admin0_.username=?2021-02-23 19:35:42.949 TRACE 97586 --- [  restartedMain] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [root]</code></pre><h2 id="原生log-org-hibernate-EmptyInterceptor"><a href="#原生log-org-hibernate-EmptyInterceptor" class="headerlink" title="原生log+org.hibernate.EmptyInterceptor"></a>原生log+org.hibernate.EmptyInterceptor</h2><p><code>org.hibernate.EmptyInterceptor</code>提供钩子，hibernate本身提供entity的curd钩子。重写<code>EmptyInterceptor</code>方法，可以实现计数。但是<code>onPrepareStatement</code>方法只是装配sql前的事件，而且不是完整的sql。</p><ul><li>✔️ 可以显示sql</li><li>❌ 不能和参数一行显示</li><li>❌ 不能显示limit参数</li><li>✔️ 能计数</li><li>❌ 不能记录耗时</li></ul><pre><code class="ini">spring.jpa.properties.hibernate.ejb.interceptor=com.vison.itdoc.config.HibernateInterceptor</code></pre><pre><code class="java">public class HibernateInterceptor extends EmptyInterceptor &#123;    @Override    public boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types) &#123;//        Log.info(&quot;onload...&quot;, entity)        return true;    &#125;    @Override    public String onPrepareStatement(String string) &#123;        // count++        return INSTANCE.onPrepareStatement(string);    &#125;    @Override    public void afterTransactionCompletion(Transaction t) &#123;        INSTANCE.afterTransactionCompletion(t);        Log.info(&quot;after trans complete&quot;, t);    &#125;&#125;</code></pre><h2 id="log4jdbc"><a href="#log4jdbc" class="headerlink" title="log4jdbc"></a>log4jdbc</h2><p>log4jdbc能很好的解决sql完整显示和记录耗时的问题</p><pre><code>2021-02-23 19:59:13.709  INFO 97586 --- [nio-8081-exec-1] jdbc.sqltiming                           : select posts0_.id as id1_2_, posts0_.create_time as create_t2_2_, posts0_.modify_time as modify_t3_2_, posts0_.content as content4_2_, posts0_.title as title5_2_ from posts posts0_ where 1=1 order by posts0_.id asc limit 10 ; &#123;executed in 1 msec&#125;</code></pre><p>还能够定义超过1定时间的执行sql记录为error类型。</p><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;com.googlecode.log4jdbc&lt;/groupId&gt;            &lt;artifactId&gt;log4jdbc&lt;/artifactId&gt;            &lt;version&gt;1.2&lt;/version&gt;            &lt;scope&gt;runtime&lt;/scope&gt;        &lt;/dependency&gt;</code></pre><pre><code class="ini">spring.datasource.driver-class-name: net.sf.log4jdbc.DriverSpy#使用log4jdbc后mysql的urlspring.datasource.url=jdbc:log4jdbc:mysql://localhost:3306/xxxx?useUnicode=true&amp;characterEncoding=UTF-8#使用log4jdbc后oracle的url#spring.datasource.url: jdbc:log4jdbc:oracle:thin:@127.0.0.1:1521:orcl</code></pre><p>注意需要添加<code>spring.datasource.driver-class-name</code> 和更改 <code>spring.datasource.url</code> 将jdbc改为 jdbc:log4jdbc</p><p><em>log4jdbc.properties</em>可以定义更多配置</p><pre><code class="ini">#配置为需要记录的包或类匹配路径#log4jdbc.debug.stack.prefix=com.drp#log4jdbc加载的drivers (驱动名)#log4jdbc.drivers=oracle.jdbc.OracleDriverlog4jdbc.auto.load.popular.drivers=true#在日志中显示warn警告log4jdbc.statement.warn=true#毫秒值.执行时间超过该值的SQL语句将被记录为warn级别.log4jdbc.sqltiming.warn.threshold=2000#毫秒值.执行时间超过该值的SQL语句将被记录为error级别.log4jdbc.sqltiming.error.threshold=3000#是把boolean记录为 &#39;true&#39;/&#39;false&#39; 还是 1/0. 默认设置为false,不启用,为了移植性.#log4jdbc.dump.booleanastruefalse=true#输出的sql,一行最大的字符数，默认90. 以后新版可能为0#log4jdbc.dump.sql.maxlinelength=90#如果在调试模式下转储，则转储整个堆栈跟踪  默认falselog4jdbc.dump.fulldebugstacktrace=false#是否记录某些类型的语句，默认truelog4jdbc.dump.sql.select=truelog4jdbc.dump.sql.insert=truelog4jdbc.dump.sql.delete=truelog4jdbc.dump.sql.update=truelog4jdbc.dump.sql.create=true#输出sql末尾处加入分号，默认falselog4jdbc.dump.sql.addsemicolon=true#将此设置为false以不修剪已记录的SQLlog4jdbc.trim.sql=true#将此设置为false不删除额外的空行log4jdbc.trim.sql.extrablanklines=true#log4jdbc.suppress.generated.keys.exception=false</code></pre><ul><li>✔️ 可以显示sql</li><li>✔️ 不能和参数一起显示</li><li>✔️ 不能显示limit参数</li><li>❌ 能计数</li><li>✔️  能记录单个sql耗时</li><li>❌ 不能统计总耗时</li></ul><p>不足的是，单纯log4jdbc并不能满足所有。理论上log4jdbc+org.hibernate.EmptyInterceptor可以满足需求了</p><h2 id="P6Spy"><a href="#P6Spy" class="headerlink" title="P6Spy"></a>P6Spy</h2><p>测试完毕，发现P6Spy目前最能满足需求：</p><ul><li>✔️ 可以显示sql</li><li>✔️ 不能和参数一起显示</li><li>✔️ 不能显示limit参数</li><li>✔️ 能计数</li><li>✔️ 不能记录耗时</li><li>✔️ 支持curd事件前后钩子，钩子参数返回sql和执行耗时及异常信息🚀</li></ul><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;p6spy&lt;/groupId&gt;            &lt;artifactId&gt;p6spy&lt;/artifactId&gt;            &lt;version&gt;3.9.1&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p>同<code>log4jdbc</code>需要改driver和url</p><pre><code class="ini">spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriverspring.datasource.url=jdbc:p6spy:mysql://localhost:3306/test?useLegacyDatetimeCode=false&amp;serverTimezone=UTC</code></pre><p><em>psy.properties</em>可以定义更多配置</p><pre><code class="ini">#modulelist=com.p6spy.engine.spy.P6SpyFactory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactorymodulelist=com.vison.itdoc.config.CustomeP6Factory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory#moduelist很关键，我这里使用了自定义的Factory，因为我需要自定义eventappender=com.p6spy.engine.spy.appender.Slf4JLoggerlogMessageFormat=com.p6spy.engine.spy.appender.CustomLineFormatcustomLogMessageFormat=%(executionTime) ms|%(category)|%(sql)excludecategories=result,resultset,info,debug</code></pre><p>正常使用默认配置就可以显示出sql和耗时信息</p><pre><code> 4 ms|statement|select admin0_.id as id1_0_, admin0_.create_time as create_t2_0_, admin0_.modify_time as modify_t3_0_, admin0_.email as email4_0_, admin0_.password as password5_0_, admin0_.status as status6_0_, admin0_.username as username7_0_ from admin admin0_ where admin0_.username=&#39;root&#39;</code></pre><p>可以看到，耗时信息和实际参数</p><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p><code>modulelist=com.p6spy.engine.spy.P6SpyFactory</code>改成<code>自定义Factory</code></p><p>自定义Factory</p><pre><code class="java">public class CustomeP6Factory implements com.p6spy.engine.spy.P6Factory &#123;    @Override    public P6LoadableOptions getOptions(P6OptionsRepository optionsRepository) &#123;        return new P6SpyOptions(optionsRepository);    &#125;    @Override    public JdbcEventListener getJdbcEventListener() &#123;        return new P6spyListener(); //使用自定义Listener    &#125;&#125;</code></pre><p>自定义事件</p><pre><code class="java">public class P6spyListener extends JdbcEventListener &#123;    @Override    public void onAfterExecuteQuery(PreparedStatementInformation statementInformation, long timeElapsedNanos, SQLException e) &#123;        App.sqlCount.incrementAndGet();        Log.info(&quot;execute query...&quot;, statementInformation.getSqlWithValues());    &#125;    @Override    public void onAfterExecuteUpdate(PreparedStatementInformation statementInformation, long timeElapsedNanos, int rowCount, SQLException e) &#123;        App.sqlCount.incrementAndGet();        Log.info(&quot;execute update..&quot;, statementInformation.getSqlWithValues());    &#125;    @Override    public void onAfterExecute(StatementInformation statementInformation, long timeElapsedNanos, String sql, SQLException e) &#123;        Log.info(&quot;execute..&quot;, statementInformation.getSqlWithValues());    &#125;&#125;</code></pre><p>可以看到，我在自定义事件中进行了sql计数.于是我可以在请求结束时打印每次请求的总sql执行次数。</p><pre><code class="java">public class RequestInitInterceptor implements HandlerInterceptor &#123;    public RequestInitInterceptor() &#123;    &#125;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception &#123;        App._uniq_req_no = UUID.randomUUID().toString();        App.sqlCount = new AtomicInteger(0);        Log.setMsgTraceNo(App._uniq_req_no);        Log.info(&quot;request start...&quot;, handler);        return true;    &#125;    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception &#123;        Log.info(String.format(&quot;finish request sql执行次数:%s&quot;, App.sqlCount));    &#125;&#125;</code></pre><p>由于事件参数还给出了<code>timeElapsedNanos</code>,最终我们还能统计出所有sql执行的耗时。这样一来我们就能看出一次请求内，最耗时的操作具体是什么。达到类似以下效果：</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210224141855.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://knes1.github.io/blog/2015/2015-07-08-counting-queries-per-request-with-hibernate-and-spring.html">Counting Queries per Request with Hibernate and Spring</a></li><li><a href="https://github.com/p6spy/p6spy/issues/362">register an event handler</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot+vue+supervisor+nginx的前后端分离部署</title>
      <link href="2021/02/22/spring-boot-vue%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%83%A8%E7%BD%B2/"/>
      <url>2021/02/22/spring-boot-vue%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<ul><li>要保证同域部署,因为跨域会有很多问题要重新解决</li></ul><p>顺便树下，但其实现在互联网产品一般都有多客户端，pc web 、小程序、app。保守的同域session模式保持会话已经满足不了一些需求。比如，单端登录等。</p><p>言归正传，我采取的思路是，前端请求接口时统一加上api前缀，nginx将api前缀的路由请求代理转发到spring-boot</p><span id="more"></span><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><pre><code class="nginx">server &#123;    server_name admin.domain.xyz;    index index.html;    location  / &#123;                index index.html;                root /home/wwwuser/webroot/itdoc-admin-web/dist/spa;        &#125;    location /api/ &#123;              proxy_pass  http://127.0.0.1:8081/;        &#125;    # optionally disable falling back to PHP script for the asset directories;    # nginx will return a 404 error when files are not found instead of passing the    # request to Symfony (improves performance but Symfony&#39;s 404 page is not displayed)    # location /bundles &#123;    #     try_files $uri =404;    # &#125;    error_log /var/log/nginx/admin_error.log;    access_log /var/log/nginx/admin_access.log;&#125;</code></pre><h2 id="supervisor守护java-jar"><a href="#supervisor守护java-jar" class="headerlink" title="supervisor守护java -jar"></a>supervisor守护java -jar</h2><p>我这里采取java -jar模式部署，但是单纯的这种模式并不能保证自启动和进程监控等。因此需要借助supervisor。</p><pre><code class="ini">[program:itdoc]command=/usr/local/jdk-11.0.2/bin/java -jar itdoc-0.0.2-SNAPSHOT.jarprocess_name=%(program_name)snumprocs=1directory=/home/wwwuser/webrootumask=022priority=999autostart=trueautorestart=unexpectedstartsecs=10startretries=3exitcodes=0stopsignal=TERMstopwaitsecs=10stopasgroup=falsekillasgroup=falseuser=wwwuserredirect_stderr=falsestdout_logfile=/var/log/webroot/itdoc-out.logstdout_logfile_maxbytes=1MBstdout_logfile_backups=10stdout_capture_maxbytes=1MBstdout_events_enabled=falsestderr_logfile=/var/log/webroot/itdoc-err.logstderr_logfile_maxbytes=1MBstderr_logfile_backups=10stderr_capture_maxbytes=1MB</code></pre><p>这里的<code>autostart</code> 和 <code>autorestart</code> 能保证自启动和启动重启</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Locust进行性能测试</title>
      <link href="2021/01/23/%E5%88%A9%E7%94%A8Locust%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>2021/01/23/%E5%88%A9%E7%94%A8Locust%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>要看一个项目的最大可用能力是多少，性能测试工作少不了.</li><li>每一个项目都应该做压测</li><li>多线程并发模型一定要做压测</li></ul><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>$ pip3 install locust</code></pre><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><pre><code class="python">import timefrom locust import HttpUser, task, betweenclass QuickstartUser(HttpUser):    wait_time = between(1, 2.5)    @task    def hello_world(self):        self.client.get(&quot;/hello&quot;)        self.client.get(&quot;/world&quot;)    @task(3)    def view_items(self):        for item_id in range(10):            self.client.get(f&quot;/item?id=&#123;item_id&#125;&quot;, name=&quot;/item&quot;)            time.sleep(1)    def on_start(self):        self.client.post(&quot;/login&quot;, json=&#123;&quot;username&quot;:&quot;foo&quot;, &quot;password&quot;:&quot;bar&quot;&#125;)</code></pre><p><code>wait_time = between(1, 2.5)</code></p><p>Our class defines a wait_time that will make the simulated users wait between 1 and 2.5 seconds after each task (see below) is executed. For more info see wait_time attribute.</p><p><code>def hello_world(self):</code></p><pre><code class="python">@taskdef hello_world(self):    self.client.get(&quot;/hello&quot;)    self.client.get(&quot;/world&quot;)@task(3)def view_items(self):...</code></pre><p><code>task(3)</code> 内的参数表示任务执行的权重，<code>view_items</code>的次数将是<code>hello_world</code>次数的3倍。</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><pre><code>$ locust -f locust_files/my_locust_file.py</code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210330151409.png" alt=""></p><p>任务执行界面和结果</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210330151426.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑启动</title>
      <link href="2021/01/21/%E9%BB%91%E5%90%AF%E5%8A%A8/"/>
      <url>2021/01/21/%E9%BB%91%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="facebook案例"><a href="#facebook案例" class="headerlink" title="facebook案例"></a>facebook案例</h2><p>作为黑启动流程的一部分，每个Facebook 用户会话（在用户端浏览器中运行<br>JavaScript 代码）都加载了测试工具。虽然聊天功能的用户界面元素被隐藏起来，但浏览器<br>还是会向已部署在生产环境中的后台聊天服务器发送用户不可见的聊天测试信息，这使开</p><p>发团队能够在整个项目过程中模拟出类生产负载，从而在发布之前找出并解决性能问题。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210121214126.jpeg" alt=""></p><p>老子惊了,这有点牛皮</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>servlet集成mybatis-无xml&amp;注解方式</title>
      <link href="2021/01/06/java/servlet%E9%9B%86%E6%88%90mybatis-%E6%97%A0xml-%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/"/>
      <url>2021/01/06/java/servlet%E9%9B%86%E6%88%90mybatis-%E6%97%A0xml-%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>习惯了php项目之后，恐怕非常不喜欢操作xml吧.本章将介绍servlet+mybatis无xml配置模式。</p></blockquote><span id="more"></span><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre><code class="xml">     &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.26&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;            &lt;version&gt;3.5.6&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>首先定义datasource</p><pre><code class="java">public class DatabaseConfig &#123;    static String driver = &quot;com.mysql.jdbc.Driver&quot;;    static String url = &quot;jdbc:mysql://localhost:3306/db_itdoc?useSSL=false&quot;;    static String username = &quot;root&quot;;    static String password = &quot;12345678&quot;;    public static DataSource getDataSource() &#123;        Properties properties = new Properties();        properties.setProperty(&quot;driver&quot;, driver);        properties.setProperty(&quot;url&quot;, url);        properties.setProperty(&quot;username&quot;, username);        properties.setProperty(&quot;password&quot;, password);        UnpooledDataSourceFactory unpooledDataSourceFactory = new UnpooledDataSourceFactory();        unpooledDataSourceFactory.setProperties(properties);        DataSource dataSource = unpooledDataSourceFactory.getDataSource();        return dataSource;    &#125;&#125;</code></pre><p>获取sessionFactory</p><pre><code class="java">public class MybatisLoader &#123;    static SqlSessionFactory sqlSessionFactory = null;    public static SqlSessionFactory getSqlSessionFactory() &#123;        if (sqlSessionFactory == null) &#123;            DataSource dataSource = DatabaseConfig.getDataSource();            TransactionFactory transactionFactory                    = new JdbcTransactionFactory();            Environment environment                    = new Environment(&quot;development&quot;, transactionFactory, dataSource);            Configuration configuration = new Configuration(environment);            configuration.addMapper(UserMapper.class);            sqlSessionFactory                    = new SqlSessionFactoryBuilder().build(configuration);        &#125;        return sqlSessionFactory;    &#125;&#125;</code></pre><h2 id="定义mapper"><a href="#定义mapper" class="headerlink" title="定义mapper"></a>定义mapper</h2><pre><code class="java">public interface UserMapper &#123;    @Select(&quot;SELECT * FROM user WHERE id = #&#123;id&#125;&quot;)    User selectUser(int id);    @Insert(&quot;INSERT INTO user(name,email) VALUES(#&#123;name&#125;, #&#123;email&#125;)&quot;)    int insertUser(User user);&#125;</code></pre><h2 id="查询和插入"><a href="#查询和插入" class="headerlink" title="查询和插入"></a>查询和插入</h2><pre><code class="java">public class UserController &#123;    public UserController() &#123;    &#125;    @GetMapping(path = &quot;/user/profile&quot;)    public String profile(HttpServletRequest request, HttpServletResponse response) &#123;        System.out.print(request.getCookies());        return &quot;i am user profile&quot;;    &#125;    @GetMapping(path = &quot;/user&quot;)    public Response user(HttpServletRequest request, int id) &#123;        User user = null;        SqlSession session = MybatisLoader.getSqlSessionFactory().openSession();        UserMapper mapper = session.getMapper(UserMapper.class);        user = mapper.selectUser(id);        return new Response(0, &quot;获取成功&quot;, user);    &#125;    @PostMapping(path = &quot;/user/add&quot;)    public Response add(User user) &#123;        Log.info(&quot;request user&quot;, user);        try &#123;            SqlSession session = MybatisLoader.getSqlSessionFactory().openSession();            UserMapper mapper = session.getMapper(UserMapper.class);            int id = mapper.insertUser(user);            session.commit();            Log.debug(&quot;返回&quot;, id);        &#125; catch (Exception e) &#123;            Log.error(&quot;保存失败&quot;, e);        &#125;        return new Response(0, &quot;保存&quot;, user);    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撕javaweb开发</title>
      <link href="2020/12/22/java/%E6%89%8B%E6%92%95javaweb%E5%BC%80%E5%8F%91/"/>
      <url>2020/12/22/java/%E6%89%8B%E6%92%95javaweb%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>本系列文章将以几乎0基础javaweb为背景手写一个javaweb框架并进行开发。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>0基础javaweb,没有javaweb开发的实际经验</li><li>有多年PHPweb实战经验</li><li>有一定java语法基础</li><li>有5分(满分100)的spring boot知识储备，毕竟用spring boot启动一个hello world还是比较简单的。</li></ul><h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><p>本文宗旨是想通过手写java web框架的方式，让有其他语言web开发经验的同事能由浅入深学会java web开发和理解其中原理。本系列文章将有以下几点原则。</p><ul><li>注重实践，一定会有源代码运行成功案例</li><li>有理有据，一些实现必须有官方或权威文献解释</li></ul><h2 id="更新目录"><a href="#更新目录" class="headerlink" title="更新目录"></a>更新目录</h2><ol><li><a href="https://visonforcoding.github.io/2020/12/18/java/%E6%98%A5%E5%A4%A9%E4%B9%8B%E5%89%8D-http/">手撕javaweb-HTTP前世</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4j使用指南</title>
      <link href="2020/12/21/java/log4j%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>2020/12/21/java/log4j%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>对于刚开始接触java的人来说，用什么来打日志似乎快被java的这么多概念搞懵了。log4j、log4j2、slf4j、logback?!!</p><span id="more"></span><h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><p>Apache Log4j 是一个非常古老的日志框架，并且是多年来最受欢迎的日志框架。 它引入了现代日志框架仍在使用的基本概念，如分层日志级别和记录器。</p><p>2015 年 8 月 5 日，该项目管理委员会宣布 Log4j 1.x 已达到使用寿命。 建议用户使用 Log4j 1 升级到 Apache<br>Log4j 2。</p><h2 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h2><p>Apache Log4j 2是对 Log4j 的升级，它比其前身 Log4j 1.x 提供了重大改进，并提供了 Logback 中可用的许多改进，同时修复了 Logback 架构中的一些固有问题。</p><p>与 Logback 一样，Log4j2 提供对 SLF4J 的支持，自动重新加载日志配置，并支持高级过滤选项。 除了这些功能外，它还允许基于 lambda 表达式对日志语句进行延迟评估，为低延迟系统提供异步记录器，并提供无垃圾模式以避免由垃圾收集器操作引起的任何延迟。</p><p>所有这些功能使 Log4j2 成为这三个日志框架中最先进和最快的。</p><h2 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h2><p>logback 是由 log4j 创始人设计的又一个开源日志组件，作为流行的 log4j 项目的后续版本，从而替代 log4j。</p><p>Logback 的体系结构足够通用，以便在不同情况下应用。 目前，logback 分为三个模块：logback-core，logback-classic和logback-access。</p><p>logback-core：模块为其他两个模块的基础。<br>logback-classic：模块可以被看做是log4j的改进版本。此外，logback-classic 本身实现了 SLF4J API，因此可以在 logback 和其他日志框架（如 log4j 或 java.util.logging（JUL））之间来回切换。<br>logback-access：模块与 Servlet 容器（如 Tomcat 和 Jetty）集成，以提供 HTTP 访问日志功能。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20201221143239.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春天之前-HTTP前世</title>
      <link href="2020/12/18/java/%E6%98%A5%E5%A4%A9%E4%B9%8B%E5%89%8D-http/"/>
      <url>2020/12/18/java/%E6%98%A5%E5%A4%A9%E4%B9%8B%E5%89%8D-http/</url>
      
        <content type="html"><![CDATA[<blockquote><p>试图跳过spring,而学习spring boot是不可能的。学习java web开发，从基础开始学习。就应当了解http、servlet、tomcat</p></blockquote><span id="more"></span><ul><li>起源</li><li>它解决什么问题</li><li>实现原理</li></ul><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>1980年6月至12月间，伯纳斯-李在的CERN（欧洲核子研究组织）担任工作。实验室的研究人员需要大量的信息查阅或沟通。在那段时间里，他提出了个构想：创建一个以超文本系统为基础的项目，方便研究人员分享及更新讯息。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20201222144257.png" alt=""></p><p>1989年3月，他写下了他的初步构想，并在1990年重新配置。然后被他的经理麦克·森德尔（Mike Sendall）所接受。他使用与ENQUIRE系统相似的概念来创建万维网，为此他设计并构建了第一个网页浏览器。</p><p>世界上第一个网站在CERN搭建，而CERN则位于法国边境。网站在1991年8月6日上线。</p><p>上线 的第一个网址，<a href="http://info.cern.ch/hypertext/WWW/TheProject.html">http://info.cern.ch/hypertext/WWW/TheProject.html</a> 告诉人们万维网是什么，用户如何使用浏览器，如何创建网页服务器。</p><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20201218163846.png" alt=""></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>一个连接是由传输层来控制的，这从根本上不属于HTTP的范围。HTTP并不需要其底层的传输层协议是面向连接的，只需要它是可靠的，或不丢失消息的（至少返回错误）。在互联网中，有两个最常用的传输层协议：TCP是可靠的，而UDP不是。因此，HTTP依赖于面向连接的TCP进行消息传递，但连接并不是必须的。因此通过socket编程就能实现http协议。</p><pre><code class="java">public class Server &#123;    private static int port = 8081;    public static void main(String[] args) throws IOException &#123;        ServerSocket ss = new ServerSocket(port); // 监听指定端口        System.out.println(&quot;server is running...&quot;);        for (;;) &#123;            Socket sock = ss.accept();            System.out.println(&quot;connected from &quot; + sock.getRemoteSocketAddress());            Thread t = new Handler(sock);            t.start();        &#125;    &#125;&#125;public class Handler extends Thread &#123;    Socket sock;    public Handler(Socket sock) &#123;        this.sock = sock;    &#125;    public void run() &#123;        try ( InputStream input = this.sock.getInputStream()) &#123;            try ( OutputStream output = this.sock.getOutputStream()) &#123;                handle(input, output);            &#125;        &#125; catch (Exception e) &#123;            try &#123;                this.sock.close();            &#125; catch (IOException ioe) &#123;            &#125;            System.out.println(&quot;client disconnected.&quot;);        &#125;    &#125;    private void handle(InputStream input, OutputStream output) throws IOException &#123;        System.out.println(&quot;Process new http request...&quot;);        var reader = new BufferedReader(new InputStreamReader(input, StandardCharsets.UTF_8));        var writer = new BufferedWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8));        // 读取HTTP请求:        boolean requestOk = false;        String first = reader.readLine();        if (first.startsWith(&quot;GET / HTTP/1.&quot;)) &#123;            requestOk = true;        &#125;        for (;;) &#123;            String header = reader.readLine();            if (header.isEmpty()) &#123; // 读取到空行时, HTTP Header读取完毕                break;            &#125;            System.out.println(header);        &#125;        System.out.println(requestOk ? &quot;Response OK&quot; : &quot;Response Error&quot;);        if (!requestOk) &#123;            // 发送错误响应:            writer.write(&quot;HTTP/1.0 404 Not Found\r\n&quot;);            writer.write(&quot;Content-Length: 0\r\n&quot;);            writer.write(&quot;\r\n&quot;);            writer.flush();        &#125; else &#123;            // 发送成功响应:            String data = &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;;            int length = data.getBytes(StandardCharsets.UTF_8).length;            writer.write(&quot;HTTP/1.0 200 OK\r\n&quot;);            writer.write(&quot;Connection: close\r\n&quot;);            writer.write(&quot;Content-Type: text/html\r\n&quot;);            writer.write(&quot;Content-Length: &quot; + length + &quot;\r\n&quot;);            writer.write(&quot;\r\n&quot;); // 空行标识Header和Body的分隔            writer.write(data);            writer.flush();        &#125;        // TODO: 处理HTTP请求    &#125;&#125;</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304265903570978">廖雪峰-web基础</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Spring MVC HandlerInterceptor拦截器介绍</title>
      <link href="2020/09/24/java/Introduction-to-Spring-MVC-HandlerInterceptor%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/09/24/java/Introduction-to-Spring-MVC-HandlerInterceptor%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java JPA思考</title>
      <link href="2020/09/23/java/Java-JPA%E6%80%9D%E8%80%83/"/>
      <url>2020/09/23/java/Java-JPA%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200923170827.png" alt=""></p><p>JPA即Java Persistence API. 2006年5月11号，JPA 1.0 规范作为 JCP JSR 220 的一部分最终被发布。</p><p>在PHP世界当中doctrine、cake ORM 都有JPA的影子。</p><span id="more"></span><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>持久化实体是一个轻量级的 Java 类，其状态通常持久地保存到关系数据库的表中。 这种实体的实例对应于表中的各个行。 实体之间通常有关系，这些关系通过对象/关系元数据表示。 可以在实体类文件中直接使用注释来指定这种关系，也可以在随应用程序分发的单独XML描述文件中指定。</p><h2 id="JPQL"><a href="#JPQL" class="headerlink" title="JPQL"></a>JPQL</h2><p>Java持久化查询语言 （JPQL）对存储在关系数据库中的实体进行查询。查询在语法上类似于SQL查询，但是操作的是实体对象而不是直接对数据库表进行操作。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>在引入EJB 3.0规范之前，许多企业级Java开发人员使用由持久化框架（例如Hibernate）或数据访问对象（DAO）提供的轻量级持久化对象，来代替实体bean（EJB的一种）。 这是因为在以前的EJB规范中，实体bean需要太多复杂的代码和繁重的资源占用，并且由于bean和DAO对象或持久化框架之间的源代码中的互连和依赖性，它们只能在Java EE应用程序服务器中使用。 因此，最初在第三方持久性框架中提供的许多功能都被合并到Java Persistence API中，并且从2006年开始，<code>像Hibernate（版本3.2）和TopLink Essentials这样的项目已经实现Java Persistence API规范。</code></p><h2 id="JPA提供商"><a href="#JPA提供商" class="headerlink" title="JPA提供商"></a>JPA提供商</h2><p>JPA是一个开源API，因此Oracle，Redhat，Eclipse等各种企业供应商通过在其中添加JPA持久性风格来提供新产品。 其中一些产品包括:</p><p>Hibernate, Eclipselink, Toplink, Spring Data JPA, etc.</p><p>JSR定义了标准，众多组织对这个标准进行了实现，这使得开发者几乎可以在不同的实现版本里无缝切换。</p><h2 id="注解-Annotations"><a href="#注解-Annotations" class="headerlink" title="注解 Annotations"></a>注解 Annotations</h2><p>通常，Xml文件用于配置特定组件，或映射两种不同规格的组件。 在我们的例子中，我们必须在框架中单独维护xml。 这意味着在编写映射xml文件时，我们需要将POJO类属性与mapping.xml文件中的实体标记进行比较。</p><p>这是解决方案:在类定义中，我们可以使用注释编写配置部分。 注释用于类，属性和方法。 注释以“@”符号开头。 在声明类，属性或方法之前声明注释。 JPA的所有注释都在javax.persistence包中定义。</p><p>以下是我们的示例中使用的注释列表</p><p>注解    描述</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>@Entity</td><td>此批注指定将类声明为实体或表</td></tr><tr><td>@Table</td><td>此批注指定声明表名。</td></tr><tr><td>@Basic</td><td>此批注明确指定非约束字段</td></tr><tr><td>@Embedded</td><td>此批注指定类或实体的属性，该实体的可嵌入类的值实例。</td></tr><tr><td>@Id</td><td>此批注指定属性，用于类的标识（表的主键）。</td></tr><tr><td>@GeneratedValue</td><td>此批注指定了如何初始化标识属性，例如自动，手动或从序列表中获取的值。</td></tr><tr><td>@Transient</td><td>此批注指定了不持久的属性，即该值永远不会存储到数据库中。</td></tr><tr><td>@Column</td><td>此批注用于指定持久性属性的列或属性。</td></tr><tr><td>@SequenceGenerator</td><td>此批注用于定义@GeneratedValue批注中指定的属性的值。 它创建了一个序列。</td></tr><tr><td>@TableGenerator</td><td>此批注用于指定@GeneratedValue批注中指定的属性的值生成器。 它创建了一个价值生成表。</td></tr><tr><td>@AccessType</td><td>此类注释用于设置访问类型。 如果设置@AccessType（FIELD），则会发生字段访问。 如果设置@AccessType（PROPERTY），则将进行Property wise评估。</td></tr><tr><td>@JoinColumn</td><td>此批注用于指定实体关联或实体集合。 这用于多对一和一对多关联。</td></tr><tr><td>@UniqueConstraint</td><td>此批注用于指定主要或辅助表的字段，唯一约束。</td></tr><tr><td>@ColumnResult</td><td>此批注使用select子句引用SQL查询中的列的名称。</td></tr><tr><td>@ManyToMany</td><td>此批注用于定义连接表之间的多对多关系。</td></tr><tr><td>@ManyToOne</td><td>此批注用于定义连接表之间的多对一关系。</td></tr><tr><td>@OneToMany</td><td>此批注用于定义连接表之间的一对多关系。</td></tr><tr><td>@OneToOne</td><td>此批注用于定义连接表之间的一对一关系。</td></tr><tr><td>@NamedQueries</td><td>此批注用于指定命名查询的列表。</td></tr><tr><td>@NamedQuery</td><td>此批注用于使用静态名称指定查询。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP QA</title>
      <link href="2020/09/17/php/PHP-QA%E4%B9%8BPHPStan/"/>
      <url>2020/09/17/php/PHP-QA%E4%B9%8BPHPStan/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200917210020.png" alt=""></p><p>写在前面，工作7年，PHP也写了7年了。期间也写一些java和python，也对各语言的特点有一些自己的体会。<br>这次咱们聊聊QA之余也来聊聊PHP语言本身。</p><span id="more"></span><p>来到<code>PHPStan</code>的官网，我看到了一段话。</p><blockquote><p>I really like how much productivity a web developer gains by switching from compiled languages like Java or C# to an interpreted one like PHP. Aside from the dead simple execution model (start, handle one request, and die) and a much shorter feedback loop (no need to wait for the compiler), there’s a healthy ecosystem of open-source frameworks and libraries to help developers with their everyday tasks. Because of these reasons, PHP is the most popular language for web development by far.</p></blockquote><p>大意是作者很乐意看到web开发者们从C#或Java这些编译性语言里切换到解释语言。除了简单的执行模型（启动，处理一个请求和终止）和较短的反馈周期（无需等待编译）之外，还有一个健康的开源框架和库生态系统可帮助开发人员完成日常工作任务。由于这些原因，PHP是迄今为止最流行的Web开发语言。</p><p>这篇文章是作者2016年12月4日写的，说实话对于<code>PHP是迄今为止最流行的Web开发语言</code>这句话我已经开始怀疑了。至少在最近这些年，在国内PHP的市场已经不那么好了。并且我也在趋向从解释性语言向编译语言切换了。但是其中对于解释性语言的优势描述我是非常赞同的，这也是它宝贵的优势。</p><ul><li>简单的执行模型</li><li>较短的反馈周期</li></ul><h2 id="QA之PHPStan"><a href="#QA之PHPStan" class="headerlink" title="QA之PHPStan"></a>QA之PHPStan</h2><p>言归正传，继续PHPStan</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>composer require --dev phpstan/phpstan</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre><code>vendor/bin/phpstan analyse src tests</code></pre><h2 id="PHPmd"><a href="#PHPmd" class="headerlink" title="PHPmd"></a>PHPmd</h2><pre><code>~/vendor/bin/phpmd src/Service/OrderService.php text codesize,unusedcode,naming</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+vuex+axios+vant+vue-router简单单页登录态demo</title>
      <link href="2020/09/15/web/vue-vuex-axios-vant-vue-router%E7%AE%80%E5%8D%95%E5%8D%95%E9%A1%B5%E7%99%BB%E5%BD%95%E6%80%81demo/"/>
      <url>2020/09/15/web/vue-vuex-axios-vant-vue-router%E7%AE%80%E5%8D%95%E5%8D%95%E9%A1%B5%E7%99%BB%E5%BD%95%E6%80%81demo/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200915182645.png" alt=""></p><span id="more"></span><h2 id="创建vant项目"><a href="#创建vant项目" class="headerlink" title="创建vant项目"></a>创建vant项目</h2><pre><code class="shell"># 安装 Vue Clinpm install -g @vue/cli# 创建一个项目vue create hello-world# 创建完成后，可以通过命令打开图形化界面，如下图所示vue ui# 或者 通过 yarn 安装yarn add vant</code></pre><p><img src="http://img.rc5j.cn/blog20200915181419.png" alt=""></p><p>在图形化界面中，点击<code>依赖</code> -&gt; <code>安装依赖</code>，然后将 <code>vant</code> 添加到依赖中即可。</p><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><pre><code class="shell">yarn add vue-router</code></pre><pre><code class="html">&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;van-nav-bar    title=&quot;标题&quot;    left-text=&quot;返回&quot;    right-text=&quot;按钮&quot;    left-arrow    @click-left=&quot;onClickLeft&quot;    @click-right=&quot;onClickRight&quot;      /&gt;    &lt;router-view&gt;&lt;/router-view&gt;    &lt;van-tabbar v-model=&quot;active&quot;&gt;      &lt;van-tabbar-item icon=&quot;home-o&quot; to=&quot;/&quot;&gt;主页&lt;/van-tabbar-item&gt;      &lt;van-tabbar-item icon=&quot;search&quot;&gt;标签&lt;/van-tabbar-item&gt;      &lt;van-tabbar-item icon=&quot;friends-o&quot;&gt;标签&lt;/van-tabbar-item&gt;      &lt;van-tabbar-item icon=&quot;user-o&quot; to=&quot;/user/detail&quot;&gt;我的&lt;/van-tabbar-item&gt;    &lt;/van-tabbar&gt;  &lt;/div&gt;&lt;/template&gt;&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;van-nav-bar    title=&quot;标题&quot;    left-text=&quot;返回&quot;    right-text=&quot;按钮&quot;    left-arrow    @click-left=&quot;onClickLeft&quot;    @click-right=&quot;onClickRight&quot;      /&gt;    &lt;router-view&gt;&lt;/router-view&gt;    &lt;van-tabbar v-model=&quot;active&quot;&gt;      &lt;van-tabbar-item icon=&quot;home-o&quot; to=&quot;/&quot;&gt;主页&lt;/van-tabbar-item&gt;      &lt;van-tabbar-item icon=&quot;search&quot;&gt;标签&lt;/van-tabbar-item&gt;      &lt;van-tabbar-item icon=&quot;friends-o&quot;&gt;标签&lt;/van-tabbar-item&gt;      &lt;van-tabbar-item icon=&quot;user-o&quot; to=&quot;/user/detail&quot;&gt;我的&lt;/van-tabbar-item&gt;    &lt;/van-tabbar&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>路由配置和登录态控制</p><pre><code class="js">import Vue from &#39;vue&#39;import VueRouter from &#39;vue-router&#39;// import store from &#39;@/store&#39;// import layout from &#39;@/layout/layout&#39;Vue.use(VueRouter)const routes = [  &#123;    path: &#39;/&#39;,    name: &#39;home&#39;,    component: () =&gt; import(&quot;@/views/Home&quot;)  &#125;,  &#123;    path: &#39;/user/detail&#39;,    name: &#39;user_detail&#39;,    meta:&#123;      requireLogin:true    &#125;,    component: () =&gt; import(&quot;@/views/User/detail.vue&quot;)  &#125;,  &#123;    path: &#39;/login&#39;,    name: &#39;login&#39;,    meta:&#123;      requireLogin:false    &#125;,    component: () =&gt; import(&quot;@/views/Login/login.vue&quot;)  &#125;,]const router = new VueRouter(&#123;  mode: &#39;history&#39;,  base: process.env.BASE_URL,  routes&#125;)router.beforeEach((to, from, next) =&gt; &#123;  const token = sessionStorage.getItem(&#39;token&#39;);  // store.getters(&#39;isLogin&#39;)  if (to.meta.requireLogin) &#123;    //需要检测登录    if (token) &#123;      next();    &#125; else &#123;      console.log(&#39;前往登录...&#39;)      next(&#123;        path: &#39;/login&#39;      &#125;);    &#125;  &#125; else &#123;    next();  &#125;&#125;)export default router</code></pre><p><img src="http://img.rc5j.cn/blog20200915181827.png" alt=""></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>引入<code>axios</code></p><pre><code>yarn add axios</code></pre><pre><code class="js">import &#123; login &#125; from &quot;@/api/loginReq&quot;;export default &#123;    data() &#123;    return &#123;      loading: false,      loginInfo:&#123;          username:&quot;&quot;,          pwd:&quot;&quot;      &#125;    &#125;;  &#125;,  methods: &#123;    onSubmit(values) &#123;      this.loading = true;      login(this.loginInfo).then((response) =&gt; &#123;        console.log(response);        if(response.code===0)&#123;            sessionStorage.setItem(&#39;token&#39;,response.data.username);        &#125;        this.$router.push(&#39;/&#39;)      &#125;);      this.loading = false;    &#125;,  &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot validation数据验证</title>
      <link href="2020/09/14/java/spring-boot-validation%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/"/>
      <url>2020/09/14/java/spring-boot-validation%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200914225941.png" alt=""></p><p>做业务处理，不可避免的要对参数进行校验，一套完整规范的校验体系可以提高不少的效率。</p><p>在写了PHP、java、python 等编程语言之后，我发现java的优势就是它的规范、它的严谨。在<code>jsr</code>之下建立各种场景的标准，所有人都在这套规范下拓展、迭代、升级。最终这套体系变得越来越完美、符合体系的生态产品也越来越多。 这大概就是java最强之处吧。</p><p>本节介绍下spring-boot的验证，它也是基于<code>jsr</code>的validation之下。</p><span id="more"></span><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre><code class="xml">    &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;      &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;         &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.validation&lt;/groupId&gt;            &lt;artifactId&gt;validation-api&lt;/artifactId&gt;            &lt;version&gt;2.0.1.Final&lt;/version&gt;            &lt;type&gt;jar&lt;/type&gt;        &lt;/dependency&gt;</code></pre><p>javax.validation 正是 jsr的规范。</p><h2 id="定义验证规则"><a href="#定义验证规则" class="headerlink" title="定义验证规则"></a>定义验证规则</h2><pre><code class="java">    @NotBlank(message = &quot;用户名不可为空&quot;)    @NotNull(message = &quot;不可为空&quot;)    private String username;    @NotBlank(message = &quot;密码不可为空&quot;)    @NotNull(message = &quot;密码不可为空&quot;)    private String pwd;</code></pre><h2 id="controller使用"><a href="#controller使用" class="headerlink" title="controller使用"></a>controller使用</h2><pre><code class="java"> public Response login(@Valid @RequestBody LoginInfo loginInfo, HttpServletRequest request, HttpSession session) &#123; &#125;</code></pre><p>这里要对<code>@Valid</code> 进行使用</p><h2 id="全局处理"><a href="#全局处理" class="headerlink" title="全局处理"></a>全局处理</h2><pre><code class="java">@RestControllerAdvicepublic class ControllerAdvice &#123;    /**     * ConstraintViolationException     */    @ExceptionHandler(MethodArgumentNotValidException.class)    public Response handleConstraintViolationException(MethodArgumentNotValidException ex) &#123;        Map&lt;String, String&gt; errors = new HashMap&lt;&gt;();        ex.getBindingResult().getAllErrors().forEach((error) -&gt; &#123;            String fieldName = ((FieldError) error).getField();            System.out.println(fieldName);            String errorMessage = error.getDefaultMessage();            errors.put(fieldName, errorMessage);            System.out.println(errorMessage);        &#125;);        return new Response(ResponseCode.parametrErrror, &quot;参数错误&quot;, errors);    &#125;&#125;</code></pre><p>由于使用<code>@Valid</code>对参数进行校验之后，如果有校验不通过会抛出一个<code>MethodArgumentNotValidException</code>异常。全局进行捕获之后可以全局处理参数不正确的情况。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/fqybzhangji/p/10384347.html">https://www.cnblogs.com/fqybzhangji/p/10384347.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC和spring对它的实现</title>
      <link href="2020/09/09/java/IOC%E5%92%8Cspring%E5%AF%B9%E5%AE%83%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/09/09/java/IOC%E5%92%8Cspring%E5%AF%B9%E5%AE%83%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200909211506.png" alt=""></p><span id="more"></span><h2 id="IOS概述"><a href="#IOS概述" class="headerlink" title="IOS概述"></a>IOS概述</h2><p><a href="https://www.cnblogs.com/DebugLZQ/archive/2013/06/05/3107957.html">https://www.cnblogs.com/DebugLZQ/archive/2013/06/05/3107957.html</a> 这篇文章已经讲的很好。</p><p>我做下总结。</p><ul><li>面向对象编程的世界，程序之间的耦合不可避免，而且会使得系统变得难以维护</li><li>IOC就是为了降低这种耦合</li><li>IOS也不是完美的，所有事情都有优缺点</li></ul><p><img src="http://img.rc5j.cn/blog20200909212010.png" alt=""></p><p>IOC就是为了把原本互相之间有耦合在一起，会造成牵一发而动全身的现象。通过容器解耦开,各自能独立运作。</p><p><img src="http://img.rc5j.cn/blog20200909212051.png" alt=""></p><h2 id="spring的实现"><a href="#spring的实现" class="headerlink" title="spring的实现"></a>spring的实现</h2><p>org.springframework.beans 和org.springframework.context 包是Spring Framework 的IoC 容器的基础。</p><p>BeanFactory 接口提供高级的配置机制，可以管理任意类型的对象。</p><ul><li>ApplicationContext 是BeanFactory 的子接口。</li><li>它添加了和Spring 的AOP 特性很简便的整合；</li><li>消息资源处理（用于国际化i18n），事件发布；</li><li>应用层特定的上下文， 比如用于Web 应用程序的WebApplicationContext。</li></ul><p>总之，BeanFactory 提供了配置框架和基本功能，而ApplicationContext 添加了更多企业级开发特定的功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php编译参数详解</title>
      <link href="2020/09/03/php%E7%BC%96%E8%AF%91%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/09/03/php%E7%BC%96%E8%AF%91%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>尽管经历了N次的手动编译，你可能还是不知道哪些编译参数需要哪些不需要</p><span id="more"></span><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>执行帮助命令查看编译配置帮助</p><pre><code>./configure --help=short</code></pre><p>得到结果</p><pre><code>Optional Features and Packages:  --disable-option-checking  ignore unrecognized --enable/--with options  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)  --with-libdir=NAME      Look for libraries in .../NAME rather than .../lib  --disable-rpath         Disable passing additional runtime library                          search paths  --enable-re2c-cgoto     Enable -g flag to re2c to use computed goto gcc extension  --disable-gcc-global-regs                          whether to enable GCC global register variablesSAPI modules:  --with-apxs2=FILE       Build shared Apache 2.0 Handler module. FILE is the optional                          pathname to the Apache apxs tool apxs  --disable-cli           Disable building CLI version of PHP                          (this forces --without-pear)  --enable-embed=TYPE     EXPERIMENTAL: Enable building of embedded SAPI library                          TYPE is either &#39;shared&#39; or &#39;static&#39;. TYPE=shared  --enable-fpm            Enable building of the fpm SAPI executable  fastcgi进程管理,这个应该必不可少  --with-fpm-user=USER    Set the user for php-fpm to run as. (default: nobody)  --with-fpm-group=GRP    Set the group for php-fpm to run as. For a system user, this                          should usually be set to match the fpm username (default: nobody)  --with-fpm-systemd      Activate systemd integration  --with-fpm-acl          Use POSIX Access Control Lists  --with-litespeed        Build PHP as litespeed module  --enable-phpdbg            Build phpdbg  --enable-phpdbg-webhelper  Build phpdbg web SAPI support  --enable-phpdbg-debug      Build phpdbg in debug mode  --enable-phpdbg-readline   Enable readline support in phpdbg (depends on static ext/readline)  --disable-cgi           Disable building CGI version of PHP   禁用cgi  --with-valgrind=DIR     Enable valgrind supportGeneral settings:  --enable-gcov           Enable GCOV code coverage (requires LTP) - FOR DEVELOPERS ONLY!!  --enable-debug          Compile with debugging symbols  --with-layout=TYPE      Set how installed files will be laid out.  Type can                          be either PHP or GNU [PHP]  --with-config-file-path=PATH                          Set the path in which to look for php.ini [PREFIX/lib]  --with-config-file-scan-dir=PATH                          Set the path where to scan for configuration files  --enable-sigchild       Enable PHP&#39;s own SIGCHLD handler  --enable-libgcc         Enable explicitly linking against libgcc  --disable-short-tags    Disable the short-form &lt;? start tag by default  --enable-dmalloc        Enable dmalloc  --disable-ipv6          Disable IPv6 support  --enable-dtrace         Enable DTrace support  --enable-fd-setsize     Set size of descriptor setsExtensions:  --with-EXTENSION=shared[,PATH]    NOTE: Not all extensions can be build as &#39;shared&#39;.    Example: --with-foobar=shared,/usr/local/foobar/      o Builds the foobar extension as shared extension.      o foobar package install prefix is /usr/local/foobar/  --disable-all           Disable all extensions which are enabled by default  --disable-libxml        Disable LIBXML support  --with-libxml-dir=DIR   LIBXML: libxml2 install prefix  --with-openssl=DIR      Include OpenSSL support (requires OpenSSL &gt;= 1.0.1)  --with-kerberos=DIR     OPENSSL: Include Kerberos support  --with-system-ciphers   OPENSSL: Use system default cipher list instead of hardcoded value  --with-pcre-regex=DIR   Include Perl Compatible Regular Expressions support.                          DIR is the PCRE install prefix BUNDLED  --with-pcre-jit         Enable PCRE JIT functionality (BUNDLED only)  --with-pcre-valgrind=DIR                          Enable PCRE valgrind support. Developers only!  --without-sqlite3=DIR   Do not include SQLite3 support. DIR is the prefix to                          SQLite3 installation directory.  --with-zlib=DIR         Include ZLIB support (requires zlib &gt;= 1.2.0.4)  --with-zlib-dir=&lt;DIR&gt;   Define the location of zlib install directory  --enable-bcmath         Enable bc style precision math functions  --with-bz2=DIR          Include BZip2 support  --enable-calendar       Enable support for calendar conversion  --disable-ctype         Disable ctype functions  --with-curl=DIR         Include cURL support  --enable-dba            Build DBA with bundled modules. To build shared DBA                          extension use --enable-dba=shared  --with-qdbm=DIR         DBA: QDBM support  --with-gdbm=DIR         DBA: GDBM support  --with-ndbm=DIR         DBA: NDBM support  --with-db4=DIR          DBA: Oracle Berkeley DB 4.x or 5.x support  --with-db3=DIR          DBA: Oracle Berkeley DB 3.x support  --with-db2=DIR          DBA: Oracle Berkeley DB 2.x support  --with-db1=DIR          DBA: Oracle Berkeley DB 1.x support/emulation  --with-dbm=DIR          DBA: DBM support  --with-tcadb=DIR        DBA: Tokyo Cabinet abstract DB support  --with-lmdb=DIR        DBA: Lightning memory-mapped database support  --without-cdb=DIR       DBA: CDB support (bundled)  --disable-inifile       DBA: INI support (bundled)  --disable-flatfile      DBA: FlatFile support (bundled)  --disable-dom           Disable DOM support  --with-libxml-dir=DIR   DOM: libxml2 install prefix  --with-enchant=DIR      Include enchant support.                          GNU Aspell version 1.1.3 or higher required.  --enable-exif           Enable EXIF (metadata from images) support  --disable-fileinfo      Disable fileinfo support  --disable-filter        Disable input filter support  --with-pcre-dir         FILTER: pcre install prefix  --enable-ftp            Enable FTP support  --with-openssl-dir=DIR  FTP: openssl install prefix  --with-gd=DIR           Include GD support.  DIR is the GD library base                          install directory BUNDLED  --with-webp-dir=DIR      GD: Set the path to libwebp install prefix  --with-jpeg-dir=DIR     GD: Set the path to libjpeg install prefix  --with-png-dir=DIR      GD: Set the path to libpng install prefix  --with-zlib-dir=DIR     GD: Set the path to libz install prefix  --with-xpm-dir=DIR      GD: Set the path to libXpm install prefix  --with-freetype-dir=DIR GD: Set the path to FreeType 2 install prefix  --enable-gd-jis-conv    GD: Enable JIS-mapped Japanese font support  --with-gettext=DIR      Include GNU gettext support  --with-gmp=DIR          Include GNU MP support  --with-mhash=DIR        Include mhash support  --disable-hash          Disable hash support  --without-iconv=DIR     Exclude iconv support  --with-imap=DIR         Include IMAP support. DIR is the c-client install prefix  --with-kerberos=DIR     IMAP: Include Kerberos support. DIR is the Kerberos install prefix  --with-imap-ssl=DIR     IMAP: Include SSL support. DIR is the OpenSSL install prefix  --with-interbase=DIR    Include Firebird support.  DIR is the Firebird base                          install directory /opt/firebird  --enable-intl           Enable internationalization support  --with-icu-dir=DIR      Specify where ICU libraries and headers can be found  --disable-json          Disable JavaScript Object Serialization support  --with-ldap=DIR         Include LDAP support  --with-ldap-sasl=DIR    LDAP: Include Cyrus SASL support  --enable-mbstring       Enable multibyte string support  --disable-mbregex       MBSTRING: Disable multibyte regex support  --disable-mbregex-backtrack                          MBSTRING: Disable multibyte regex backtrack check  --with-libmbfl=DIR      MBSTRING: Use external libmbfl.  DIR is the libmbfl base                          install directory BUNDLED  --with-onig=DIR         MBSTRING: Use external oniguruma. DIR is the oniguruma install prefix.                          If DIR is not set, the bundled oniguruma will be used  --with-mysqli=FILE      Include MySQLi support.  FILE is the path                          to mysql_config.  If no value or mysqlnd is passed                          as FILE, the MySQL native driver will be used  --enable-embedded-mysqli                          MYSQLi: Enable embedded support                          Note: Does not work with MySQL native driver!  --with-mysql-sock=SOCKPATH                          MySQLi/PDO_MYSQL: Location of the MySQL unix socket pointer.                          If unspecified, the default locations are searched  --with-oci8=DIR         Include Oracle Database OCI8 support. DIR defaults to $ORACLE_HOME.                          Use --with-oci8=instantclient,/path/to/instant/client/lib                          to use an Oracle Instant Client installation  --with-odbcver=HEX      Force support for the passed ODBC version. A hex number is expected, default 0x0350.                             Use the special value of 0 to prevent an explicit ODBCVER to be defined.  --with-adabas=DIR       Include Adabas D support /usr/local  --with-sapdb=DIR        Include SAP DB support /usr/local  --with-solid=DIR        Include Solid support /usr/local/solid  --with-ibm-db2=DIR      Include IBM DB2 support /home/db2inst1/sqllib  --with-ODBCRouter=DIR   Include ODBCRouter.com support /usr  --with-empress=DIR      Include Empress support \$EMPRESSPATH                          (Empress Version &gt;= 8.60 required)  --with-empress-bcs=DIR                          Include Empress Local Access support \$EMPRESSPATH                          (Empress Version &gt;= 8.60 required)  --with-birdstep=DIR     Include Birdstep support /usr/local/birdstep  --with-custom-odbc=DIR  Include user defined ODBC support. DIR is ODBC install base                          directory /usr/local. Make sure to define CUSTOM_ODBC_LIBS and                          have some odbc.h in your include dirs. f.e. you should define                          following for Sybase SQL Anywhere 5.5.00 on QNX, prior to                          running this configure script:                            CPPFLAGS=\&quot;-DODBC_QNX -DSQLANY_BUG\&quot;                            LDFLAGS=-lunix                            CUSTOM_ODBC_LIBS=\&quot;-ldblib -lodbc\&quot;  --with-iodbc=DIR        Include iODBC support /usr/local  --with-esoob=DIR        Include Easysoft OOB support /usr/local/easysoft/oob/client  --with-unixODBC=DIR     Include unixODBC support /usr/local  --with-dbmaker=DIR      Include DBMaker support  --disable-opcache       Disable Zend OPcache support  --disable-opcache-file  Disable file based caching  --disable-huge-code-pages                          Disable copying PHP CODE pages into HUGE PAGES  --enable-pcntl          Enable pcntl support (CLI/CGI only)  --disable-pdo           Disable PHP Data Objects support  --with-pdo-dblib=DIR    PDO: DBLIB-DB support.  DIR is the FreeTDS home directory  --with-pdo-firebird=DIR PDO: Firebird support.  DIR is the Firebird base                          install directory /opt/firebird  --with-pdo-mysql=DIR    PDO: MySQL support. DIR is the MySQL base directory                          If no value or mysqlnd is passed as DIR, the                          MySQL native driver will be used  --with-zlib-dir=DIR     PDO_MySQL: Set the path to libz install prefix  --with-pdo-oci=DIR      PDO: Oracle OCI support. DIR defaults to $ORACLE_HOME.                          Use --with-pdo-oci=instantclient,/path/to/instant/client/lib                          for an Oracle Instant Client installation.  --with-pdo-odbc=flavour,dir                          PDO: Support for &#39;flavour&#39; ODBC driver.              include and lib dirs are looked for under &#39;dir&#39;.              &#39;flavour&#39; can be one of:  ibm-db2, iODBC, unixODBC, generic              If &#39;,dir&#39; part is omitted, default for the flavour              you have selected will be used. e.g.:                --with-pdo-odbc=unixODBC              will check for unixODBC under /usr/local. You may attempt              to use an otherwise unsupported driver using the \&quot;generic\&quot;              flavour.  The syntax for generic ODBC support is:                --with-pdo-odbc=generic,dir,libname,ldflags,cflags              When built as &#39;shared&#39; the extension filename is always pdo_odbc.so  --with-pdo-pgsql=DIR    PDO: PostgreSQL support.  DIR is the PostgreSQL base                          install directory or the path to pg_config  --without-pdo-sqlite=DIR                          PDO: sqlite 3 support.  DIR is the sqlite base                          install directory BUNDLED  --with-pgsql=DIR        Include PostgreSQL support.  DIR is the PostgreSQL                          base install directory or the path to pg_config  --disable-phar          Disable phar support  --disable-posix         Disable POSIX-like functions  --with-pspell=DIR       Include PSPELL support.                          GNU Aspell version 0.50.0 or higher required  --with-libedit=DIR      Include libedit readline replacement (CLI/CGI only)  --with-readline=DIR     Include readline support (CLI/CGI only)  --with-recode=DIR       Include recode support  --disable-session       Disable session support  --with-mm=DIR           SESSION: Include mm support for session storage  --enable-shmop          Enable shmop support  --disable-simplexml     Disable SimpleXML support  --with-libxml-dir=DIR   SimpleXML: libxml2 install prefix  --with-snmp=DIR         Include SNMP support  --with-openssl-dir=DIR  SNMP: openssl install prefix  --enable-soap           Enable SOAP support  --with-libxml-dir=DIR   SOAP: libxml2 install prefix  --enable-sockets        Enable sockets support  --with-sodium=DIR     Include sodium support  --with-password-argon2=DIR           Include Argon2 support in password_*. DIR is the Argon2 shared library path]  --enable-sysvmsg        Enable sysvmsg support  --enable-sysvsem        Enable System V semaphore support  --enable-sysvshm        Enable the System V shared memory support  --with-tidy=DIR         Include TIDY support  --disable-tokenizer     Disable tokenizer support  --enable-wddx           Enable WDDX support  --with-libxml-dir=DIR   WDDX: libxml2 install prefix  --with-libexpat-dir=DIR WDDX: libexpat dir for XMLRPC-EPI (deprecated)  --disable-xml           Disable XML support  --with-libxml-dir=DIR   XML: libxml2 install prefix  --with-libexpat-dir=DIR XML: libexpat install prefix (deprecated)  --disable-xmlreader     Disable XMLReader support  --with-libxml-dir=DIR   XMLReader: libxml2 install prefix  --with-xmlrpc=DIR       Include XMLRPC-EPI support  --with-libxml-dir=DIR   XMLRPC-EPI: libxml2 install prefix  --with-libexpat-dir=DIR XMLRPC-EPI: libexpat dir for XMLRPC-EPI (deprecated)  --with-iconv-dir=DIR    XMLRPC-EPI: iconv dir for XMLRPC-EPI  --disable-xmlwriter     Disable XMLWriter support  --with-libxml-dir=DIR   XMLWriter: libxml2 install prefix  --with-xsl=DIR          Include XSL support.  DIR is the libxslt base                          install directory (libxslt &gt;= 1.1.0 required)  --enable-zend-test           Enable zend-test extension  --enable-zip            Include Zip read/write support  --with-zlib-dir=DIR     ZIP: Set the path to libz install prefix  --with-pcre-dir         ZIP: pcre install prefix  --with-libzip=DIR       ZIP: use libzip  --enable-mysqlnd        Enable mysqlnd explicitly, will be done implicitly                          when required by other extensions  --disable-mysqlnd-compression-support                          Disable support for the MySQL compressed protocol in mysqlnd  --with-zlib-dir=DIR     mysqlnd: Set the path to libz install prefixPEAR:  --with-pear=DIR         Install PEAR in DIR [PREFIX/lib/php]  --without-pear          Do not install PEARZend:  --enable-maintainer-zts Enable thread safety - for code maintainers only!!  --disable-inline-optimization                          If building zend_execute.lo fails, try this switch  --disable-zend-signals  whether to enable zend signal handlingTSRM:  --with-tsrm-pth=pth-config                          Use GNU Pth  --with-tsrm-st          Use SGI&#39;s State Threads  --with-tsrm-pthreads    Use POSIX threads (default)Libtool:  --enable-shared=PKGS    Build shared libraries default=yes  --enable-static=PKGS    Build static libraries default=yes  --enable-fast-install=PKGS                          Optimize for fast installation default=yes  --with-gnu-ld           Assume the C compiler uses GNU ld default=no  --disable-libtool-lock  Avoid locking (might break parallel builds)  --with-pic              Try to use only PIC/non-PIC objects default=use both  --with-tags=TAGS        Include additional configurations automaticSome influential environment variables:  CC          C compiler command  CFLAGS      C compiler flags  LDFLAGS     linker flags, e.g. -L&lt;lib dir&gt; if you have libraries in a              nonstandard directory &lt;lib dir&gt;  LIBS        libraries to pass to the linker, e.g. -l&lt;library&gt;  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I&lt;include dir&gt; if              you have headers in a nonstandard directory &lt;include dir&gt;  CPP         C preprocessor  YACC        The `Yet Another Compiler Compiler&#39; implementation to use.              Defaults to the first program found out of: `bison -y&#39;, `byacc&#39;,              `yacc&#39;.  YFLAGS      The list of arguments that will be passed by default to $YACC.              This script will default YFLAGS to the empty string to avoid a              default value of `-d&#39; given by some make applications.  CXX         C++ compiler command  CXXFLAGS    C++ compiler flags  CXXCPP      C++ preprocessorUse these variables to override the choices made by `configure&#39; or to helpit to find libraries and programs with nonstandard names/locations.</code></pre><h2 id="默认拓展"><a href="#默认拓展" class="headerlink" title="默认拓展"></a>默认拓展</h2><p>当不配置任何参数时，它默认会有哪些拓展呢？</p><pre><code>php -m</code></pre><pre><code>[PHP Modules]CorectypedatedomfileinfofilterhashiconvjsonlibxmlpcrePDOpdo_sqlitePharposixReflectionsessionSimpleXMLSPLsqlite3standardtokenizerxmlxmlreaderxmlwriter[Zend Modules]</code></pre><p>此时你会发现连<code>php-fpm</code>都没有</p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><pre><code>yum install -y libxml2-devel openssl-devel</code></pre><pre><code>./configure --enable-fpm  --enable-bcmath  --with-openssl \--enable-mbstring --with-mysqli --enable-mysqlnd</code></pre><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><pre><code>make &amp;&amp; make install</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="查看ini配置"><a href="#查看ini配置" class="headerlink" title="查看ini配置"></a>查看ini配置</h3><pre><code>php -ini | grep &#39;ini&#39;</code></pre><pre><code>Configuration File (php.ini) Path =&gt; /usr/local/libLoaded Configuration File =&gt; /usr/local/lib/php.iniScan this dir for additional .ini files =&gt; (none)Additional .ini files parsed =&gt; (none)user_ini.cache_ttl =&gt; 300 =&gt; 300user_ini.filename =&gt; .user.ini =&gt; .user.iniinit_command_executed_count =&gt; 0init_command_failed_count =&gt; 0com_init_db =&gt; 0</code></pre><p>从源代码目录 复制配置文件到<code>Configuration File (php.ini) Path</code></p><pre><code>cp php.ini-production /usr/local/lib/php.ini</code></pre><h2 id="设置服务-amp-开机启动-centos-7"><a href="#设置服务-amp-开机启动-centos-7" class="headerlink" title="设置服务&amp;开机启动(centos 7+)"></a>设置服务&amp;开机启动(centos 7+)</h2><p>服务服务脚本到systemd</p><pre><code>cp sapi/fpm/php-fpm.service /etc/systemd/system/</code></pre><p>查看启动脚本</p><pre><code>cat sapi/fpm/php-fpm.service</code></pre><p>结果</p><pre><code># It&#39;s not recommended to modify this file in-place, because it# will be overwritten during upgrades.  If you want to customize,# the best way is to use the &quot;systemctl edit&quot; command.[Unit]Description=The PHP FastCGI Process ManagerAfter=network.target[Service]Type=simplePIDFile=/usr/local/var/run/php-fpm.pidExecStart=/usr/local/sbin/php-fpm --nodaemonize --fpm-config /usr/local/etc/php-fpm.confExecReload=/bin/kill -USR2 $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>cp sapi/fpm/php-fpm.conf /usr/local/etc/php-fpm.conf</code></pre><p>修改php-fpm.conf 相应配置使得PIDFile文件位置与php-fpm.service配置的一致。并复制<a href="http://www.conf到对应目录">www.conf到对应目录</a></p><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><pre><code>systemctl daemon-reloadsystemctl start php-fpm.servicesystemctl status php-fpm.servicesystemctl enable php-fpm.service</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>supervisor使用</title>
      <link href="2020/09/02/supervisor%E4%BD%BF%E7%94%A8/"/>
      <url>2020/09/02/supervisor%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>作为一款进程管理工具，supervisor普遍用来管理应用的守护进程</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>常规安装的方式有两种,pip安装或发行版安装</p><p>以centos 8为pip安装方式为例。</p><h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><pre><code class="shell">pip install supervisor</code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code>echo_supervisord_conf &gt; /etc/supervisord.conf</code></pre><p>生成配置文件</p><h3 id="配置systemd服务"><a href="#配置systemd服务" class="headerlink" title="配置systemd服务"></a>配置systemd服务</h3><p>如果是发行版安装，默认会配置好开机启动服务。如果非发行版安装，可以手动配置。</p><p>There are user-contributed scripts for various operating systems at: <a href="https://github.com/Supervisor/initscripts">https://github.com/Supervisor/initscripts</a></p><p>注意，事实上github上的脚本有点问题，与实际安装的目录位置不匹配。稍作修改</p><pre><code class="ini"># supervisord service for systemd (CentOS 7.0+)# by ET-CS (https://github.com/ET-CS)[Unit]Description=Supervisor daemon[Service]Type=forkingExecStart=/usr/local/bin/supervisordExecStop=/usr/local/bin/supervisorctl $OPTIONS shutdownExecReload=/usr/local/bin/supervisorctl $OPTIONS reloadKillMode=processRestart=on-failureRestartSec=42s[Install]WantedBy=multi-user.target</code></pre><p>将此文件为保存为 <code>vim /etc/systemd/system/supervisord.service</code></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>重新读取所有服务项</p><pre><code>systemctl daemon-reload</code></pre><p>启动服务</p><pre><code>systemctl start supervisord.service</code></pre><p>开机启动</p><pre><code>systemctl enable supervisord.service</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h3 id="启用子配置目录"><a href="#启用子配置目录" class="headerlink" title="启用子配置目录"></a>启用子配置目录</h3><p><code>vim /etc/supervisord.conf</code><br>最后2行打开注释并编辑为</p><pre><code>[include]files = ./supervisord.d/*.ini</code></pre><p>重启</p><pre><code>systemctl reload supervisord.service# 或者supervisorctl reload</code></pre><h3 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h3><p><code>vim /etc/supervisord.d/glances.ini</code></p><pre><code class="ini">[program:glances]command=glances --export influxdb -qprocess_name=%(program_name)snumprocs=1directory=/tmpumask=022priority=999autostart=trueautorestart=unexpectedstartsecs=10startretries=3exitcodes=0stopsignal=TERMstopwaitsecs=10stopasgroup=falsekillasgroup=falseuser=rootredirect_stderr=falsestdout_logfile=/var/log/glances/glances-out.logstdout_logfile_maxbytes=1MBstdout_logfile_backups=10stdout_capture_maxbytes=1MBstdout_events_enabled=falsestderr_logfile=/var/log/glances/glances-err.logstderr_logfile_maxbytes=1MBstderr_logfile_backups=10stderr_capture_maxbytes=1MB</code></pre><p>注意先建好目录 <code>/var/log/glances</code></p><h3 id="重新读取配置并启用"><a href="#重新读取配置并启用" class="headerlink" title="重新读取配置并启用"></a>重新读取配置并启用</h3><pre><code>supervisorctl reloadsupervisorctl start glances</code></pre><h3 id="可查看运行状态"><a href="#可查看运行状态" class="headerlink" title="可查看运行状态"></a>可查看运行状态</h3><pre><code>supervisorctl status</code></pre><p>结果</p><pre><code>glances                          RUNNING   pid 46026, uptime 0:05:05</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql字符集问题</title>
      <link href="2020/09/01/mysql%E5%AD%97%E7%AC%A6%E9%9B%86%E9%97%AE%E9%A2%98/"/>
      <url>2020/09/01/mysql%E5%AD%97%E7%AC%A6%E9%9B%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>现代产品和国际化产品建议都使用utf8mb4字符集，表情已无处不在🤖🦖。人生苦短建议mb4.</p><span id="more"></span><p>mysql 可以设置数据库级别，表级别，列级别 字符集编码；控制粒度依次细化，也就是如果都设置了，列级别优先级最高。</p><p>定义数据表结构时建议不要定义列的字符集，以免将来修改变得麻烦。</p><h2 id="修改表的字符集"><a href="#修改表的字符集" class="headerlink" title="修改表的字符集"></a>修改表的字符集</h2><h3 id="修改表的字符集-并刷新之前已存在的数据"><a href="#修改表的字符集-并刷新之前已存在的数据" class="headerlink" title="修改表的字符集 并刷新之前已存在的数据"></a>修改表的字符集 并刷新之前已存在的数据</h3><pre><code>ALTER table table_name CONVERT to CHARACTER set  新的字符集; </code></pre><h3 id="修改表的字符集，但不对之前已存在的数据刷新"><a href="#修改表的字符集，但不对之前已存在的数据刷新" class="headerlink" title="修改表的字符集，但不对之前已存在的数据刷新"></a>修改表的字符集，但不对之前已存在的数据刷新</h3><pre><code>ALTER table table_name DEFAULT to CHARACTER set  新的字符集; </code></pre><h2 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a>批量修改</h2><pre><code class="sql">SELECT    CONCAT(        &#39;ALTER TABLE &#39;,        TABLE_NAME,        &#39; CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;&#39;    )FROM    information_schema.`TABLES`WHERE    TABLE_SCHEMA = &#39;DATABASE_NAME&#39;;</code></pre><p>得到修改语句，复制出执行语句，进行执行。如果数据库数据较多，将会比较耗时。</p><p>如果只是修改默认字符集不修改数据。</p><pre><code class="sql">SELECT    CONCAT(        &#39;ALTER TABLE &#39;,        TABLE_NAME,        &#39; DEFAULT  CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;&#39;    )FROM    information_schema.`TABLES`WHERE    TABLE_SCHEMA = &#39;DATABASE_NAME&#39;;</code></pre><p>这样执行应该较为安全，也满足一般需求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用openjdk 11</title>
      <link href="2020/08/27/mac%E4%B8%8B%E4%BD%BF%E7%94%A8openjdk-11/"/>
      <url>2020/08/27/mac%E4%B8%8B%E4%BD%BF%E7%94%A8openjdk-11/</url>
      
        <content type="html"><![CDATA[<p>最近似乎java 8以上的版本都不能从oracle官网下载了，于是就尝试使用open jdk11</p><p><img src="http://img.rc5j.cn/blog20200827114344.png" alt=""></p><span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>可以从 <a href="https://mirrors.huaweicloud.com/openjdk/">https://mirrors.huaweicloud.com/openjdk/</a> 下载得到</p><h2 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h2><pre><code>sudo mv /Downloads/jdk11 /Library/Java/JavaVirtualMachines/jdk-11.jdk</code></pre><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>配置bash_profile</p><p><code>vim ~/.bash_profile</code></p><pre><code>JAVA_HOME=&quot;/usr/local/jdk-11.0.2&quot;PATH=$PATH:$HOME/bin:$JAVA_HOME/binexport PATH</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glances+influxdb+granfana打造服务器监控系统</title>
      <link href="2020/08/25/glances-influxdb-granfana%E6%89%93%E9%80%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/08/25/glances-influxdb-granfana%E6%89%93%E9%80%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210430141234.png" alt=""></p><p>服务监控就是你的眼睛，当你对服务器运行状况一无所知时，你应该感到坐立不安。</p><span id="more"></span><h2 id="glances安装"><a href="#glances安装" class="headerlink" title="glances安装"></a>glances安装</h2><p>glances是由python编写的，因此可以使用pip直接安装</p><pre><code>pip3 install glances</code></pre><h2 id="influxdb安装"><a href="#influxdb安装" class="headerlink" title="influxdb安装"></a>influxdb安装</h2><pre><code>wget https://dl.influxdata.com/influxdb/releases/influxdb-1.8.2.x86_64.rpmsudo yum localinstall influxdb-1.8.2.x86_64.rpm</code></pre><h2 id="收集数据到influxdb"><a href="#收集数据到influxdb" class="headerlink" title="收集数据到influxdb"></a>收集数据到influxdb</h2><p>配置 glances</p><p><code>vim /etc/glances/glances.conf</code></p><pre><code class="ini">[influxdb]# Configuration for the --export influxdb option# https://influxdb.com/host=localhostport=8086user=rootpassword=rootdb=glancesprefix=localhost#tags=foo:bar,spam:eggs</code></pre><pre><code>pip3 install influxdbglances --export influxdb</code></pre><p>执行 <code>glances --export influxdb</code> 测试下，报错</p><p><code>InfluxDB database &#39;glances&#39; did not exist. Please create it</code>需要新建数据库。</p><p>执行shell <code>influx</code></p><pre><code>CREATE DATABASE glances  #创建数据SHOW DATABASES   # 查看数据库</code></pre><p>再次执行<code>glances --export influxdb</code> ,可显示如下代表目前一切正常</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210430141339.png" alt=""></p><h2 id="granfana安装"><a href="#granfana安装" class="headerlink" title="granfana安装"></a>granfana安装</h2><pre><code>wget https://dl.grafana.com/oss/release/grafana-7.1.5-1.x86_64.rpmsudo yum install grafana-7.1.5-1.x86_64.rpm</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code class="shell">systemctl daemon-reloadsystemctl start grafana-serversystemctl status grafana-serversystemctl enable grafana-server.service</code></pre><h3 id="docker-granfana安装"><a href="#docker-granfana安装" class="headerlink" title="docker-granfana安装"></a>docker-granfana安装</h3><pre><code class="yml"># docker-compose.ymlversion: &quot;3.1&quot;services:  grafana:    image: grafana/grafana:5.1.0    ports:      - 3001:3000    environment:        - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/granfa_admin_pwd # 5.2.0之后才可用</code></pre><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><pre><code class="conf"> server &#123;        listen       80;        server_name  grafana-dev.domain.cn;        #charset koi8-r;        location / &#123;           proxy_pass  http://127.0.0.1:3001;           proxy_http_version 1.1;           proxy_set_header Upgrade $http_upgrade;           proxy_set_header Connection &quot;upgrade&quot;;        &#125;&#125;</code></pre><p>就可以在web上进行访问,初始的账号密码都是<code>admin</code></p><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210430141408.png" alt=""></p><p>docker安装情况应注意docker容器ip 和宿主机ip</p><pre><code class="shell">docker network ls # 查看docker网络docker network inspect $networkid # 查看具体网络信息</code></pre><p>在配置<code>influxdb</code> 数据源时，如果你是用<code>docker</code>安装，需要保持<code>granfana</code>和<code>influxdb</code>是在同一个网段</p><p>grafana 还支持zipkin</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210430141436.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuetifyjs图标解决方案</title>
      <link href="2020/08/24/web/vuetifyjs%E5%9B%BE%E6%A0%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/08/24/web/vuetifyjs%E5%9B%BE%E6%A0%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200824102537.png" alt=""></p><p>vuetifyjs官方提供的方法实际运用当中似乎会存在一些兼容问题，比如使用Font Awesome时有些图标就不会正常显示。</p><span id="more"></span><h2 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h2><pre><code class="html">    &lt;!-- 官方 --&gt;    &lt;v-icon&gt;fas fa-php&lt;/v-icon&gt;    &lt;!-- 替代 --&gt;    &lt;i class=&quot;fab fa-php v-icon&quot;&gt;&lt;/i&gt;</code></pre><p>有些图标不显示的问题可以使用上述方法替代解决</p><h2 id="使用阿里巴巴字体"><a href="#使用阿里巴巴字体" class="headerlink" title="使用阿里巴巴字体"></a>使用阿里巴巴字体</h2><p>阿里巴巴字体非常多非常庞大，基本想要的都有，而国外的很多不能用。所以可以使用阿里巴巴字体替代。</p><p>第一步：拷贝项目下面生成的fontclass代码：</p><p>可以在public/index.html 下用 link 标签引入</p><p>//at.alicdn.com/t/font_8d5l8fzk5b87iudi.css</p><p>第二步：挑选相应图标并获取类名，应用于页面：</p><pre><code class="html">&lt;i class=&quot;iconfont icon-xxx&quot;&gt;&lt;/i&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gunicorn+flask_rest构建部署轻量级api服务</title>
      <link href="2020/08/20/python/gunicorn-flask-rest%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2%E8%BD%BB%E9%87%8F%E7%BA%A7api%E6%9C%8D%E5%8A%A1/"/>
      <url>2020/08/20/python/gunicorn-flask-rest%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2%E8%BD%BB%E9%87%8F%E7%BA%A7api%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200820155306.png" alt=""></p><span id="more"></span><h2 id="flask-结构"><a href="#flask-结构" class="headerlink" title="flask 结构"></a>flask 结构</h2><p>首先简单看看 flask_rest的目录结构。</p><p><img src="http://img.rc5j.cn/blog20200820155423.png" alt=""></p><h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><pre><code class="python">#app.pyfrom flask import Flaskfrom flask_restful import Resource, Apifrom resources.bd import Index,Formatfrom flask_cors import CORS# from common import configapp = Flask(__name__)CORS(app)api = Api(app)api.add_resource(Format, &#39;/bd/format&#39;)# if __name__ == &#39;__main__&#39;:#     app.run(debug=True)</code></pre><p>如果使用gunicorn启动，则注释掉app.run</p><h2 id="gunicorn启动配置"><a href="#gunicorn启动配置" class="headerlink" title="gunicorn启动配置"></a>gunicorn启动配置</h2><pre><code class="python"># config.pyimport osimport gevent.monkeygevent.monkey.patch_all()import multiprocessingdebug = Trueloglevel = &#39;debug&#39;bind = &quot;0.0.0.0:5000&quot;pidfile = &quot;logs/gunicorn.pid&quot;accesslog = &quot;logs/access.log&quot;errorlog = &quot;logs/debug.log&quot;daemon = True# 启动的进程数workers = multiprocessing.cpu_count()worker_class = &#39;gevent&#39;x_forwarded_for_header = &#39;X-FORWARDED-FOR&#39;</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code class="shell">python3 -m venv webpjsource webpj/bin/activatepip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.compip install xlrd -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.compip install openpyxl -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.comgunicorn -c config.py app:app</code></pre><h2 id="平滑重启"><a href="#平滑重启" class="headerlink" title="平滑重启"></a>平滑重启</h2><pre><code class="shell">cat logs/gunicorn.pid | xargs kill -HUP</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据快速处理</title>
      <link href="2020/07/31/pandas%E6%95%B0%E6%8D%AE%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/"/>
      <url>2020/07/31/pandas%E6%95%B0%E6%8D%AE%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200731122918.png" alt=""></p><p>销售同事拿到一份数据，但是数据导出列是json,我顺手就帮他处理了下。不得不说 pandas在处理这类问题还是非常效率高的.</p><span id="more"></span><pre><code class="python">import pandasimport jsondata = pandas.read_excel(&#39;data.xlsx&#39;)address = data[&#39;address&#39;].values.tolist()ordertime_list = data[&#39;order_datetime&#39;].values.tolist()address_new_list = []for ad in address:    addressJson = json.loads(ad)    address_new_list.append(addressJson[0])for ad in address_new_list:    for t in ordertime_list:        ad[&#39;order_time&#39;] = tdf = pandas.DataFrame.from_records(address_new_list)df.to_excel(&#39;new_data.xlsx&#39;)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php生态之性能分析</title>
      <link href="2020/07/23/php%E7%94%9F%E6%80%81%E4%B9%8B%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
      <url>2020/07/23/php%E7%94%9F%E6%80%81%E4%B9%8B%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200724153643.png" alt=""></p><p>一般情况下我们并不会太关注PHP的执行效率，因为一般而言他都表现正常满足需求。但当真正遇到问题的时候，我们需要有分析性能在哪丢失的能力。</p><span id="more"></span><p><code>xhprof</code>正是这样的工具。但是由于年久失修，目前已经不支持PHP7 .</p><p><img src="http://img.rc5j.cn/blog20200724154122.png" alt=""></p><p>不过，好在还有非官方商业组织开源了PHP7版本,<code>tideways-xhprof</code>。</p><p><img src="http://img.rc5j.cn/blog20200724154306.gif" alt=""></p><p>官网  <a href="https://tideways.com/profiler/xhprof-for-php7">https://tideways.com/profiler/xhprof-for-php7</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code class="shell">git clone &quot;https://github.com/tideways/php-xhprof-extension.git&quot;cd php-xhprof-extensionphpize./configuremakesudo make install</code></pre><p>配置好ini，重启查看下php -m</p><h2 id="图形化"><a href="#图形化" class="headerlink" title="图形化"></a>图形化</h2><p><code>tideways-xhprof</code> 可以将分析出方法调用、方法调用过程和性能消耗数据。</p><p><code>tideways-xhprof</code> 本身还提供商业化服务，有着比较好的体验。不过也同时有开源的图形化工具。比较好的是<code>xhgui</code>和他配套的是<code>perftools/php-profiler</code>.看了下作者，还是<code>markstory</code>，cakephp的作者，几年前使用cakephp的时候，还有过交流。</p><h2 id="xgui安装"><a href="#xgui安装" class="headerlink" title="xgui安装"></a>xgui安装</h2><p>可以选择源码部署，也可以选择docker部署。方便点选择使用docker。</p><ol><li><p>Clone or download xhgui from GitHub.</p></li><li><p>Startup the containers: docker-compose up -d</p></li><li><p>Open your browser at <a href="http://xhgui.127.0.0.1.xip.io:8142">http://xhgui.127.0.0.1.xip.io:8142</a> or just <a href="http://localhost:8142">http://localhost:8142</a></p></li></ol><h2 id="php-profiler使用"><a href="#php-profiler使用" class="headerlink" title="php-profiler使用"></a>php-profiler使用</h2><p>官方github上写几种接入方式，我推荐用注册shutdown方式，正在对项目代码无入侵。保存过程在shutdown之后。</p><pre><code class="PHP"> $profiler = new \Xhgui\Profiler\Profiler($config);    // The profiler itself checks whether it should be enabled    // for request (executes lambda function from config)$profiler-&gt;enable();    // shutdown handler collects and stores the data.$profiler-&gt;registerShutdownHandler();</code></pre><p>上面的<code>$config</code>，在使用非文件存储的时候要注意不要安装官方配置来，官方配置目前存在一点问题，新配置会不生效。我看了源码，并且提交了PR。</p><pre><code class="PHP">//    &#39;db.host&#39; =&gt; &#39;mongodb://127.0.0.1:27018&#39;,//    &#39;db.db&#39; =&gt; &#39;xhprof&#39;,    &#39;save.handler.mongodb&#39; =&gt; array(        &#39;dsn&#39; =&gt; &#39;mongodb://127.0.0.1:27018&#39;,        &#39;database&#39; =&gt; &#39;xhprof&#39;,        // Allows you to pass additional options like replicaSet to MongoClient.        // &#39;username&#39;, &#39;password&#39; and &#39;db&#39; (where the user is added)        &#39;options&#39; =&gt; array(),    ),</code></pre><p>注释部分才有效.</p><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><pre><code class="PHP">&lt;?php/** * Default configuration for Xhgui */$mongoUri = getenv(&#39;XHGUI_MONGO_URI&#39;) ?: &#39;127.0.0.1:27017&#39;;$mongoUri = str_replace(&#39;mongodb://&#39;, &#39;&#39;, $mongoUri);$mongoDb = getenv(&#39;XHGUI_MONGO_DB&#39;) ?: &#39;xhprof&#39;;return array(    &#39;debug&#39; =&gt; false,    &#39;mode&#39; =&gt; &#39;development&#39;,    // Can be mongodb, file or upload.    // For file    //    //&#39;save.handler&#39; =&gt; &#39;file&#39;,    //&#39;save.handler.filename&#39; =&gt; dirname(__DIR__) . &#39;/cache/&#39; . &#39;xhgui.data.&#39; . microtime(true) . &#39;_&#39; . substr(md5($url), 0, 6),    // For upload    //    // Saving profile data by upload is only recommended with HTTPS    // endpoints that have IP whitelists applied.    //    // The timeout option is in seconds and defaults to 3 if unspecified.    //    //&#39;save.handler&#39; =&gt; &#39;upload&#39;,    //&#39;save.handler.upload.uri&#39; =&gt; &#39;https://example.com/run/import&#39;,    //&#39;save.handler.upload.timeout&#39; =&gt; 3,    // For MongoDB    &#39;save.handler&#39; =&gt; &#39;mongodb&#39;,    &#39;db.host&#39; =&gt; sprintf(&#39;mongodb://%s&#39;, $mongoUri),    &#39;db.db&#39; =&gt; $mongoDb,    &#39;pdo&#39; =&gt; array(        &#39;dsn&#39; =&gt; &#39;sqlite:/tmp/xhgui.sqlite3&#39;,        &#39;user&#39; =&gt; null,        &#39;pass&#39; =&gt; null,        &#39;table&#39; =&gt; &#39;results&#39;    ),    // Allows you to pass additional options like replicaSet to MongoClient.    // &#39;username&#39;, &#39;password&#39; and &#39;db&#39; (where the user is added)    &#39;db.options&#39; =&gt; array(),    &#39;templates.path&#39; =&gt; dirname(__DIR__) . &#39;/src/templates&#39;,    &#39;date.format&#39; =&gt; &#39;M jS H:i:s&#39;,    &#39;detail.count&#39; =&gt; 6,    &#39;page.limit&#39; =&gt; 25,    // call fastcgi_finish_request() in shutdown handler    &#39;fastcgi_finish_request&#39; =&gt; true,    // Profile x in 100 requests. (E.g. set XHGUI_PROFLING_RATIO=50 to profile 50% of requests)    // You can return true to profile every request.    &#39;profiler.enable&#39; =&gt; function() &#123;        $ratio = getenv(&#39;XHGUI_PROFILING_RATIO&#39;) ?: 100;        return (getenv(&#39;XHGUI_PROFILING&#39;) !== false) &amp;&amp; (mt_rand(1, 100) &lt;= $ratio);    &#125;,    &#39;profiler.simple_url&#39; =&gt; function($url) &#123;        return preg_replace(&#39;/\=\d+/&#39;, &#39;&#39;, $url);    &#125;,    //&#39;profiler.replace_url&#39; =&gt; function($url) &#123;    //    return str_replace(&#39;token&#39;, &#39;&#39;, $url);    //&#125;,    &#39;profiler.options&#39; =&gt; array(),    &#39;profiler.skip_built_in&#39; =&gt; false,);</code></pre><p>以上是默认配置</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://img.rc5j.cn/blog20200724134032.png" alt=""></p><p>图中可以看到,每次请求的花费时间。</p><p><img src="http://img.rc5j.cn/blog20200724165205.png" alt=""></p><p><img src="http://img.rc5j.cn/blog20200724165354.png" alt=""></p><p>通过观察方法调用次数，可以发现symfony ErrorHandler这个组件方法执行的特别多。</p><p>于是我取消了这个组件，发现接口请求时间从<code>113ms</code>直接就降到了<code>71ms</code>.</p><p><strong>这就是很直观的性能定位了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>edge使用google theme</title>
      <link href="2020/07/10/edge%E4%BD%BF%E7%94%A8google-theme/"/>
      <url>2020/07/10/edge%E4%BD%BF%E7%94%A8google-theme/</url>
      
        <content type="html"><![CDATA[<p>用edge打开 edge://flags/#edge-allow-store-extension-themes</p><p><img src="http://img.rc5j.cn/blog20200710172834.png" alt=""></p><p>改为启用！</p><p>访问 <a href="https://chrome.google.com/webstore/category/themes">https://chrome.google.com/webstore/category/themes</a><br>安装即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kafka搭建和使用(PHP语言版本)</title>
      <link href="2020/07/08/kafka%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-PHP%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/"/>
      <url>2020/07/08/kafka%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-PHP%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200723094704.png" alt=""></p><p>首先,安装确实是一个费时费力的事情。这里我们使用docker安装。</p><span id="more"></span><h2 id="docker搭建kafka"><a href="#docker搭建kafka" class="headerlink" title="docker搭建kafka"></a>docker搭建kafka</h2><pre><code class="yml">## docker-compose.ymlversion: &#39;3.1&#39;services:    zookeeper:        image: wurstmeister/zookeeper        ports:          - &quot;2181:2181&quot;    kafka:        image: wurstmeister/kafka        ports:          - &quot;9092:9092&quot;        environment:           KAFKA_ADVERTISED_HOST_NAME: 172.17.0.1           KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181           KAFKA_ADVERTISED_PORT: 9092</code></pre><p>更多细节建议访问官方文档查阅。</p><h2 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h2><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><pre><code class="PHP"> public function kafka(Request $request)    &#123;        $faker = Factory::create(&#39;zh_CN&#39;);        $message = $faker-&gt;name();        Log::debug(&#39;消息&#39;, [&#39;message&#39; =&gt; $message]);        $conf = new Conf();        $conf-&gt;set(&#39;log_level&#39;, (string) LOG_DEBUG);        $conf-&gt;set(&#39;debug&#39;, &#39;all&#39;);        $conf-&gt;set(&#39;metadata.broker.list&#39;, &#39;127.0.0.1:9092&#39;);        $conf-&gt;setDrMsgCb(function ($kafka, $message) &#123;            Log::debug(&quot;kafka信息&quot;, [&#39;message&#39; =&gt; var_export($message, true)]);        &#125;);        $conf-&gt;setErrorCb(function ($kafka, $err, $reason) &#123;            Log::debug(&quot;kafka错误&quot;, [&#39;err&#39; =&gt; $err, &#39;reason&#39; =&gt; $reason]);        &#125;);        $conf-&gt;setLogCb(function ($kafka, $level, $facility, $message) &#123;            Log::debug(vsprintf(&quot;Kafka %s: %s (level: %d)\n&quot;, [$facility, $message, $level]));        &#125;);        //If you need to produce exactly once and want to keep the original produce order, uncomment the line below        //$conf-&gt;set(&#39;enable.idempotence&#39;, &#39;true&#39;);        $producer = new Producer($conf);        $topic = $producer-&gt;newTopic(&quot;test&quot;);        $topic-&gt;produce(RD_KAFKA_PARTITION_UA, 0, $faker-&gt;name());        $producer-&gt;poll(0);        $result = $producer-&gt;flush(10000);        if (RD_KAFKA_RESP_ERR_NO_ERROR !== $result) &#123;            throw new \RuntimeException(&#39;Was unable to flush, messages might be lost!&#39;);        &#125;        return new ActionResponse($result);    &#125;</code></pre><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><pre><code class="PHP">public function consume()    &#123;        $conf = new Conf();// Configure the group.id. All consumer with the same group.id will consume// different partitions.        $conf-&gt;set(&#39;group.id&#39;, &#39;myConsumerGroup&#39;);// Initial list of Kafka brokers        $conf-&gt;set(&#39;metadata.broker.list&#39;, &#39;127.0.0.1&#39;);// Set where to start consuming messages when there is no initial offset in// offset store or the desired offset is out of range.// &#39;smallest&#39;: start from the beginning        $conf-&gt;set(&#39;auto.offset.reset&#39;, &#39;smallest&#39;);        $consumer = new KafkaConsumer($conf);// Subscribe to topic &#39;test&#39;        $consumer-&gt;subscribe([&#39;test&#39;]);        echo &quot;Waiting for partition assignment... (make take some time when\n&quot;;        echo &quot;quickly re-joining the group after leaving it.)\n&quot;;        while (true) &#123;            $message = $consumer-&gt;consume(120 * 1000);            switch ($message-&gt;err) &#123;                case RD_KAFKA_RESP_ERR_NO_ERROR:                    $this-&gt;info($message-&gt;payload);                    break;                case RD_KAFKA_RESP_ERR__PARTITION_EOF:                    echo &quot;No more messages; will wait for more\n&quot;;                    break;                case RD_KAFKA_RESP_ERR__TIMED_OUT:                    $this-&gt;info(&quot;Timed out&quot;);                    break;                default:                    throw new Exception($message-&gt;errstr(), $message-&gt;err);                    break;            &#125;        &#125;    &#125;</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>生产者是一个restful的api，直接调用会往kafka里写入1个中文姓名的消息。</p><p>消费者是一个PHP脚本进程，启动会开始消费kafka消息</p><pre><code class="shell">php bin/cli.php kafka consume</code></pre><p><img src="http://img.rc5j.cn/blog20200709115956.png" alt=""></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>虽然已经搭建了kafka<code>消息中间件</code>,和编写了<code>生产者</code>和<code>消费者</code>.但是关于其中的许多细节还要搞清除。包括:</p><ul><li>什么是broken</li><li>什么是partition</li><li>消息flush是做什么</li><li>poll又是做什么</li><li>等等更多细节</li></ul><h2 id="broken"><a href="#broken" class="headerlink" title="broken"></a>broken</h2>]]></content>
      
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个线上问题引发的对PHP生命周期和SESSION机制思考</title>
      <link href="2020/07/01/php/%E4%B8%80%E4%B8%AA%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E5%AF%B9PHP%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8CSESSION%E6%9C%BA%E5%88%B6%E6%80%9D%E8%80%83/"/>
      <url>2020/07/01/php/%E4%B8%80%E4%B8%AA%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E5%AF%B9PHP%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8CSESSION%E6%9C%BA%E5%88%B6%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP生态之自动化测试</title>
      <link href="2020/07/01/PHP%E7%94%9F%E6%80%81%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>2020/07/01/PHP%E7%94%9F%E6%80%81%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>PHP TESTING FOR EVERYONE</p><span id="more"></span><p><img src="http://img.rc5j.cn/blog20200701101728.png" alt=""></p><p>在长久的工作经历中，测试大佬常会在你耳旁嘀咕开发要自测要自测。但是实际上开发往往只会关心当前负责的单元功能的正确与否。繁杂的开发任务当中，还要兼顾所有流程的功能运转可能就没那个精力了，或者说这本身就是测试的工作。在远古时代互联网领域工作还没细分到前端、后端、测试、UI的时候，所有一揽子活都只有一个人做，那就是程序员。</p><p><strong>但是如何尽量保证程序返回结果是预期的？</strong> 能否做到每次发布之前自动对程序测试看是否达到预期？<br>这个时候我们可以引入<strong>自动化测试</strong>。</p><h2 id="自动化测试范围"><a href="#自动化测试范围" class="headerlink" title="自动化测试范围"></a>自动化测试范围</h2><ul><li>UI测试</li><li>接口测试</li><li>单元测试</li><li>数据测试</li></ul><p>其中UI测试和数据测试的自动化可能是最不容易做且效益最小的。这部分可能最好是人为的进行测试效果最好。</p><p>在体验了java 的junit之后特别觉得junit的强大,其实PHP也可以做。接下来我们来了解下PHP的测试框架<code>codeception</code></p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><pre><code>composer require &quot;codeception/codeception&quot; --dev</code></pre><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><pre><code>php vendor/bin/codecept bootstrap</code></pre><p>该命令会初始化配置文件和目录</p><h3 id="轻量安装"><a href="#轻量安装" class="headerlink" title="轻量安装"></a>轻量安装</h3><p>Use predefined installation templates for common use cases. Run them instead of bootstrap command.</p><p><code>bootstrap</code>会默认初始化所有测试类型所需要的组件，有些你不会用到的类库也会安装。推荐使用轻量安装所用能到的测试类型。</p><p>例如你只需要单元测试，则可以</p><pre><code>php vendor/bin/codecept init unit</code></pre><p><strong>suite配置</strong></p><p>初始化之后还要对测试类型进行相应的配置,在tests目录下新建unit的配置</p><pre><code class="yml"># unit.suite.yml# Codeception Test Suite Configuration## Suite for unit or integration tests.actor: UnitTestermodules:    enabled:        - Asserts        - \Helper\Unit    step_decorators: ~        </code></pre><p><img src="http://img.rc5j.cn/blog20200702152857.png" alt=""></p><h2 id="codeception单元测试"><a href="#codeception单元测试" class="headerlink" title="codeception单元测试"></a>codeception单元测试</h2><p><img src="http://img.rc5j.cn/blog20200702143824.png" alt=""></p><p>codeception的单元测试其实也是基于phpunit之上构建的。phpunit的单元测试用例可以之前在codeception上执行。</p><h3 id="创建单元测试"><a href="#创建单元测试" class="headerlink" title="创建单元测试"></a>创建单元测试</h3><pre><code>php vendor/bin/codecept generate:test unit Example</code></pre><p>执行完会在tests/unit目录里创建测试用例文件 </p><pre><code class="php">class ExampleTest extends \Codeception\Test\Unit&#123;    /**     * @var \UnitTester     */    protected $tester;    protected function _before()    &#123;    &#125;    protected function _after()    &#123;    &#125;    // tests    public function testMe()    &#123;    &#125;&#125;</code></pre><ul><li>all public methods with test prefix are tests</li><li>_before method is executed before each test (like setUp in PHPUnit)</li><li>_after method is executed after each test (like tearDown in PHPUnit)</li></ul><h3 id="运行用例"><a href="#运行用例" class="headerlink" title="运行用例"></a>运行用例</h3><pre><code>php vendor/bin/codecept run unit ExampleTest</code></pre><p>如果有目录可以执行到文件</p><pre><code>php bin/codecept run unit tests/unit/src/Service/InvoiceServiceTest.php       </code></pre><p>运行所有单元测试用例</p><pre><code>php vendor/bin/codecept run unit</code></pre><pre><code class="php">class UserTest extends \Codeception\Test\Unit&#123;    public function testValidation()    &#123;        $user = new User();        $user-&gt;setName(null);        $this-&gt;assertFalse($user-&gt;validate([&#39;username&#39;]));        $user-&gt;setName(&#39;toolooooongnaaaaaaameeee&#39;);        $this-&gt;assertFalse($user-&gt;validate([&#39;username&#39;]));        $user-&gt;setName(&#39;davert&#39;);        $this-&gt;assertTrue($user-&gt;validate([&#39;username&#39;]));    &#125;&#125;</code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="http://img.rc5j.cn/blog20200723093255.png" alt=""></p><p><img src="http://img.rc5j.cn/blog20200723093429.png" alt=""></p><p>可以统计到所有文件的覆盖率和用例测试结果。</p><p>结合git钩子我们可以在每次分支提交时进行自动的用例测试，能一定程度上防止代码更改了而没测试产生非预期的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intl安装的那些事儿</title>
      <link href="2020/06/19/intl%E5%AE%89%E8%A3%85%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>2020/06/19/intl%E5%AE%89%E8%A3%85%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<p>被intl折磨的还不够么</p><span id="more"></span><p>To build the extension you need to install the » ICU library, version 4.0.0 or newer is required. As of PHP 7.4.0 ICU 50.1 or newer is required.</p><p>This extension is bundled with PHP as of PHP version 5.3.0. Alternatively, the PECL version of this extension may be used with all PHP versions greater than 5.2.0 (5.2.4+ recommended).</p><h2 id="ICU安装"><a href="#ICU安装" class="headerlink" title="ICU安装"></a>ICU安装</h2><p>现在icu已被放到github，下载建议直接从github下载源码到本地。</p><p><a href="https://github.com/unicode-org/icu/releases/tag/release-60-3">https://github.com/unicode-org/icu/releases/tag/release-60-3</a></p><p>下载后编译安装</p><h2 id="拓展安装"><a href="#拓展安装" class="headerlink" title="拓展安装"></a>拓展安装</h2><pre><code class="shell">pecl install intl</code></pre><p>总会遇到问题,建议用phpize 源码安装。进入源码ext下的intl目录</p><pre><code>./configure  --enable-intl   --with-php-config=/usr/local/php7/bin/php-configmakemake install</code></pre><p>重启php-fpm</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Dynamic SQL使用尝试</title>
      <link href="2020/06/01/MyBatis-Dynamic-SQL%E4%BD%BF%E7%94%A8%E5%B0%9D%E8%AF%95/"/>
      <url>2020/06/01/MyBatis-Dynamic-SQL%E4%BD%BF%E7%94%A8%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>首先说明下，我可能是被这个插件的名字给误导了。我原本以为Dynamic SQL是为了解决动态查询场景的。但可能<code>MyBatis Dynamic SQL</code> 并不是来解决这个问题的。</p><p>20.06.04更新</p><p><strong>打脸了</strong>，原来它是支持的，果然是动态sql.并且还真香！</p><span id="more"></span><h2 id="MyBatis-Dynamic-SQL"><a href="#MyBatis-Dynamic-SQL" class="headerlink" title="MyBatis Dynamic SQL"></a>MyBatis Dynamic SQL</h2><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><p>This library is a framework for generating dynamic SQL statements. Think of it as a typesafe SQL templating library, with additional support for MyBatis3 and Spring JDBC Templates.</p><p>The primary goals of the library are:</p><ul><li>Typesafe - to the extent possible, the library will ensure that parameter types match the database column types</li><li>Expressive - statements are built in a way that clearly communicates their meaning (thanks to Hamcrest for some inspiration)</li><li>Flexible - where clauses can be built using any combination of and, or, and nested conditions</li><li>Extensible - the library will render statements for MyBatis3, Spring JDBC templates or plain JDBC. It can be extended to generate clauses for other frameworks as well. Custom where conditions can be added easily if none of the built in conditions are sufficient for your needs.</li><li>Small - the library is a small dependency to add. It has no transitive dependencies.</li></ul><p>官方似乎说到这个类库的主要目标是解决类型安全问题。</p><p>This library grew out of a desire to create a utility that could be used to improve the code generated by MyBatis Generator, but the library can be used on it’s own with very little setup required.</p><p>官方说可以使用<code>MyBatis Generator</code>生成代码文件。</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.mybatis.dynamic-sql&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-dynamic-sql&lt;/artifactId&gt;    &lt;version&gt;1.1.4&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h2 id="MyBatis-Generator"><a href="#MyBatis-Generator" class="headerlink" title="MyBatis Generator"></a>MyBatis Generator</h2><p>MyBatis Generator may generate:</p><p>Java or Kotlin classes that match the table structure. This may include:</p><ul><li>a class to match the primary key of the table (if there is a primary key)</li><li>a class to match the non-primary key fields of the table (except BLOB fields)</li><li>a class to include the BLOB fields of a table (if the table has BLOB fields)</li><li>a class to enable dynamic selects, updates, and deletes</li></ul><p><code>MyBatis Generator</code>将会生成下述三个文件：</p><ul><li>与表对应的 model 类 Employee.java</li><li>定义了表信息和列信息的 support 类 EmployeeDynamicSqlSupport.java</li><li>以注解形式实现的 mapper 接口 EmployeeMapper.java</li></ul><h3 id="Running-MyBatis-Generator-With-Maven"><a href="#Running-MyBatis-Generator-With-Maven" class="headerlink" title="Running MyBatis Generator With Maven"></a>Running MyBatis Generator With Maven</h3><ol><li>配置pom.xml</li></ol><pre><code class="xml">           &lt;plugin&gt;                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;1.4.0&lt;/version&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt;                        &lt;goals&gt;                            &lt;goal&gt;generate&lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;                &lt;dependencies&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;mysql&lt;/groupId&gt;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                        &lt;version&gt;8.0.20&lt;/version&gt;                    &lt;/dependency&gt;                &lt;/dependencies&gt;            &lt;/plugin&gt;</code></pre><p>注意<code>mysql-connector-java</code>依赖配置</p><ol start="2"><li>配置 generatorConfig.xml</li></ol><p>在resource中配置生成配置文件generatorConfig.xml</p><pre><code class="xml">&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;  &lt;context id=&quot;dsql&quot; targetRuntime=&quot;MyBatis3DynamicSql&quot;&gt;    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;        connectionURL=&quot;jdbc:mysql://localhost:3306/db_itdoc&quot; userId=&quot;username&quot; password=&quot;password&quot; /&gt;    &lt;javaModelGenerator targetPackage=&quot;com.vison.itdoc.entity&quot; targetProject=&quot;src/main/java&quot;/&gt;    &lt;javaClientGenerator targetPackage=&quot;com.vison.itdoc.dao&quot; targetProject=&quot;src/main/java&quot;/&gt;    &lt;table tableName=&quot;task&quot; /&gt;  &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><p><code>userId</code>和<code>password</code>分别是数据库用户名和密码</p><ol start="3"><li>执行生成</li></ol><pre><code class="shell">$ mvn mybatis-generator:generate</code></pre><h2 id="使用MyBatis-Dynamic-SQL"><a href="#使用MyBatis-Dynamic-SQL" class="headerlink" title="使用MyBatis Dynamic SQL"></a>使用MyBatis Dynamic SQL</h2><p>当相应的文件生成之后，这个时候可以直接使用了。</p><pre><code class="java">   SelectStatementProvider queryCount = select(count())                .from(task)                .build()                .render(RenderingStrategies.MYBATIS3);        Long taskCount = taskMapper.count(queryCount);        double total = Math.ceil(taskCount / iPageSize);        SelectStatementProvider tasksQuerypProvider = select(createTime).from(task)                .orderBy(createTime)                .limit(iPageSize).offset(iOffset).build()                .render(RenderingStrategy.MYBATIS3);    List&lt;Task&gt; tasks = taskMapper.selectMany(tasksQuerypProvider);</code></pre><p><code>MyBatis Dynamic SQL</code>非常优雅得sqlbuilder方式,会提示表字段名。</p><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3><p>在这之前<code>mybatis</code>可以使用xml或注解方式进行动态组织sql</p><pre><code class="java">public class TaskService &#123;    public String queryCount(String type, String remark) &#123;        return new SQL() &#123;            &#123;                SELECT(&quot;T.ID&quot;);                FROM(&quot;TASK T&quot;);                if (type != null) &#123;                    WHERE(&quot;T.type = #&#123;type&#125;&quot;);                &#125;                if (remark != null) &#123;                    WHERE(&quot;T.remark = #&#123;remark&#125;&quot;);                &#125;                ORDER_BY(&quot;T.create_time&quot;);            &#125;        &#125;.toString();    &#125;</code></pre><p>在mapper上</p><pre><code class="java">  @SelectProvider(type = TaskService.class, method = &quot;queryCount&quot;)    public Object queryCount(String type, String remark);</code></pre><p>现在可以换另一种方式</p><pre><code class="java">    public SelectStatementProvider countTask(Integer typeInteger, String remarkString) &#123;        QueryExpressionDSL&lt;SelectModel&gt;.QueryExpressionWhereBuilder builder = select(count())                .from(task).where();        if (typeInteger != null) &#123;            builder.and(type, isEqualTo(typeInteger));        &#125;        if (remarkString != null) &#123;            builder.and(remark, isEqualTo(remarkString));        &#125;        return builder.build().render(RenderingStrategy.MYBATIS3);    &#125;    public SelectStatementProvider search(Object searchObj, Integer iPageSize, Integer iOffset) &#123;        QueryExpressionDSL&lt;SelectModel&gt;.QueryExpressionWhereBuilder builder = select(remark, type, createTime, modifyTime)                .from(task).where();        builder                .orderBy(createTime)                .limit(iPageSize).offset(iOffset);        return builder.build().render(RenderingStrategy.MYBATIS3);    &#125;</code></pre><p>从编码感受上，由于根据表结构生成了<code>SqlSupport</code>.任何对表的信息引用都能有提示，包括表名、字段名。</p><pre><code class="java">List&lt;Task&gt; tasks = taskMapper.selectMany(taskService.search(null, iPageSize, iOffset));</code></pre><p>调用上面，也无需在mapper上再编写方法，因为已经全部生成了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.olowolo.com/post/new-mybatis-dynamic-sql/">Mybatis Dynamic SQL - 重新定义 Mybatis 动态 SQL</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用信号控制php常驻进程平滑中断思考</title>
      <link href="2020/05/30/php%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8B%E5%B9%B3%E6%BB%91%E4%B8%AD%E6%96%AD/"/>
      <url>2020/05/30/php%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8B%E5%B9%B3%E6%BB%91%E4%B8%AD%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>很多场景下我们都需要进程程序在后台一直处理任务，比如队列消费。可采用while true的方式让进程常驻按一定的频次执行任务。但是但我们要重启进程或中止进程时，如何保证进程内正在执行的任务执行完毕再中止呢？</p><span id="more"></span><p>思考一下，可不可以我们通过一种指令告诉进程，”诶，我现在要重启一下，你能把正在做的事情做完了先退出歇会么？”</p><p><code>kill</code>命令可以解决这个问题。</p><h2 id="再看kill"><a href="#再看kill" class="headerlink" title="再看kill"></a>再看kill</h2><p>许人肯定会觉得 kill 不就是杀掉进程么？ 我经常用<code>kill -9</code>杀进程。 这么说也没错，不过我们现在可以系统地来看看<code>kill</code>命令.</p><p>我们先看下官方的定义,让那个男人来跟我们讲讲。</p><pre><code class="shell">man shell</code></pre><pre><code>KILL(1)                                                                         User Commands                                                                         KILL(1)NAME       kill - terminate a processSYNOPSIS       kill [-s signal|-p] [-q sigval] [-a] [--] pid...       kill -l [signal]DESCRIPTION       The command kill sends the specified signal to the specified process or process group.  If no signal is specified, the TERM signal is sent.  The TERM signal will kill       processes which do not catch this signal.  For other processes, it may be necessary to use the KILL (9) signal, since this signal cannot be caught.       Most modern shells have a builtin kill function, with a usage rather similar to that of the command described here.  The &#39;-a&#39; and &#39;-p&#39; options, and the possibility to       specify processes by command name are a local extension.       If sig is 0, then no signal is sent, but error checking is still performed.</code></pre><ul><li>官方解释<code>kill</code>是用来终止进程的。</li><li><code>kill</code> 发送指定的信号给到进程或进程组。</li><li>如果没有指定信号，默认发送<code>TERM</code>信号。</li><li><code>TERM</code>信号将会杀掉进程，当<code>TERM</code>未被捕获的时候。</li><li><code>9</code>信号不能被捕获</li></ul><p><strong>谈谈我的理解</strong></p><ol><li>kill命令就是用来杀掉进程的</li><li>它可以给进程发送一些指令，让程序去捕获做特殊处理。比如上面说到的场景，让程序执行完正在执行的任务，再退出。</li></ol><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>接下来我们用PHP脚本来验证下上面的理解。我们用<code>pcntl_signal</code>来对信号进行捕获。</p><pre><code class="php">class SignalShell extends Shell&#123;    private $taskFinish = false;    public function __construct()    &#123;//        pcntl_signal(SIGTERM, [$this, &#39;sig_handler&#39;]);//        pcntl_signal(SIGHUP, [$this, &#39;sig_handler&#39;]);        pcntl_signal(SIGINT, [$this, &#39;sig_handler&#39;]);//        pcntl_signal(SIGQUIT, [$this, &#39;sig_handler&#39;]);        pcntl_signal(SIGILL, [$this, &#39;sig_handler&#39;]);        pcntl_signal(SIGPIPE, [$this, &#39;sig_handler&#39;]);        pcntl_signal(SIGALRM, [$this, &#39;sig_handler&#39;]);        pcntl_signal(SIGUSR1, [$this, &#39;sig_handler&#39;]);        $this-&gt;info(&quot;注册信号&quot;);    &#125;    public function task()    &#123;        while (true &amp;&amp; !$this-&gt;taskFinish) &#123;            sleep(10);            $this-&gt;info(uniqid());        &#125;    &#125;    public function sig_handler($signo)    &#123;        $time = date(&#39;Y-m-d H:i:s&#39;);        if ($signo == 14) &#123;            //忽略alarm信号            echo $time . &quot; ignore alarm signo[&#123;$signo&#125;]\r\n&quot;;        &#125; else &#123;            echo $time . &quot; exit  signo[&#123;$signo&#125;]\r\n&quot;;            if ($signo == SIGUSR1) &#123;                $this-&gt;info(&quot;捕获自定义&quot;);                $this-&gt;taskFinish = true;            &#125;        &#125;    &#125;&#125;</code></pre><p>代码很简单，就是让脚本每隔10秒输出一个字符串，任务之前对一些信号进行捕获。</p><p><img src="http://img.rc5j.cn/blog20200530114817.png" alt=""></p><p>分别对进程执行了，kill、kill QUIT、kill HUP 发现进程都会被直接终止。</p><p>下面我们开始,对<code>TERM</code>进行捕获。</p><pre><code class="php">pcntl_signal(SIGTERM, [$this, &#39;sig_handler&#39;]);</code></pre><p>打开注释。</p><p><img src="http://img.rc5j.cn/blog20200530115128.png" alt=""></p><p>15信号(TERM)被捕获到了，但是进程并没有退出,还再继续执行。</p><p>我们再试下USR1信号。</p><p><img src="http://img.rc5j.cn/blog20200530115632.png" alt=""></p><p>USR1被捕获到了，并且程序立即执行完一次输出退出了。注意我是程序自己控制了,捕获到USR1之后不继续执行循环。</p><p>细心的朋友们可能会发现，程序中的sleep被跳过了。</p><p><strong>这是什么原因呢?</strong></p><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>事实上sleep是一个特殊的函数。其实官方文档有解释:</p><p><img src="http://img.rc5j.cn/blog20200530120859.png" alt=""></p><p><code>sleep</code>在被信号中止时，会返回非0值,非windows下会返回剩余秒数。</p><p>让我们来验证下。</p><pre><code class="php"> while (true &amp;&amp; !$this-&gt;taskFinish) &#123;            $res = sleep(10);            $this-&gt;info(&quot;sleep返回:&quot;.$res);            $this-&gt;info(uniqid()); &#125;</code></pre><p>我们记录了sleep执行完的返回值。</p><p><img src="http://img.rc5j.cn/blog20200530121207.png" alt=""></p><p>发现信号给到时，sleep确实会返回剩余秒数。这就解释了为什么上面看到的sleep被跳过了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>A process can define how to handle incoming POSIX signals. If a process does not define a behaviour for a signal, then the default handler for that signal is being used. The table below lists some default actions for POSIX-compliant UNIX systems, such as FreeBSD, OpenBSD and Linux.</p></blockquote><ol><li>kill能给进程发送信号量，告诉进程按什么方式结束。</li><li>kill定义的不同信号量，用法不同，但是需要程序自己去处理。它只是定义了目的，但未定义过程和实际结果。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/Signal_(IPC)">https://en.wikipedia.org/wiki/Signal_(IPC)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> php linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot分环境自定义配置</title>
      <link href="2020/05/26/spring-boot%E5%88%86%E7%8E%AF%E5%A2%83%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/"/>
      <url>2020/05/26/spring-boot%E5%88%86%E7%8E%AF%E5%A2%83%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在一般规模企业，应当都有测试环境和正式环境区别，或者至少也有开发环境和正式环境。那不同环境必然就会有一些环境依赖的不同，不管是出于安全性考虑还是其他原因导致的。比如数据库配置、OSS账号信息等。那程序当中就需要配置多份配置信息和根据不同环境使用不同配置。</p><span id="more"></span><h2 id="分环境配置"><a href="#分环境配置" class="headerlink" title="分环境配置"></a>分环境配置</h2><p><img src="http://img.rc5j.cn/blog20200526133442.png" alt=""></p><pre><code># 激活日志环境spring.profiles.active=prd</code></pre><p>公共配置还是写在application。<br>相应配置写在-{env} 文件里。</p><h2 id="自定义配置获取"><a href="#自定义配置获取" class="headerlink" title="自定义配置获取"></a>自定义配置获取</h2><p>上面是spring框架所需的默认配置方法，我们通常还需要非常多的自定义配置。比如密码的加盐salt等等，这是项目的自定义配置。</p><p>那如果对这些自定义内容进行配置和获取呢。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我们依然可以在application.properties进行配置。</p><p>例如：</p><pre><code class="properties">app.security.salt=zM2Y&amp;*21.rkJr=11app.oss.host=http://oss-cn-beijing.aliyuncs.comapp.oss.bucket=bucketNanmeapp.oss.accessKey=accessKeyapp.oss.accessSecret=accessSecret</code></pre><h2 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h2><pre><code class="java">@Servicepublic class OssService &#123;    @Value(&quot;$&#123;app.oss.host&#125;&quot;)    private String host;    @Value(&quot;$&#123;app.oss.accessKey&#125;&quot;)    private String accessKeyId;    @Value(&quot;$&#123;app.oss.accessSecret&#125;&quot;)    private String accessKeySecret;    @Value(&quot;$&#123;app.oss.bucket&#125;&quot;)    private String bucketName;&#125;</code></pre><p><strong>一定要是在spring bean里进行获取，否则无法获取到。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.spring.io/spring-boot/docs/1.5.22.RELEASE/reference/html/boot-features-external-config.html">https://docs.spring.io/spring-boot/docs/1.5.22.RELEASE/reference/html/boot-features-external-config.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java spring-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql单个表的权限控制</title>
      <link href="2020/05/08/mysql%E5%8D%95%E4%B8%AA%E8%A1%A8%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>2020/05/08/mysql%E5%8D%95%E4%B8%AA%E8%A1%A8%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在系统开发当中有这样的需求，A系统需要读写B系统的数据库数据,但是某些特殊的表数据只允许读操作。这时候就需要做到表级的权限控制。</p></blockquote><span id="more"></span><h2 id="revoke"><a href="#revoke" class="headerlink" title="revoke"></a>revoke</h2><p>Mysql本身是支持用revoke进行权限回收操作的。</p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/revoke.html">https://dev.mysql.com/doc/refman/5.6/en/revoke.html</a></p><pre><code>REVOKE    priv_type [(column_list)]      [, priv_type [(column_list)]] ...    ON [object_type] priv_level    FROM user [, user] ...REVOKE ALL [PRIVILEGES], GRANT OPTION    FROM user [, user] ...REVOKE PROXY ON user    FROM user [, user] ...</code></pre><p>从语法当中可以看到还可以做到列级别的控制。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><pre><code>mysql&gt; revoke insert,delete,update on db_oms.t_order from &#39;oms_order_ro&#39;@&#39;localhost&#39;;ERROR 1147 (42000): There is no such grant defined for user &#39;oms_order_ro&#39; on host &#39;localhost&#39; on table &#39;t_order&#39;</code></pre><p>但是事实上，执行的时候会遇到问题。</p><p><strong>什么原因呢？</strong></p><pre><code>mysql&gt; show grants for oms_order_ro@localhost    -&gt; ;+----------------------------------------------------------------------------------+| Grants for oms_order_ro@localhost                                                |+----------------------------------------------------------------------------------+| GRANT USAGE ON *.* TO &#39;oms_order_ro&#39;@&#39;localhost&#39;                                 || GRANT SELECT, INSERT, UPDATE, DELETE ON `db_oms`.* TO &#39;oms_order_ro&#39;@&#39;localhost&#39; |+----------------------------------------------------------------------------------+</code></pre><p>仔细看下，我们是使用的通配符去进行赋权限。看起来这里mysql还是表现的比较本。认为没有该权限进行回收。</p><p>那么正确的做法应该是怎样的呢？</p><blockquote><p>Managing access in mysql can be quite dificult !!</p></blockquote><p>Once you gave him database.* you cannot revoke access for an object that is in that class. MySQL doesn’t expand the Hotels.* wildcard to the individual tables The permissions tables store the granted permissions. Therefore, since you didn’t actually grant anything on Hotels.AllHotels , there’s nothing for MySQL to revoke. In this case you need to do it granular form the start !</p><p>Remove all privileges on database, table, column levels, etccc.</p><p>Grant privileges to EACH table, except ‘you choose’.<br>Grant privilege to specified fields in table ‘you choose’.</p><p><strong>我们必须要逐个逐个表进行赋权限，然后进行回收。</strong></p><p>实际上这么操作虽然能解决问题，但是会带来跟多问题，如果表增加了。你必须再对这个表进行赋权限和回收权限。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium自动化测试在页面web性能测试应用的尝试</title>
      <link href="2020/05/07/Selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%9C%A8%E9%A1%B5%E9%9D%A2web%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%BA%94%E6%9C%89%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
      <url>2020/05/07/Selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%9C%A8%E9%A1%B5%E9%9D%A2web%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%BA%94%E6%9C%89%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>对于web测试，我们通常在做的测试都是人工的功能测试。那么少见的自动化测试到底适用哪些场景呢？</p><span id="more"></span><h1 id="用python进行web自动化测试"><a href="#用python进行web自动化测试" class="headerlink" title="用python进行web自动化测试"></a>用python进行web自动化测试</h1><blockquote><p>前段时间，在客服信息系统进入用户体验阶段时发现内存存在泄露问题。我们花了很多时间去排查原因。经过各种可能的优化方案，结果发现没有实质性的效果，于是我们决定重构。但是如何保证重构方案的可行呢？于是我们用到了python+Selenium</p></blockquote><h2 id="为什么会用到web自动化测试"><a href="#为什么会用到web自动化测试" class="headerlink" title="为什么会用到web自动化测试"></a>为什么会用到web自动化测试</h2><h3 id="web自动化测试适用场景"><a href="#web自动化测试适用场景" class="headerlink" title="web自动化测试适用场景"></a>web自动化测试适用场景</h3><p>对于web测试，我们通常在做的测试都是人工的功能测试。那么少见的自动化测试到底适用哪些场景呢？</p><ul><li>回归测试。每一次应用发布，都伴随着一次回归测试。对于重复性的工作，机器显然更适合。</li><li>兼容性测试。不管是Web测试，还是App测试，兼容性测试都是必不可少的一环。以Web测试为例，同样的测试用例，需要在不同的浏览器上分别运行一遍，这对测试人员而言不可谓不是一种折磨。</li><li>大规模测试。如果一次测试涉及的测试用例过多（比如100+），功能测试难免会有遗漏或者重复，而自动化测试可以轻松确保一个不少，一个也不多。</li><li>性能测试</li></ul><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>万事皆有利弊，机器的自动化测试没有广泛应用肯定是有原因的。</p><ul><li>不低的技术门槛。不论是使用哪种自动化测试框架，对于测试人员而言，都存在一定的技术门槛，一般至少需要学习并掌握一门编程语言。<br>可观的开发成本和维护成本。跟任何程序一样，无论是编写自动化测试脚本，还是在需求变化时修改脚本，都需要花费大量的时间。</li><li>需求要稳定。自动化测试的前提是测试用例要稳定，而测试用例稳定的前提是需求要稳定。对于临时的或者说一次性的需求，自动化测试往往是得不偿失的。</li><li>应用周期长。应用的生命周期越长，自动化测试节省的时间越多，带来的价值也越大。</li></ul><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>随着web前端技术发展更新越来越迅猛的态势，前端技术和框架层出不穷。但往往我们会在短期内高估技术带来的影响。</p><p><img src="http://img.rc5j.cn/blog20190524140107.png" alt=""></p><p>所以对于任何一个新的事物，我们采取保守的态度对待可能会少跌入一些<strong>幻灭的低谷期</strong>。对于新技术做充分的评估测试，可能会让我们少踩一些坑。当然往往这话，都是在事后才会提出来。</p><p>为什么可以用自动化测试做性能测试？<br>网上似乎都没有这种先例。我总结以下几个原因：</p><ol><li>脚本能强有规律地重复执行操作，而开发或测试自己做这个工作会很繁琐而且出了一步差错就得重来</li><li>脚本能将执行操作和数据记录结合起来。而人类执行一次数据记录和动作执行也许没问题，但重复500次或更多而无差错那就困难了。</li></ol><h2 id="web自动化测试方法"><a href="#web自动化测试方法" class="headerlink" title="web自动化测试方法"></a>web自动化测试方法</h2><ul><li>python+Selenium 跨浏览器支持</li><li>puppeteer 专注于chrome</li><li>airtest 跨平台，安卓、ios、web，web还是用的Selenium</li></ul><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="http://img.rc5j.cn/blog20190514101858.png" alt=""></p><p>执行脚本</p><p><img src="http://img.rc5j.cn/blog20190524162047.gif" alt=""></p><p>脚本运行情况，浏览器在自动进行操作</p><p><img src="http://img.rc5j.cn/blog20190524162725.png" alt=""></p><p>得出统计结果。我们模拟用户的某个最频繁的操作，发现采用新的方案后内存会在短时间内有效回收。整体上，页面内存会趋于稳定的态势。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="动态的ggcode"><a href="#动态的ggcode" class="headerlink" title="动态的ggcode"></a>动态的ggcode</h3><pre><code class="python"> ggcode = prompt(&quot;输入谷歌码: &quot;)</code></pre><p>由于登录用的谷歌码是动态的，所以这里只能每次输入进行填充。这里我们引入prompt_toolkit进行终端的交互</p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p>如今的前端项目，由于使用的是数据驱动dom，不是传统的jquery操作，现在基本看不到id class等进行元素定位。现在最方便的做法只能是通过xpath寻找元素。</p><p><img src="http://img.rc5j.cn/blog20190524180042.png" alt=""></p><pre><code>xpath = &#39;//*[@id=&quot;app&quot;]/div/div[2]/div[1]&#39;element = self.browser.find_element_by_xpath(                    xpath)</code></pre><p><strong>由于不是固定id，页面一旦改变xpath很有可能改变，会导致元素找不到。</strong></p><h3 id="webdriver进程不退出"><a href="#webdriver进程不退出" class="headerlink" title="webdriver进程不退出"></a>webdriver进程不退出</h3><p>在使用过程当中发现提供的<code>quit()</code> 方法并不能让进程退出，所以只能自己将进程kill掉。</p><pre><code class="python">def close_browser(self):</code></pre><h3 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h3><p>在进行按钮点击的时候，经常会因为页面未加载完等原因导致无法点击。结果就是可能会抛出异常。对于这种情况webdriver本身有提供wait等待。</p><pre><code class="python">wait = WebDriverWait(self.browser, 30)            element = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))</code></pre><p><code>WebDriverWait</code> 需要设置一个等待时长，不可能无限等待</p><p>还有些情况下，是由于需要下拉滚动条才能进行点击。这种情况可以考虑执行js进行点击。</p><pre><code class="python">js_click_next_page = &#39;document.querySelector(&quot;body &gt; div.worker-order-search-list &gt; div.content-wrapper &gt; section &gt; ul &gt; li.ivu-page-next&quot;).click()&#39;                browser.execute_script(js_click_next_page)</code></pre><p><strong>使用webdriver.click还是用js点击？</strong></p><blockquote><p>When Should You Use JavaScript for Clicking?<br>If you are using Selenium for testing an application, my answer to this question is “almost never”. By and large, your Selenium test should reproduce what a user would do with the browser. Taking the example of the drop down menu: a test should click on the button that brings up the drop down first, and then click on the menu item. If there is a problem with the GUI because the button is invisible, or the button fails to show the menu items, or something similar, then your test will fail and you’ll have detected the bug. If you use JavaScript to click around, you won’t be able to detect these bugs through automated testing.</p></blockquote><p><strong>总之还是看你的使用目的，如果自动化测试的目的倾向于测试页面功能。那么建议使用webdriver.click。如果是为了测试性能，那可以进行js点击了。</strong></p><h2 id="获取页面内存"><a href="#获取页面内存" class="headerlink" title="获取页面内存"></a>获取页面内存</h2><p>浏览器的任务管理器可以很容易的看到页面的内存、cpu、网络情况，但是如何获取到记录并统计呢？</p><p>答案是，很可惜现在还没找到。如果有官方办法，请告诉我。</p><p>我走了一个其他途径获取，从操作系统层面获取进程。获取一个进程得内存占用是一个简单的事，但是如何知道某个页面的进程id呢。很遗憾的是，webdriver同样没有接口方法提供。于是我只能从webdriver子进程入手，看有没有信息能与page关联上。很遗憾的事，单单从子进程名看与页面毫无关联。所以。。最后，我只能做一个假设，假设浏览器启动类似linux启动。启动的程序是有先后关系的。</p><pre><code class="python">def get_page_pid(self, page_num=1):        &quot;&quot;&quot;[获取启动页面的进程id,非官方方法,不一定正确。            原理:假设chrome主进程启动子进程是有顺序的,那么打开的页面进程在第4个开始启动]        Returns:            [type] -- [description]        &quot;&quot;&quot;        webdriver_pid = self.browser.service.process.pid        ps = psutil.Process(webdriver_pid)        ps_children = ps.children(True)        return ps_children[3+page_num-1].pid</code></pre><p>这是一种对项目无侵入的做法，你不需要改动项目代码，就可以对浏览器页面内存进行统计。还有其他做法，可以对项目进行增加内存上报进行统计。但这样的做法同样有弊端：</p><ol><li>需要动被测项目，对项目干扰</li><li>增加工作量，不光是上报还包括接收上报接口</li><li>如果是多iframe页签方式，统计聚合上报将非常繁琐</li></ol><p>需要注意的是，统计页面进程方法。<strong>得到的数据是整个页面进程所占用的内存，并非页面js占用内存。</strong></p><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>在统计上，我使用了chartify+pandas,只要传入数据就能快捷地生成图表</p><pre><code class="python">def chartArea(self, data, x_column, y_column):        &quot;&quot;&quot;[绘制区域图]        Arguments:            data &#123;[dict]&#125; -- [数据矩阵,拿去构建pandas dataFrame]            x_column &#123;[type]&#125; -- [x轴字段]            y_column &#123;[type]&#125; -- [y轴字段]        &quot;&quot;&quot;        data_frame = pd.DataFrame(data)        print(data_frame)        self.ch.plot.area(data_frame=data_frame,                          x_column=x_column, y_column=y_column, stacked=True)    def show(self, show_type=&#39;html&#39;):        self.ch.save(&#39;./output/%s-%s.png&#39; %                     (self.subtitle, time.strftime(&quot;%Y%m%d%H%M%S&quot;)), &#39;png&#39;)</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>正如前面所说，web自动化测试没有广泛应用肯定是有原因的。但是做为前端问题的论证还是有很大意义。</p><p>比如，页面占用内存限制是多少？我找了很多资料没有找到(官方的才可信)。</p><p>通过测试，我得到的结果是，chrome 对单页面js 内存有限制2G,对页面进程内存无限制。你一个页面进程甚至可以跑到20G。</p><p>python+Selenium 使用起来很简单，感兴趣又有需要的话，不妨一试。</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello world</title>
      <link href="2020/05/07/Hello-world/"/>
      <url>2020/05/07/Hello-world/</url>
      
        <content type="html"><![CDATA[<pre><code>hello,world </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器-程序员工具</title>
      <link href="2019/04/04/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
      <url>2019/04/04/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>提高工作效率，首先你得有一套用的顺手的工具</p></blockquote><p><img src="http://img.rc5j.cn/blog20190404140301.png" alt=""></p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><span id="more"></span><p><strong>PicGo</strong></p><p><img src="http://img.rc5j.cn/blog20190404140404.png" alt=""></p><p>支持粘贴板，直接上传到云存储。</p><p>我用七牛云，上传之后制动把markdown的格式地址，放到粘贴板直接可以粘贴到markdown.</p><p>对喜欢用markdown写作的同学非常方便</p><h2 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h2><p><strong>avenote</strong></p><p>之前avenote无法写markdown，我是怎么也喜欢不上。最近发现版本更新之后可以新建markdown格式。我用重新使用上了。</p><p><img src="http://img.rc5j.cn/blog20190404175017.png" alt=""></p><p><strong>boostnote</strong></p><p>这是一款专为程序员设计的记事本，支持代码片段格式和markdown格式。</p><p><img src="http://img.rc5j.cn/blog20190404175220.png" alt=""></p><p>我最喜欢的一点是它的待办进度展示，很直观。</p><p>缺点就是没有云端功能和没有手机版。</p><h2 id="rest客户端"><a href="#rest客户端" class="headerlink" title="rest客户端"></a>rest客户端</h2><p><strong>Insomnia</strong></p><p>它最大的亮点是能支持从curl命令里新建request实例，能从chrome利的copy as curl 复制过来无缝对接。在调试接口的时候简直是完美！</p><p><img src="http://img.rc5j.cn/blog20190404180843.png" alt=""></p><h2 id="git客户端"><a href="#git客户端" class="headerlink" title="git客户端"></a>git客户端</h2><p><strong>gitKarken</strong></p><p>章鱼🐙哥是我到目前为止最喜欢的git客户端，界面美观，操作设计舒服，对gitflow优雅支持。</p><p><img src="http://img.rc5j.cn/blog20190404181218.png" alt=""></p><p>git flow 操作很方便。</p><p><img src="http://img.rc5j.cn/blog20190404181623.png" alt=""></p><p>持续更新中。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker+compose+nginx+php</title>
      <link href="2018/07/22/docker-compose-nginx-php/"/>
      <url>2018/07/22/docker-compose-nginx-php/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200722165520.png" alt=""></p><span id="more"></span><blockquote><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p></blockquote><h2 id="我用docker做什么？"><a href="#我用docker做什么？" class="headerlink" title="我用docker做什么？"></a>我用docker做什么？</h2><p>快速搭建开发所需环境，测试实验新组件(如rabbitmq,kafka).避免因安装而浪费太多时间，我的目的是快速尝试使用。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><pre><code class="shell">brew cask install docker</code></pre><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>Compose 是一个用户定义和运行多个容器的 Docker 应用程序。在 Compose 中你可以使用 YAML 文件来配置你的应用服务。然后，只需要一个简单的命令，就可以创建并启动你配置的所有服务。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="http://upload-images.jianshu.io/upload_images/4033700-1a2d2c681ac9df9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2018-08-07-14-17-25"></p><p>一组服务建立一个目录</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre><code class="yaml">version: &#39;2&#39;services:  php7.2:    image: php:7.2-fpm    ports:      - &quot;9000:9000&quot;    volumes:       - ./php:/usr/local/etc/php      - /Users/caowenpeng/www:/www  nginx:    image: nginx    ports:       - &quot;80:80&quot;    volumes:      - /Users/caowenpeng/www:/www      - ./nginx:/etc/nginx</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code class="shell">docker-compose up -d</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>up</td><td>创建和启动容器</td></tr><tr><td>ps</td><td>列出所有容器</td></tr><tr><td>down</td><td>停止并删除容器，镜像，挂载</td></tr><tr><td>start</td><td>启动服务</td></tr><tr><td>stop</td><td>停止服务</td></tr><tr><td>restart</td><td>重启服务</td></tr></tbody></table><p><strong>第一次使用up,之后使用start,如果再次使用up将会重新创建容器，一些对容器的修改将会丢失</strong></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>进入容器 </p><pre><code class="bash"> docker-compose exec php7.2 bash</code></pre><p>进入容器后会发现只能用少量命令，连ps等都没有，这个时候需要安装一些程序</p><pre><code class="bash">apt-get update  ##更新元apt-get install procps  ## 安装 ps</code></pre><p>安装php-rdkafka拓展</p><pre><code class="bash">apt-get install wgetwget https://github.com/edenhill/librdkafka/archive/master.zipapt-get install unzipunzip master.zipcd librdkafka./configure makemake install pecl install http://pecl.php.net/get/rdkafka-3.0.4.tgz#在php.ini 配置启用 rdkafka拓展</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地理位置geo处理之mysql函数</title>
      <link href="2017/12/01/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AEgeo%E5%A4%84%E7%90%86%E4%B9%8Bmysql%E5%87%BD%E6%95%B0/"/>
      <url>2017/12/01/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AEgeo%E5%A4%84%E7%90%86%E4%B9%8Bmysql%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前越来越多的业务都会基于LBS，附近的人，外卖位置，附近商家等等，现就讨论离我最近这一业务场景的解决方案。</p></blockquote><p>目前已知解决方案有:</p><ul><li>mysql 自定义函数计算</li><li>mysql geo索引</li><li>mongodb geo索引</li><li>postgresql PostGis索引</li><li>redis geo</li><li>ElasticSearch</li></ul><p>本文测试下mysql 函数运算的性能</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><pre><code class="sql">CREATE TABLE `driver` (  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,  `lng` float DEFAULT NULL,  `lat` float DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre><h3 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h3><p>在创建数据之前先了解下基本的地理知识:</p><ul><li><p><strong>全球经纬度的取值范围为:</strong> 纬度-90<del>90，经度-180</del>180</p></li><li><p><strong>中国的经纬度范围大约为：</strong> 纬度3.86<del>53.55，经度73.66</del>135.05</p></li><li><p>北京行政中心的纬度为39.92，经度为116.46</p></li><li><p>越北面的地方纬度数值越大，越东面的地方经度数值越大</p></li><li><p>度分转换： 将度分单位数据转换为度单位数据，公式：度=度+分/60</p></li><li><p>分秒转换： 将度分秒单位数据转换为度单位数据，公式：度 = 度 + 分 / 60 + 秒 / 60 / 60</p></li></ul><p>在纬度相等的情况下：</p><ul><li>经度每隔0.00001度，距离相差约1米</li></ul><p>在经度相等的情况下：</p><ul><li>纬度每隔0.00001度，距离相差约1.1米</li></ul><h2 id="mysql函数计算"><a href="#mysql函数计算" class="headerlink" title="mysql函数计算"></a>mysql函数计算</h2><pre><code class="sql">DELIMITER //CREATE DEFINER=`root`@`localhost` FUNCTION `getDistance`(    `lng1` float(10,7)     ,    `lat1` float(10,7)    ,    `lng2` float(10,7)     ,    `lat2` float(10,7)) RETURNS double    COMMENT &#39;计算2坐标点距离&#39;BEGIN    declare d double;    declare radius int;    set radius = 6371000; #假设地球为正球形，直径为6371000米    set d = (2*ATAN2(SQRT(SIN((lat1-lat2)*PI()/180/2)           *SIN((lat1-lat2)*PI()/180/2)+           COS(lat2*PI()/180)*COS(lat1*PI()/180)           *SIN((lng1-lng2)*PI()/180/2)           *SIN((lng1-lng2)*PI()/180/2)),           SQRT(1-SIN((lat1-lat2)*PI()/180/2)           *SIN((lat1-lat2)*PI()/180/2)           +COS(lat2*PI()/180)*COS(lat1*PI()/180)           *SIN((lng1-lng2)*PI()/180/2)           *SIN((lng1-lng2)*PI()/180/2))))*radius;    return d;END//DELIMITER ;</code></pre><h2 id="创建数据python脚本"><a href="#创建数据python脚本" class="headerlink" title="创建数据python脚本"></a>创建数据python脚本</h2><pre><code class="python"># coding=utf-8from orator import DatabaseManager, Modelimport loggingimport randomimport threading&quot;&quot;&quot; 中国的经纬度范围 纬度3.86~53.55，经度73.66~135.05。大概0.00001度差距1米 &quot;&quot;&quot;# 创建 日志 对象logger = logging.getLogger()handler = logging.StreamHandler()formatter = logging.Formatter(    &#39;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&#39;)handler.setFormatter(formatter)logger.addHandler(handler)logger.setLevel(logging.DEBUG)# Connect to the databaseconfig = &#123;    &#39;mysql&#39;: &#123;        &#39;driver&#39;: &#39;mysql&#39;,        &#39;host&#39;: &#39;localhost&#39;,        &#39;database&#39;: &#39;dbtest&#39;,        &#39;user&#39;: &#39;root&#39;,        &#39;password&#39;: &#39;&#39;,        &#39;prefix&#39;: &#39;&#39;    &#125;&#125;db = DatabaseManager(config)Model.set_connection_resolver(db)class Driver(Model):    __table__ = &#39;driver&#39;    __timestamps__ = False    passdef ins_driver(thread_name,nums):    logger.info(&#39;开启线程%s&#39; % thread_name)    for _ in range(nums):        lng = &#39;%.5f&#39; % random.uniform(73.66, 135.05)        lat = &#39;%.5f&#39; % random.uniform(3.86, 53.55)        driver = Driver()        driver.lng = lng        driver.lat = lat        driver.save()thread_nums = 10for i in range(thread_nums):    t = threading.Thread(target=ins_driver, args=(i, 400000))    t.start()</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4033700-dda526bdfcc5c759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>以上脚本创建10个线程，10个线程插入4万条数据。耗费150.18s执行完,总共插入40万条数据</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>测试环境</li></ul><p>系统：mac os</p><p>内存：16G</p><p>cpu: intel core i5</p><p>硬盘: 500g 固态硬盘</p><p>测试下查找距离(134.38753,18.56734)这个坐标点最近的10个司机</p><pre><code class="sql">select *,`getDistance`(134.38753,18.56734,`lng`,`lat`) as dis from driver ORDER BY dis limit 10</code></pre><ul><li>耗时：18.0s</li><li>explain:全表扫描</li></ul><p>我测试了从1万到10万间隔1万和从10万到90万每间隔10万测试的结果变化</p><p><img src="http://upload-images.jianshu.io/upload_images/4033700-c40f60c1ef7b3f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>此方案在数据量达到3万条查询耗时就会超过1秒</li><li>大约每增加1万条就会增加0.4秒的耗时</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地理位置geo处理之mongodb geo 索引</title>
      <link href="2017/12/01/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E5%A4%84%E7%90%86%E4%B9%8Bmongodb/"/>
      <url>2017/12/01/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E5%A4%84%E7%90%86%E4%B9%8Bmongodb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前越来越多的业务都会基于LBS，附近的人，外卖位置，附近商家等等，现就讨论离我最近这一业务场景的解决方案。</p></blockquote><p>目前已知解决方案有:</p><ul><li>mysql 自定义函数计算</li><li>mysql geo索引</li><li>mongodb geo索引</li><li>postgresql PostGis索引</li><li>redis geo</li><li>ElasticSearch</li></ul><p>本文测试下mongodb geo索引 函数运算的性能</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><pre><code class="sql">db.driver.createIndex(&#123;loc: &quot;2dsphere&quot;&#125;)</code></pre><h2 id="创建数据python脚本"><a href="#创建数据python脚本" class="headerlink" title="创建数据python脚本"></a>创建数据python脚本</h2><pre><code class="python"># coding=utf-8from pymongo import MongoClientimport loggingimport randomimport threading&quot;&quot;&quot; 中国的经纬度范围 纬度3.86~53.55，经度73.66~135.05。大概0.00001度差距1米 &quot;&quot;&quot;# 创建 日志 对象logger = logging.getLogger()handler = logging.StreamHandler()formatter = logging.Formatter(    &#39;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&#39;)handler.setFormatter(formatter)logger.addHandler(handler)logger.setLevel(logging.DEBUG)# Connect to the mongodb databasemongoconn = MongoClient(&#39;127.0.0.1&#39;, 27017)mdb = mongoconn.geo_analysisdriver_collection = mdb.driverdef ins_driver(thread_name, nums):    logger.info(&#39;开启线程%s&#39; % thread_name)    for i in range(nums):        lng = &#39;%.5f&#39; % random.uniform(73.66, 135.05)        lat = &#39;%.5f&#39; % random.uniform(3.86, 53.55)        logging.debug(&#39;插入记录:%s&#39; % i)        driver_collection.insert_one(&#123;            &quot;loc&quot;:[                float(lng),                float(lat)            ]        &#125;)thread_nums = 10for i in range(thread_nums):    t = threading.Thread(target=ins_driver, args=(i, 40000))    t.start()</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4033700-dda526bdfcc5c759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>以上脚本创建10个线程，10个线程插入4万条数据。耗费52.43s执行完,总共插入40万条数据</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>测试环境</li></ul><p>系统：mac os</p><p>内存：16G</p><p>cpu: intel core i5</p><p>硬盘: 500g 固态硬盘</p><p>测试下查找距离(134.38753,18.56734)附近20公里的司机</p><pre><code class="js">db.runCommand(&#123;geoNear:&#39;driver&#39;, near:[134.38753,18.56734], spherical:true, maxDistance:20000/6378000, distanceMultiplier:6378000&#125;);</code></pre><ul><li>耗时：0.001s</li><li>explain:使用索引</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员代码下的许豪杰(技术篇)</title>
      <link href="2017/08/05/python/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%A3%E7%A0%81%E4%B8%8B%E7%9A%84%E8%AE%B8%E8%B1%AA%E6%9D%B0-%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
      <url>2017/08/05/python/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%A3%E7%A0%81%E4%B8%8B%E7%9A%84%E8%AE%B8%E8%B1%AA%E6%9D%B0-%E6%8A%80%E6%9C%AF%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接上篇，这一篇将从技术层面讲讲是如何实现的。阅读本文您将会了解如何用python爬取微博的评论以及如何用python word_cloud库进行数据可视化。</p></blockquote><p>上一篇:<a href="http://www.jianshu.com/p/ab49113c1fda">程序员代码下的许豪杰</a></p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>打开微博pc m站并找到许豪杰该条微博地址:<a href="https://m.weibo.cn/status/4132385564040383">https://m.weibo.cn/status/4132385564040383</a></p><p><strong>为什么要用m站地址？因为m站可以直接抓取到api json数据,而pc站虽然也有api返回的是html,相比而言选取m站会省去很多麻烦</strong></p><p>打开该页面，并且用chrome 的检查工具 查看network，可以获取到评论的api地址。</p><p><img src="http://upload-images.jianshu.io/upload_images/4033700-382e5a613595bc1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="chrome查看"></p><h2 id="数据抓取"><a href="#数据抓取" class="headerlink" title="数据抓取"></a>数据抓取</h2><p>首先观察api返回</p><p><img src="http://upload-images.jianshu.io/upload_images/4033700-f2aa3ddad169fe31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>从返回地址上可以看到可以通过参数page 改变请求的页码,并且每页都回返回总条数和总页码数。这里我决定采用<strong>多线程来抓去</strong>(其实数据量不大,也可以单线程跑)。</p><h3 id="其中在爬取数据的时候会面临几个问题："><a href="#其中在爬取数据的时候会面临几个问题：" class="headerlink" title="其中在爬取数据的时候会面临几个问题："></a>其中在爬取数据的时候会面临几个问题：</h3><p><strong>1.存储选择</strong></p><p>我这里选用了MongoDB作为数据存储，因为api通常返回的是json数据而json结构和MongoDB的存储方式可以结合的很默契，不需要经过任何处理可以直接的进行插入。</p><p><strong>2.防爬虫</strong></p><p>很多网站可能会做一些防爬虫的处理，面对同一个请求ip的短时间的高频率请求会进行服务隔断(直接告诉你服务不可用)，这个时候可以去网上找一些代理进行请求。</p><p><strong>3.多线程的任务分配</strong></p><p>采用多线程爬取你当然不能让多个线程去爬取同样的链接做别人已经做过的事情，那样多线程毫无意义。所以你需要制定一套规则，让不同线程爬取不同的链接。</p><pre><code class="python"># coding=utf-8from __future__ import divisionfrom pymongo import MongoClientimport requestsimport sysimport reimport randomimport timeimport loggingimport threadingimport jsonfrom os import pathimport math# 爬取微博评论# m站微博地址weibo_url = &#39;https://m.weibo.cn/status/4132385564040383&#39; thread_nums = 5  #线程数#代理地址proxies = &#123;  &quot;http&quot;: &quot;http://171.92.4.67:9000&quot;,  &quot;http&quot;: &quot;http://163.125.222.240:8118&quot;,  &quot;http&quot;: &quot;http://121.232.145.251:9000&quot;,  &quot;http&quot;: &quot;http://121.232.147.247:9000&quot;,&#125;# 创建 日志 对象logger = logging.getLogger()handler = logging.StreamHandler()formatter = logging.Formatter(    &#39;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&#39;)handler.setFormatter(formatter)logger.addHandler(handler)logger.setLevel(logging.DEBUG)mongoconn = MongoClient(&#39;127.0.0.1&#39;, 27017)mdb = mongoconn.data_analysisdas_collection = mdb.weiboweiboid_reobj = re.match(r&#39;.*status/(\d+)&#39;, weibo_url)weibo_id = weiboid_reobj.group(1)def scrapy_comments(weibo_id, page):    weibo_comment_url = &#39;https://m.weibo.cn/api/comments/show?id=%s&amp;page=%d&#39; % (        weibo_id, page)    res = requests.get(weibo_comment_url)    res_obj = json.loads(res.content)    return res_objdef import_comments(threadName, weibo_id, page_start, page_end):    logger.info(&#39;开始线程:%s&#39; % threadName)    for page in range(page_start, page_end + 1):        logging.info(&#39;读取第%s页&#39; % page)        time.sleep(1)        # continue        try:            res_obj = scrapy_comments(weibo_id, page)            logging.info(&#39;该页有%s条记录&#39; % len(res_obj[&#39;data&#39;]))        except:            logging.error(&#39;读取%s页时发生错误&#39; % page)            continue        if res_obj[&#39;ok&#39;] == 1:            comments = res_obj[&#39;data&#39;]            for comment in comments:                comment_text = re.sub(                    r&#39;&lt;/?\w+[^&gt;]*&gt;&#39;, &#39;&#39;, comment[&#39;text&#39;]).encode(&#39;utf-8&#39;)                if re.search(r&#39;回复@.*:&#39;, comment_text):                    # 过滤掉回复别人的评论                    continue                comment[&#39;text&#39;] = comment_text                comment[&#39;weibo_id&#39;] = weibo_id                logging.info(&#39;读取评论:%s&#39; % comment[&#39;id&#39;])                try:                    if das_collection.find_one(&#123;&#39;id&#39;: comment[&#39;id&#39;]&#125;):                        logging.info(&#39;在mongodb中存在&#39;)                    else:                        logging.info(&#39;插入记录:%s&#39; % comment[&#39;id&#39;])                        das_collection.insert_one(comment)                except:                    logging.error(&#39;mongodb发生错误&#39;)        else:            logging.error(&#39;读取第%s页时发生错误&#39; % page)    logging.info(&#39;线程%s结束&#39; % threadName)    # res_obj = scrapy_comments(weibo_id, page)if __name__ == &#39;__main__&#39;:    # 分配不同链接到不同的线程上去    res_obj = scrapy_comments(weibo_id, 1)    if res_obj[&#39;ok&#39;] == 1:        total_number = res_obj[&#39;total_number&#39;]        logging.info(&#39;该条微博有:%s条评论&#39; % total_number)        max_page = res_obj[&#39;max&#39;]        page_nums = math.ceil(max_page / thread_nums)    else:        raise    # print max_page    # print page_nums    for i in range(1, thread_nums + 1):        if i &lt; thread_nums:            page_end = page_nums * i        else:            page_end = max_page        page_start = (i - 1) * page_nums + 1        t = threading.Thread(target=import_comments, args=(            i, weibo_id, int(page_start), int(page_end)))        t.start()</code></pre><h2 id="数据整理可视化-data-visualization"><a href="#数据整理可视化-data-visualization" class="headerlink" title="数据整理可视化(data visualization)"></a>数据整理可视化(data visualization)</h2><p>运行脚本完毕，我的MongoDB得到了2万多条评论数据，接下来要做的事是对这部分数据进行提取、清洗、结构化等操作。这里顺便说明一下python 数据分析的 大致基本流程。</p><p><strong>1.与外界进行交互</strong><br>这个过程包括数据的获取、读取。不管是从网络资源上爬取、还是从现有资源(各样的文件如文本、excel、数据库存储对象)</p><p><strong>2.准备工作</strong><br>对数据进行清洗(cleaning)、修整(munging)、整合(combining)、规范化(normalizing)、重塑(reshaping)、切片(slicing)和切块(dicing)</p><p><strong>3.转换</strong><br>对数据集做一些数学和统计运算产生新的数据集</p><p><strong>4.建模和计算</strong><br>将数据跟统计模型、机器学习算法或其他计算工具联系起来</p><p><strong>5.展示</strong><br>创建交互式的或静态的图片或文字摘要</p><p>下面我们来进行2、3及5的工作:</p><pre><code class="python"># coding=utf-8import sysfrom pymongo import MongoClientimport random# 分词库# from snownlp import SnowNLPimport jiebaimport unioutfrom collections import Counter, OrderedDict# 词语云 文本统计可视化库from wordcloud import WordCloudmongoconn = MongoClient(&#39;127.0.0.1&#39;, 27017)mdb = mongoconn.data_analysisdas_collection = mdb.weibototal_counts = das_collection.find().count()# random_int = random.randint(0, total_counts - 1)docs = das_collection.find()print docs.count()words_counts = &#123;&#125;for doc in docs:    print doc    comment_text = doc[&#39;text&#39;].encode(&#39;utf-8&#39;)    if len(comment_text) == 0:        continue    words = jieba.cut(comment_text)    for word in words:        if word not in words_counts:            words_counts[word] = 1        else:            words_counts[word] += 1for word in words_counts.keys():    if words_counts[word] &lt; 2 or len(word) &lt; 2:        del words_counts[word]# print words_counts.items()#注意要让中文不乱码要指定中文字体#fit_words 接收参数是dict  eg:&#123;&#39;你&#39;:333,&#39;好&#39;:23&#125;  文字:出现次数wordcloud = WordCloud(    font_path=&#39;/Users/cwp/font/msyh.ttf&#39;,    background_color=&#39;white&#39;,    width=1200,    height=1000).fit_words(words_counts)import matplotlib.pyplot as pltplt.imshow(wordcloud, interpolation=&#39;bilinear&#39;)plt.axis(&quot;off&quot;)plt.show()</code></pre><p>介绍下以上代码：<br>我们主要用到了2个工具，jieba和word_cloud。前者对中文进行分词后者图形化展示词语的出现频率。<br>众所周知，中文系的语言处理恐怕是最难的自然语言处理(NLP)的语种。就基本的分词而言都是一项比较困难的工作,(英语句子中每个单词都是有空格分开的，而中文是由单个字组成词连接成串组成句).<br>举个例子,请用“孩提”造句,”那个男孩提交完代码就下班了”。如果人工分词，可以知道”男孩”和”提交”应该是分开的2个词，<strong>但是对于机器而言，要辨别”提”应该与”男”还是”交”进行组词就很难办了</strong>。要想机器能够更精确的辨别这类问题，就需要让机器不停学习，让它知道这种情况该这么分而不是那么分。研究中文自然语言处理将是一个长久而大的工程，对于分析数据(我们不是要研究自然语言处理😏)，这里就借助jieba这个库进行工作了.</p><p>对于word_cloud,图形化文本统计，网上有不少的博文都贴了代码，但我想说的是我不了解它们是不是真的运行出了结果。因为fit_words 这个函数接收的是dict而不是list，官方文档和函数doc其实写错了,在github上有披露。</p><p>最后得到结果:</p><p><img src="http://upload-images.jianshu.io/upload_images/4033700-dfbee241840ea23e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p><h2 id="一些用到的工具"><a href="#一些用到的工具" class="headerlink" title="一些用到的工具"></a>一些用到的工具</h2><p>1.<a href="https://github.com/amueller/word_cloud">word_cloud A little word cloud generator in Python</a></p><p>2.<a href="https://github.com/fxsjy/jieba">jieba 结巴中文分词</a></p><p>3.<a href="http://docs.python-requests.org/en/master/">Requests is the only Non-GMO HTTP library for Python, safe for human consumption.</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
