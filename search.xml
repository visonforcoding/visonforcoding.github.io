<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>反对restful</title>
      <link href="2022/06/30/%E5%8F%8D%E5%AF%B9restful/"/>
      <url>2022/06/30/%E5%8F%8D%E5%AF%B9restful/</url>
      
        <content type="html"><![CDATA[<blockquote><p>是人都会犯错，人创造的东西就会有错。勇于质疑、敢于质疑。</p></blockquote><h2 id="反对restful"><a href="#反对restful" class="headerlink" title="反对restful"></a>反对restful</h2><p>REST这个词，是<a href="https://en.wikipedia.org/wiki/Roy_Fielding" title="Roy Thomas Fielding">Roy Thomas Fielding</a>在他2000年的<a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" title="博士论文">博士论文</a>中提出的。</p><span id="more"></span><p>restful的几大概念：</p><ul><li>每一个URI代表一种资源，所以URL必须是名词。</li></ul><p>客户端通过HTTP动词<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code>，对服务器端资源进行操作，4个http 请求方式，差不多正好对应后端服务对数据的查、增、改、删。</p><p>状态码响应，100多种状态码，覆盖了绝大部分可能遇到的情况。发生错误时，不要返回 200 状态码</p><p>response 的 body直接就是数据，不要做多余的包装。</p><p>http 动词</p><pre class="language-sql" data-language="sql"><code class="language-sql">GET：   读取（<span class="token keyword">Read</span>）POST：  新建（<span class="token keyword">Create</span>）PUT：   更新（<span class="token keyword">Update</span>）PATCH： 更新（<span class="token keyword">Update</span>），通常是部分更新<span class="token keyword">DELETE</span>：删除（<span class="token keyword">Delete</span>）</code></pre><p>而下面的 URL 不是名词，所以被认为都是错误的。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## 错误</span><span class="token operator">/</span>getAllCars<span class="token operator">/</span>createNewCar<span class="token operator">/</span>deleteAllRedCars<span class="token comment">## 正确</span>GET    <span class="token operator">/</span>zoos：列出所有动物园POST   <span class="token operator">/</span>zoos：新建一个动物园GET    <span class="token operator">/</span>zoos<span class="token operator">/</span>ID：获取某个指定动物园的信息PUT    <span class="token operator">/</span>zoos<span class="token operator">/</span>ID：更新某个指定动物园的信息（提供该动物园的全部信息）PATCH  <span class="token operator">/</span>zoos<span class="token operator">/</span>ID：更新某个指定动物园的信息（提供该动物园的部分信息）<span class="token keyword">DELETE</span> <span class="token operator">/</span>zoos<span class="token operator">/</span>ID：删除某个动物园GET    <span class="token operator">/</span>zoos<span class="token operator">/</span>ID<span class="token operator">/</span>animals：列出某个指定动物园的所有动物<span class="token keyword">DELETE</span> <span class="token operator">/</span>zoos<span class="token operator">/</span>ID<span class="token operator">/</span>animals<span class="token operator">/</span>ID：删除某个指定动物园的指定动物</code></pre><p>状态码举例</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">400</span> Bad Request：服务器不理解客户端的请求，未做任何处理。<span class="token number">401</span> Unauthorized：用户未提供身份验证凭据，或者没有通过身份验证。<span class="token number">403</span> Forbidden：用户通过了身份验证，但是不具有访问资源所需的权限。<span class="token number">404</span> <span class="token operator">Not</span> Found：所请求的资源不存在，或不可用。<span class="token number">405</span> Method <span class="token operator">Not</span> Allowed：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。<span class="token number">410</span> Gone：所请求的资源已从这个地址转移，不再可用。<span class="token number">415</span> Unsupported Media <span class="token keyword">Type</span>：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。<span class="token number">422</span> Unprocessable Entity ：客户端上传的附件无法处理，导致请求失败。<span class="token number">429</span> Too Many Requests：客户端的请求次数超过限额。</code></pre><p>返回内容包含了多余的数据被认为是错误的</p><pre class="language-sql" data-language="sql"><code class="language-sql">&#123;<span class="token string">"success"</span>:<span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"data"</span>:&#123;<span class="token string">"id"</span>:<span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name"</span>:<span class="token string">"周伯通"</span>&#125; &#125; <span class="token comment">## 错误</span>&#123;<span class="token string">"id"</span>:<span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name"</span>:<span class="token string">"周伯通"</span>&#125;   <span class="token comment">## 正确</span></code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>定义不同请求类型<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code> 不停切换,前后端都需要花时间去考虑定义和类型的切换。</p><p>存在模棱两可的情况下，不知道如何定义。例如 即有对资源的新增和更新。打个比方：</p><p>一个接口即增加了商品又更新了商品品类 <em>。</em></p><p>这个时候你的URL资源如何定义？ <code>goods</code> ? <code>goodsAndgoodsCategory</code>?</p><p>是使用<code>post</code> 还是使用<code>put</code>？</p><p>在一些基于URL的请求监控统计或限流应用中，restful的模式反而会造成额外的问题</p><pre class="language-sql" data-language="sql"><code class="language-sql">GET    <span class="token operator">/</span>zoos：列出所有动物园POST   <span class="token operator">/</span>zoos：新建一个动物园</code></pre><p>被认为是2个接口，在监控应用中可能会被统计到1个url去。</p><p>并且 带资源id的URL eg:<code>/foo/1</code>会被监控认为是多个不同的url</p><p>发生错误时，不要返回 200 状态码.就算是资源不存在会被认为<code>404</code></p><p>打个比方，某个商品不存在或已下架，这个时候按restful的规范，你需要将http状态码设置为 404.</p><p>而我们通常认为页面不存在或URL本身不存在才是404.</p><p>另一个问题是，就算http状态码有100多个，但是也可能不满足多变的业务需求。</p><h2 id="讨伐声"><a href="#讨伐声" class="headerlink" title="讨伐声"></a>讨伐声</h2><p>在国外也有许多人也反对restful，搜一下就可以看到。</p><ol><li><p>&#x20;<a href="https://vmrcre.org/web/scribe/home/-/blogs/why-rest-sucks" title="Why REST Sucks - Troy A. Griffitts - Virtual Manuscript Room Collaborative Research Environment (VMR CRE)">Why REST Sucks - Troy A. Griffitts - Virtual Manuscript Room Collaborative Research Environment (VMR CRE)</a></p></li><li><p><a href="https://mmikowski.github.io/the_lie/" title="the restful is big lie">the restful is big lie</a></p></li></ol><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/image_k1Duew8lNl.png" alt=""></p><h2 id="意义在哪"><a href="#意义在哪" class="headerlink" title="意义在哪"></a>意义在哪</h2><p>restful 作者 HTTP协议（1.0版和1.1版）的主要设计者，可以看到restful与http网络协议细节密切相关。我们实际的业务编码都是在解决业务问题，我们其实希望越少关心底层技术细节越好。理想条件下，人人都不用关心底层技术实现，那这种技术可以作为普通工具为广大人群所使用。</p><p>它提供了一套规范，而且仅仅是规范。却似乎对于应用实践没有其他方面提升，它不能提供便利和性能提升。</p><p>某些规范是为了在混乱中建立秩序，而有些规范看起来是在建立强权。就拿ROI来看：</p><p>&#x20;  我们认为PHP PSR 这种编码规范与之对比，客观计算：假设投入成本为C 、收益回报为E、风险为R</p><p>&#x20;    PSR ： C是1、E是2、R是0    ，低投入有回报无风险。</p><p>&#x20;   RESTFUL： C是3、E是0、R是2 ，较高投入无回报有风险。</p><p>如果它只约束你，却不告诉你能有什么好处，还在实际当中带来了负面问题。那我们需要它干什么？</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ol><li><p>不要完全遵循restful实践,不要过渡关注。</p></li><li><p>简单使用GET 及 POST 两种请求方式即可。</p></li><li><p>URL 不要带资源ID，强烈不推荐<code>/orders/123123121</code>  这种形式。</p></li><li><p>URL 应该唯一，即使GET和POST不同，URL也不要相同。</p></li><li><p>POST 建议走 playload <code>application/json</code> 形式，从日志中拿出请求数据拼装调试更加方便，做objectMapper映射也很自然。</p></li><li><p>URL统一小写，使用中划线分隔， 例如：<a href="https://restfulapi.cn/page/restful-api-request" title="/page/restful-api-request">/page/restful-api-request</a></p></li><li><p>返回包体 封装状态码，并且异常错误与正常状态格式保持结构保持一致。除开某些特定情况建议都走200状态码，特定情况 eg：服务器限流熔断操作。</p></li><li><p>请求及返回字段，统一使用小写加下划线。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://restfulapi.cn/page/restful-api-request" title="https://restfulapi.cn/page/restful-api-request">https://restfulapi.cn/page/restful-api-request</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>周五该不该发布</title>
      <link href="2022/05/29/%E5%91%A8%E4%BA%94%E8%AF%A5%E4%B8%8D%E8%AF%A5%E5%8F%91%E5%B8%83/"/>
      <url>2022/05/29/%E5%91%A8%E4%BA%94%E8%AF%A5%E4%B8%8D%E8%AF%A5%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 在很早的时候，也就是刚毕业那会。看过一本书，李智慧的《大型网站技术架构》。其中讲到了，一般会选择周四进行发布，这样周五还有时间去处理发布可能产生的问题。如果选择周五发布，那工程师们不得不要加班进行处理。</p></blockquote><p><strong>加班处理意味着什么？</strong></p><p>当然线上出问题，必须第一时间处理。这是原则。但是周末处理意味着效率会打折扣。</p><ol><li>工程师的原计划陪家人或处理个人事情需要先搁置,心理上的负担会导致工程师不能100%投入。</li><li>相关依赖人员，运营、产品或者需要领导总监审批处理的事情，人员协调难度会加大。</li></ol><p>但是如果业务需求周五要发布，那到底时发还是不发呢？有没有较为有说服力的原则来指导我们做抉择呢？看了一篇博文就此写的非常好，并且非常有人文气质。</p><p>原文：<a href="https://rickhw.github.io/2020/10/18/DevOps/Deploy-on-Friday-or-Not/">Deploy-on-Friday-or-Not/</a></p><p>我引用一些值得思考的观点。</p><h2 id="业界的不同观点"><a href="#业界的不同观点" class="headerlink" title="业界的不同观点"></a>业界的不同观点</h2><p><strong>赞成的</strong></p><blockquote><p> 一個團隊當要能夠在任何時間部署，這跟哪一天沒關係，理由是敏捷團隊應該如何、身為一個開發者應該如何 …. (省略3000 字)</p></blockquote><p><strong>反对的</strong></p><blockquote><p>大多會以風險角度考慮事情，普遍認為時間會影響之後的生活或者士氣 … (省略 30000 字).</p></blockquote><h2 id="回到主题定义"><a href="#回到主题定义" class="headerlink" title="回到主题定义"></a>回到主题定义</h2><p>问题其实可以换一个角度。<br>从<code>该与不该</code>到<code>能与不能</code><br>于是，其实可以裂变成2个问题。</p><ul><li>周五能不能发布？</li><li>周五该不该发布?<br>这2个问题，前者<code>能与不能</code> 是能力问题<code>Skills / Ability</code>。<br><code>该与不该</code>似乎是时空背景 (Timeline)、政策原则 (Policy) 和态度 (Attitude) 有关系。</li></ul><h2 id="层次问题"><a href="#层次问题" class="headerlink" title="层次问题"></a>层次问题</h2><h3 id="骑士精神-侠之大者"><a href="#骑士精神-侠之大者" class="headerlink" title="骑士精神/侠之大者"></a>骑士精神/侠之大者</h3><p>‎如果你所处的环境是’应该’在星期五也能部署，那么团队就要具备’能够’在星期五部署承担风险的能力 （Skills / Ability） 。 如果你处在的环境觉得’不应该’，那么身为一个专业的工作者，面子很重要，你也要让自己能够有在任何时间部署的能力 （Skills）。</p><p>专业工作者，要具备 骑士精神 ，也就是</p><p><strong>你应该，所以你能够</strong></p><p><strong>你的团队应该能随时部署，所以即使是星期五团队也能够部署。</strong></p><p>类似西方或日本的骑士精神或武士道精神。在我们这里，可以认为是武侠精神，就像郭靖的<code>侠之大者</code></p><p>所以，最后的原是什么？</p><p><strong>尽量 （80%） 不在星期五部署，但需要时 （20%） 团队也不会担心，因为团队有能力驾驭自己的系统。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO模型与并发</title>
      <link href="2022/05/15/IO%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
      <url>2022/05/15/IO%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>在谈论IO模型之前必须要先了解内核态和用户态<code>Kernel Mode</code>和<code>User Mode</code></p><h2 id="内核态与用户态"><a href="#内核态与用户态" class="headerlink" title="内核态与用户态"></a>内核态与用户态</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220515222622.png" alt=""></p><p>其实简单的讲，<code>Kernel Mode</code>和<code>User Mode</code>的区别核心在于系统资源(System Resources)的访问。System Resources也就是CPU、内存、磁盘文件、网络。</p><p><strong>Kernel Mode</strong></p><ul><li>能直接对系统资源进行访问</li><li>内核态一旦出错，可能整个系统都会崩溃</li><li>内核态下所有进程共享一个虚拟地址空间</li></ul><p><strong>User Mode</strong></p><ul><li>不能直接对系统资源进行访问,要访问系统资源必须通过<code>System Call</code>切换到内核态</li><li>中断发生，顶多这个进程的崩溃</li><li>用户态下，所有进程都隔离在不同的虚拟地址空间</li><li>一个程序在运行时，大部分时间都时处于用户态，只有需要内核提供的服务时才会切换到内核态。</li></ul><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220515224906.png" alt=""></p><p>举个例子：</p><p>假设我们需要读取一个日志文件：</p><ol><li>由于用户态下不能读取系统资源，因此程序需要切换到内核态。</li><li>当在内核态下读取到了磁盘文件到内存当中，这个时候就可以切换到用户态下进行操作。</li></ol><h2 id="BIO-阻塞IO"><a href="#BIO-阻塞IO" class="headerlink" title="BIO 阻塞IO"></a>BIO 阻塞IO</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220515230041.png" alt=""></p><p>应用程序在内核处理完成之前都会一直处于阻塞状态。</p><h2 id="NIO-非阻塞式IO"><a href="#NIO-非阻塞式IO" class="headerlink" title="NIO 非阻塞式IO"></a>NIO 非阻塞式IO</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220515230801.png" alt=""></p><p>应用程序会不间断地询问内核是否准备好资源。</p><h2 id="I-O-Multiplexing-IO多路复用"><a href="#I-O-Multiplexing-IO多路复用" class="headerlink" title="I/O Multiplexing IO多路复用"></a>I/O Multiplexing IO多路复用</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220515232225.png" alt=""></p><p><code>select</code> 能够在处理多个IO在非常短的时间内以极低的开销。</p><h2 id="Event-Driver-IO-事件驱动IO"><a href="#Event-Driver-IO-事件驱动IO" class="headerlink" title="Event-Driver IO 事件驱动IO"></a>Event-Driver IO 事件驱动IO</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220515232648.png" alt=""></p><p>首先注册一个回调函数，当内核准备好资源后就调用这个回调函数。</p><h2 id="AIO-异步IO"><a href="#AIO-异步IO" class="headerlink" title="AIO 异步IO"></a>AIO 异步IO</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220515232909.png" alt=""></p><p>理论上，只有这种才是真正异步IO。上述的4种，数据从内核态到用户态都是同步操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://rickhw.github.io/2019/02/27/ComputerScience/IO-Models/">一位台湾博主的博客讲的IO模型</a></li><li><a href="https://developpaper.com/five-io-models-of-unix/">Five io mode</a></li><li><a href="https://www.geeksforgeeks.org/difference-between-user-mode-and-kernel-mode/">Difference Between User Mode and Kernel Mode</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php in feature</title>
      <link href="2022/05/08/php-in-feature/"/>
      <url>2022/05/08/php-in-feature/</url>
      
        <content type="html"><![CDATA[<p>当你不在只是需要简单的把数据库当中的数据展示到web页面的时候，PHP变得非常的捉襟见肘了。不过PHP生态还是有很多非常努力的贡献者或联盟，来让PHP的开发效率或性能变得更好。本文就是来收录这些PHP生态的项目。</p><span id="more"></span><h2 id="thephpleague"><a href="#thephpleague" class="headerlink" title="thephpleague"></a>thephpleague</h2><p><strong>官网</strong> <a href="https://thephpleague.com/">https://thephpleague.com/</a></p><blockquote><p>The League of Extraordinary Packages is a group of developers who have banded together to build solid, well tested PHP packages using modern coding standards.</p></blockquote><h2 id="reactphp"><a href="#reactphp" class="headerlink" title="reactphp"></a>reactphp</h2><p><strong>官网</strong> <a href="https://reactphp.org/">https://reactphp.org/</a></p><p>这可能是纯php生态(区别c扩展)对php影响最大的项目了。</p><blockquote><p>Its event-driven architecture makes it a perfect fit for efficient network servers and clients handling hundreds or thousands of concurrent connections, long-running applications and many other forms of cooperative multitasking with non-blocking I/O operations.<br>事件驱动架构让它可以完美支持成百上千链接的网络服务、长运行、多任务和其他的非阻塞IO的操作应用。</p></blockquote><blockquote><p>The event loop is based on the reactor pattern (hence the name) and strongly inspired by libraries such as EventMachine (Ruby), Twisted (Python) and Node.js (V8).<br>很多的灵感来自于，<code>ruby</code>的EventMachine、<code>python</code>的Twisted、<code>node.js</code>的v8.<br>再来看看官网上对自己的评价：</p></blockquote><ul><li><strong>Production ready</strong> and battle-tested.  预备生产和经过战斗测试</li><li>*<em>Rock-solid *</em> with stable long-term support (LTS) releases. 坚如磐石并长期稳定支持版本</li><li><strong>Requires no extensions</strong> and runs on any platform - no excuses! 不依赖PHP扩展</li><li>Takes advantage of <strong>optional extensions</strong> to get better performance when available. 在必要的时候有可选扩展能提高性能</li><li><strong>Supports latest version of PHP 8+ and PHP 7+</strong> for best performance and support.  支持最新的版本</li><li>Still supports <strong>legacy PHP 5.3</strong>+ and HHVM for maximum compatibility. 历史的php5.3依然支持</li><li>*<em>Well designed *</em>and reusable components. 良好的设计和组件可复用化</li><li><strong>Decoupled parts</strong> so they can be replaced by alternate implementations. 组件可分离替换</li><li><strong>Carefully tested</strong> (unit &amp; functional).  谨慎的测试</li><li>Promotes** standard PSRs** where possible for maximum interoperability.  遵守PSR</li><li>Aims to be <strong>technology neutra</strong>l, so you can use your preferred application stack  技术中立</li><li>Small <strong>core team of professionals</strong> supported by *<em>large network *</em>of outside contributors.  小规模的核心技术团队和大规模的网络贡献者。保质也保量。</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>问题</strong> 我们的线上redis 统一都设置了timeout,只要client在timeout内都处于idle状态就会被close。 这是一种保护connection资源的方式，无可厚非。我们有许多的常驻进程需要处理异步类的任务。有基于<code>while true</code>的定时轮询，只要轮询周期小于timeout则都不会出现idle超时而被close的情况。</p><blockquote><p>if the client is idle for more than the specified number of seconds, the client connection will be closed.<br><a href="https://redis.io/docs/reference/clients/#client-timeouts">https://redis.io/docs/reference/clients/#client-timeouts</a></p></blockquote><p>另外一种情况是我们有许多是订阅<code>rabbitmq</code>的进程。只要在timeout内都没有消息从mq过来，则redis client实例对象的连接将一直处于idle状态而被close。等到再来消息，则原先的连接已经时处于被断开状态，而导致业务代码在读取redis数据时发生<code>ConnectionException</code>。</p><p>其实要解决这2个问题应该有2个办法。</p><ol><li>每次的消息消费都使用新的redis client实例，即依赖注入的redis对象不能时单例的。每次都是重新进行连接操作。</li><li>在timeout内定时向server发送heartbeat，告诉它我还活着，别把老子丢下。</li></ol><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220508204048.png" alt="donleaveme"></p><p>首先第一个解决办法，每次都是重连一定会有性能损耗，而且如果连接不注意close会引发连接资源耗尽问题。<br>第二个解决办法应该是最合理的，但问题是对于PHP这种极少进行异步操作的语言来说。这个简单的需求都变得非常不简单。因为如果时定时轮询去发送heartbeat使用<code>while true</code>，则进程会阻塞在这里，根本不能再做其他的操作了。对于java而言，重新打开一个线程去轮询发送心跳就是了，根本不是个问题。<br>而对于PHP来说，可太难了，线程扩展已经废弃。多进程之间又不能共享对象。<br>我们需要<code>non-blocking I/O operations</code>，没错<code>reactphp</code>说它可以。<br>我试了下,似乎没成功。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InputInterface</span> <span class="token variable">$input</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">OutputInterface</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$climate</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CLImate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">getmypid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$climate</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"run in <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$pid</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">redis</span><span class="token punctuation">;</span>    <span class="token variable">$timer</span> <span class="token operator">=</span> <span class="token class-name static-context">Loop</span><span class="token operator">::</span><span class="token function">addPeriodicTimer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">redisCheckHealth</span><span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">logger</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"heartbeat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$time2</span> <span class="token operator">=</span> <span class="token class-name static-context">Loop</span><span class="token operator">::</span><span class="token function">addTimer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">redisCheckHealth</span><span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$cmdSet</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-></span><span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'get'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'timeout'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$cmdSetReply</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-></span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token variable">$cmdSet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$cmdSetReply</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name static-context">Loop</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name static-context">Command</span><span class="token operator">::</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @param Client $redis */</span><span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">redisCheckHealth</span><span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token operator">-></span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"hello"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConnectionException</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>发现2个<code>time</code>是互相阻塞的，也许是我姿势不对。但是它的原理似乎官方并没有说清楚。到底时基于什么并发模型来实现的?</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘阿里Java开发手册聊聊PHP的ORM框架</title>
      <link href="2022/04/24/%E6%91%98Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E8%81%8A%E8%81%8APHP%E7%9A%84ORM%E6%A1%86%E6%9E%B6/"/>
      <url>2022/04/24/%E6%91%98Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E8%81%8A%E8%81%8APHP%E7%9A%84ORM%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>任何事情都要有行为准则,否则按照个人直觉做事必定酿成祸端</p></blockquote><p>阿里有一本小册叫做&lt;&lt;阿里JAVA开发手册&gt;&gt;,我们来看看其中关于数据库规范的几条。</p><ol><li>超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。</li><li>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</li><li>SQL 语句中表的别名前加 as，并且以 t1、t2、t3、…的顺序依次命名。</li><li>in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在1000 个之内。</li><li>表必备三字段：id，create_time，update_time。</li><li>在数据库中不能使用物理删除操作，要使用逻辑删除。</li><li>不得使用外键与级联，一切外键概念必须在应用层解决。</li></ol><p>这几条是我想单独拿出来说的，本文主要讲ORM框架，因此我只说1和7.</p><span id="more"></span><p>以此为理念我们应当<em>不使用外键</em>和<em>少使用join,甚至默认走多次查询来避免join</em>。为此我们来看看PHP生态的ORM框架哪种比较适合使用。<br>我这里对比了ORM框架。</p><ul><li>Laravel Eloquent</li><li>CakePHP ORM</li><li>Cycle ORM</li><li>Doctrine</li><li>Atlas.Orm<br>更多ORM框架可从<a href="https://github.com/ziadoz/awesome-php#database">awesome-php</a> 找到。</li></ul><h2 id="Laravel-Eloquent"><a href="#Laravel-Eloquent" class="headerlink" title="Laravel Eloquent"></a>Laravel Eloquent</h2><p><code>Laravel</code>可能是PHP生态最流行的框架了，但是我本人认为Laravel设计的非常差。简单举几个例子：</p><ul><li>route必须逐个在配置文件定义，非常麻烦。不能用注解在控制器方法上定义。</li><li><code>lumen</code>的路由必须带<code>/api</code>这样的前缀,很扯。</li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span>                <span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'votes'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;>'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'='</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'subscribed'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;>'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p> 这样的查询API不简洁,二维数组的形式很容易出错。并且本质上，<br> <code>Laravel Eloquent</code>是<code>ActiveRecord</code>，并没有<code>DataMapper</code>。还不太好说它是ORM.</p><p> 更多的对Laravel Eloquent的对比可以在<a href="https://github.com/cycle/docs/issues/3">Add article with comparison to other ORMs</a> 里找的到。</p><h2 id="Cycle-ORM"><a href="#Cycle-ORM" class="headerlink" title="Cycle ORM"></a>Cycle ORM</h2><p>前面提到的<a href="https://github.com/cycle/docs/issues/3">Add article with comparison to other ORMs</a>这篇文章,对比了doctrine、Cycle ORM和Eloquent。看起来它比另外两个都要优秀。而且它的官网看起来确实很舒服,看起来很有想做好它的意图。我个人还是比较期待和看好。但是我初步测试了下,Cycle还是要求php8+,鉴于PHP8还没普及应用在PRD我还是直接略过了。</p><h2 id="Doctrine"><a href="#Doctrine" class="headerlink" title="Doctrine"></a>Doctrine</h2><p><code>Doctrine</code>是我一度很喜欢的框架,因为它是真正意义上的ORM。并且很多特性与Java JPA很接近，包括<code>doctrine/annotations</code>对PHP生态的影响非常深远。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220424105819.png" alt=""></p><p>许多知名框架都有在使用。</p><p><code>doctrine/annotations</code>使得很多配置的定义变得很简单，阅读很方便。</p><p>并且doctrine的增、删、改的<code>ActiveRecord</code> API也设计的非常舒服。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$newProductName</span> <span class="token operator">=</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$product</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$product</span><span class="token operator">-></span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token variable">$newProductName</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$entityManager</span><span class="token operator">-></span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$entityManager</span><span class="token operator">-></span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Created Product with ID "</span> <span class="token operator">.</span> <span class="token variable">$product</span><span class="token operator">-></span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span></code></pre><p>但是在查询这块，尤其你想获得关联关系的嵌套数据结构上会变得很复杂。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// $em is the EntityManager</span><span class="token variable">$marketId</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$symbol</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"AAPL"</span><span class="token punctuation">;</span><span class="token variable">$market</span> <span class="token operator">=</span> <span class="token variable">$em</span><span class="token operator">-></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Doctrine\Tests\Models\StockExchange\Market"</span><span class="token punctuation">,</span> <span class="token variable">$marketId</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Access the stocks by symbol now:</span><span class="token variable">$stock</span> <span class="token operator">=</span> <span class="token variable">$market</span><span class="token operator">-></span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token variable">$symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$stock</span><span class="token operator">-></span><span class="token function">getSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will print "AAPL"</span></span></code></pre><p>它可以做到关联表的数据对象嵌套,但是问题在于它需要定义外键。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">/**     * @OneToMany(targetEntity="Stock", mappedBy="market", indexBy="symbol")     * @var Stock[]     */</span>    <span class="token keyword">private</span> <span class="token variable">$stocks</span><span class="token punctuation">;</span></code></pre><p>这与我们上面说的<code>不使用外键</code>原则相悖。</p><h2 id="CakePHP-ORM"><a href="#CakePHP-ORM" class="headerlink" title="CakePHP ORM"></a>CakePHP ORM</h2><p><code>cakephp</code>是我认为在<code>ActiveRecord</code>API中做的最好的一个框架。</p><p>但是它的ORM方面并没有doctrine那么吸引人。另一个我不想使用的原因是，它查询出的对象entity,并不是<code>POJO</code>或者说<code>POPO</code>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> someProperty<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSomeProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> someProperty<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSomeProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> someProperty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>someProperty <span class="token operator">=</span> someProperty<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>你不能很好的利用IDE来获取对象的属性定义或使用<code>getter</code>方法获取。你还是需要打开你的mysql客户端GUI程序来查看表的字段定义。这在编程的时候真的很不方便，很不酷。</p><h2 id="Atlas-Orm"><a href="#Atlas-Orm" class="headerlink" title="Atlas.Orm"></a>Atlas.Orm</h2><p><code>Atlas.Orm</code>非常不知名,并且官网很破败,甚至logo图都裂开了。<br>但是它比较好的一点是，在关联表嵌套数据结构方面足够简单也不需要依赖外键。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserRelationships</span> <span class="token keyword">extends</span> <span class="token class-name">MapperRelationships</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">define</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">oneToMany</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'addresses'</span><span class="token punctuation">,</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">[</span>            <span class="token string single-quoted-string">'id'</span><span class="token operator">=></span><span class="token string single-quoted-string">'user_id'</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">atlas</span><span class="token operator">-></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Model<span class="token punctuation">\</span>User<span class="token punctuation">\</span>User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'addresses'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id > '</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'age > '</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">fetchRecordSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过简单的定义和<code>with</code>方法就能得到想要的数据结构。并且走的不是join查询,正和我意。</p><p>但是,但是！</p><p>从它官网的<a href="!https://atlasphp.io/">Contra-Indications</a>也能看到。</p><blockquote><p>Atlas uses base Row, Record, and RecordSet classes, instead of plain-old PHP objects. If this were a domain modeling system, a base class would be unacceptable. Because Atlas is a persistence modeling system, base classes are less objectionable, but for some this may be undesired.</p></blockquote><p>它与cakephp一样，也没有POPO,也一样比较难受。虽然它的<code>Record</code>有通过<code>@property</code>定义字段,还是能是IDE提示属性走起来。但是它所有的返回字段的类型都是string,也没办法通过<code>getter</code>进行格式化处理。需要在查询之后遍历处理，这是比较麻烦的重复性工作。</p><h2 id="Atlas-Orm-改造"><a href="#Atlas-Orm-改造" class="headerlink" title="Atlas.Orm 改造"></a>Atlas.Orm 改造</h2><p>我强烈希望能使用<code>doctrine</code>的ORM特性和<code>Atlas</code>的<code>ActiveRecord</code>的便利。于是我希望能将两个结合起来,并且希望查询获取到的是POPO对象。</p><p>最简单的办法就是将<code>Atlas</code>的<code>fetchRecordSet</code>结果转化成doctrine的entity popo对象。</p><p>这个时候可以使用伟大的<code>Symfony</code>的组件<code>Serializer</code>。这个组件我经常用来进行array或json到popo的转换,可以想象是Java的Gson类库。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">/**    * @param $data    * @return object|array    */</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">useObject</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token class-name static-context">BaseAtlas</span><span class="token operator">::</span><span class="token function">ObjectMapper</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">entityClass</span><span class="token operator">.</span><span class="token string single-quoted-string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token class-name static-context">BaseAtlas</span><span class="token operator">::</span><span class="token function">ObjectMapper</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">entityClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * @param mixed $data    * @param string $mapper    * @return mixed    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">ObjectMapper</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$mapper</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token variable">$encoders</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">XmlEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$extractor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyInfoExtractor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">PhpDocExtractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionExtractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$normalizers</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ObjectNormalizer</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$extractor</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token keyword">new</span> <span class="token class-name">ArrayDenormalizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonSerializableNormalizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$serializer</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Serializer</span><span class="token punctuation">(</span><span class="token variable">$normalizers</span><span class="token punctuation">,</span> <span class="token variable">$encoders</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token variable">$serializer</span><span class="token operator">-></span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$mapper</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'json'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>           <span class="token class-name static-context">ObjectNormalizer</span><span class="token operator">::</span><span class="token constant">DISABLE_TYPE_ENFORCEMENT</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p>有两点需要特别注意的是我们需要解决嵌套和数组的映射问题。<br><code>ArrayDenormalizer</code>和<code>PhpDocExtractor</code>需要被用到。<br>正如网上有的人说的，<code>Serializer</code>是一个强大并复杂的组件。要用好它，需要花些时间了解。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这样，通过doctrine和atlas的配合使用，CUD使用doctrine，R使用atlas+ObjectMapper。基本解决了我的问题和一直一来坚持的几个原则。</p><ul><li><p>80%的工作在处理数据，因此需要一个非常用得习惯的<code>ActiveRecord</code>框架。</p></li><li><p>用对象少用PHP Array,把POPO用起来。</p></li><li><p>少使用join</p></li><li><p>不使用外键</p><h2 id="补充问题"><a href="#补充问题" class="headerlink" title="补充问题"></a>补充问题</h2></li><li><p>实际使用中发现<code>atlas</code> 会产生大量的依赖文件，感觉没必要。其实使用cakephp一样能达到目的。</p></li><li><p>多个ORM框架在一起使用时事务可能产生问题，建议还是使用一个ORM框架。doctrine entity只用于对象映射。封装一层通用方法，同样能进行对象CUD操作。</p></li><li><p><code>cakephp</code>没有hook在自定义日志和事件上面不好处理</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从websocket网关谈谈Java和PHP</title>
      <link href="2022/04/21/%E4%BB%8Ewebsocket%E7%BD%91%E5%85%B3%E8%B0%88%E8%B0%88Java%E5%92%8CPHP/"/>
      <url>2022/04/21/%E4%BB%8Ewebsocket%E7%BD%91%E5%85%B3%E8%B0%88%E8%B0%88Java%E5%92%8CPHP/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面的文章我们讲到了如何实现WebSocket协议，从基础的socket API进行了协议的实现。也了解了如何用更便利的eventIO编写websocket应用。我们分别用Java和php实现了基础班本和事件驱动版本的websocket协议。</p></blockquote><p>戳<a href="https://visonforcoding.xyz/2022/04/06/%E5%9F%BA%E7%A1%80-websocket%E5%8D%8F%E8%AE%AE/">基础|websocket协议</a>查看。</p><ul><li>我们通过java socket原生实现了websocket协议</li><li>我们通过<code>Ratchet</code>构建了php版本的事件驱动型websocket server。</li><li>通过<code>TooTallNate / Java-WebSocket</code>也可以构建事件驱动的websocket</li></ul><p>本文将会进行一次升级，构建通用型的websocket网关来解决公司内多场景对websocket的需求。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h3 id="扫码支付通知"><a href="#扫码支付通知" class="headerlink" title="扫码支付通知"></a>扫码支付通知</h3><p>用户扫描网页二维码,当服务端接受到微信或支付宝的支付回调之后，通过websocket通知用户网页显示支付成功页面。</p><h3 id="上传文件后台处理"><a href="#上传文件后台处理" class="headerlink" title="上传文件后台处理"></a>上传文件后台处理</h3><p>后端运营人员,要导入百万的数据进行后台处理,上传成功后页面列表显示的是后台处理中，服务端在异步进行任务处理.为了提升用户体验，每处理1个任务可以websocket通知页面进度条变更。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>公司业务规模扩大，会有越来越多的类似场景出现。抽象出需求就是<strong>耗时任务后台处理的websock通知</strong></p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220421180158.png" alt=""></p><p>cswg: 通用websocket服务网关,包含一套http服务，一套websocket服务</p><p>http服务: 接收业务调用,告知业务处理状态。并通过MQ通知到WebSocket服务下发业务消息</p><p>websocket服务:不处理具体业务逻辑，只做与客户端的消息交互</p><p>业务服务:处理具体业务,业务客户端与websocket消息交互获取任务处理过程状态</p><p>期中websocket服务应该包含2个子任务：</p><ul><li>websocket 消息交互</li><li>消费MQ消息做消息下发动作</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>websocket服务的2个子任务，都需要阻塞进程。一个是阻塞获取MQ数据，一个是阻塞提供websocket服务。并且2个子任务需要对象共享。消费MQ的任务需要获取websocket的服务对象进行广播消息。因此我们需要2个进程或线程,并且需要共享内存。</p><p>PHP语言当前的并发模型是多进程处理,而进程间无法共享内存。我想到通过redis做为中间件的形式进行对象共享，但实际上一是引入了依赖。第二个是对象序列号,如果对象方法中包含匿名方法做参的情况，当前我还没找到能序列化的办法。</p><p><code>opis/closure</code>能很好的支持匿名函数的序列号，对于上述包含匿名函数做参的对象无法序列化。</p><p>线程之间的内存共享是天生的非常简单的。PHP的线程支持方面有<code>pthreads</code>和<code>parallel</code>2个拓展支持。</p><h3 id="pthreads"><a href="#pthreads" class="headerlink" title="pthreads"></a>pthreads</h3><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220421190454.png" alt=""></p><p>本来似乎<code>pthreads</code>可以支持需求。但是不幸的是，该扩展已经是不维护状态。官方建议的是使用<code>parallel</code>拓展。</p><h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h3><p>我看了<code>parallel</code>的设计理念,还是为了避免传统线程模型当中的需要花大精力处理共享内存的状态一致问题。</p><p><code>parallel</code>在官方网页当中讲到了它的理念来自于<code>Go</code>.<br>并且对GO的评价是</p><blockquote><p>one of the most widely admired if not used platforms for writing parallel code at the moment</p></blockquote><p>Go的主要理念</p><p><code>Do not communicate by sharing memory; instead, share memory by communicating.(a variable is passed over a Channel for example).</code></p><p>解释下就是摒弃传统模型当中的通过共享内存来进行对象交流，而是利用一种通道的传输来交流对象。</p><p>坦白说，话有点饶。我的理解就是首先它是为了规避传统线程模型的问题。让程序员能够更方便地些并行程序的编写。<br>程序员不用再考虑多线程的数据并发操作问题。</p><p>上述说的理念就是CSP模型,CSP (message passing over channels).</p><p>当探讨CSP模型的时候，传统程序员可能会在寻找并发数据结构,但是这在CSP模型当中是不需要的。CSP的另一个核心思想是<code>Data should have a definitive single owner</code>.数据应该有明确的单一所有者。数据的改变需要通过<code>channels</code>进行通信同步。</p><p><code>parallel</code>目前在PHP生态中应用很少,网上也很少有代码介绍。测试了几次，结果都不是很理想。也许过些日子，等自己能力变得更强或者<code>parallel</code>被更多人尝试的时候，它会变得更简单。</p><p>更多并发模型可参考<a href="https://tianpan.co/notes/181-concurrency-models">Concurrency Models</a>,我认识的一个网友的总结。不一定都对，但是很全面。</p><h2 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h2><p>上面也说到，传统的线程模型虽然存在共享数据的并发操作问题。但是在不考虑这个问题的前提下，实现我们上述的需求却是非常简单的事情。</p><p>启动2个线程,一个线程用户监听MQ,一个线程启动websocket服务。以下是示例demo:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//main.java</span>        <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8088</span><span class="token punctuation">;</span>        <span class="token class-name">WebSocketServer</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WsServer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> wsServerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span><span class="token string">"wsServerThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wsServerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MqWatcher</span> mqWatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mqWatcher<span class="token punctuation">.</span><span class="token function">setWebSocketServer</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> mqWatcherThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span>mqWatcher<span class="token punctuation">,</span> <span class="token string">"mqWatcherThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mqWatcherThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>启动2个线程,<code>wsServerThread</code>用户监听websocket连接。<br><code>mqWatcherThread</code>用户监听mq消息。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqWatcher</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">"ws.notice"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">WebSocketServer</span> webSocketServer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWebSocketServer</span><span class="token punctuation">(</span><span class="token class-name">WebSocketServer</span> webSocketServer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer <span class="token operator">=</span> webSocketServer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for messages. To exit press CTRL+C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DeliverCallback</span> deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] Received '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                webSocketServer<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> consumerTag <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>MqWatcher</code>一旦收到mq的消息就广播给所有客户端。</p><p>基于这个简单的demo模型，再进行拓展应该就能满足需求了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>我花了很长时间在思考如何基于现有PHP生态(除开swoole),进行需求的实现，发现挺难的。</li><li>使用Java却轻而易举地实现了需求。</li><li>PHP在应对一般性的数据处理：存储、查询、修改、删除、格式化等工作上效率很高、很容易，但是在应对编写并发网络服务程序时会显得特别困难。</li><li>语言只是工具，应对不同的需求场景选择适合的工具是一般的码农的最佳选择。(如果你是顶级大神,能轻易的造出强大的轮子除外)</li><li>多掌握几个工具是有必要的，至少没有对比就会变成井底之蛙。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>修养|持斋</title>
      <link href="2022/04/12/%E4%BF%AE%E5%85%BB-%E6%8C%81%E6%96%8B/"/>
      <url>2022/04/12/%E4%BF%AE%E5%85%BB-%E6%8C%81%E6%96%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="十斋日"><a href="#十斋日" class="headerlink" title="十斋日"></a>十斋日</h2><p>佛教、道教的习俗，要在农历的初一、初八、十四、十五、十八、廿三、廿四、廿八、廿九、三十这十天斋戒。据说在此十日斋戒，礼佛、忏悔，诵经，即可保佑一家健康、平安、富足。</p><h2 id="六斋日"><a href="#六斋日" class="headerlink" title="六斋日"></a>六斋日</h2><p>《四天王经》以及《大智度论》中，则全举而为“六斋日”，即每月初八、十四、十五、廿三、廿九、三十日。《大智度论》说此六日有恶鬼神害人，故须斋戒。《四天王经》等，则说此六日是四天王等天神下降，监察人间善恶，故须斋戒。</p><span id="more"></span><h2 id="四斋日"><a href="#四斋日" class="headerlink" title="四斋日"></a>四斋日</h2><p>若按《阿含经》的说法，则为四斋日，是在农历初一、初八、十五、廿三，于此四日守八关斋戒.</p><h2 id="平常人如何看待"><a href="#平常人如何看待" class="headerlink" title="平常人如何看待"></a>平常人如何看待</h2><p>世界人口肥胖比率持续增高,一方面是全球生产力提升物质水平在不断提高。就中国而言也实现了全面脱贫。<br>其实满足欲望是最简单的,抑制欲望却是困难的。我认为保持饥饿感,适当的控制住人的欲望是一件好事。<br>就像控制情绪一样是一种修行。</p><p>现今社会,欲望正越来越容易得到满足。天主教说的七宗罪,傲慢、贪婪、色欲、嫉妒、暴食、愤怒及怠惰越来越充斥于这个世界。</p><p>禁欲修行一定会一定程度提高人的品行修养。</p><p>而持斋就是最简单的一种方式,一月择六斋日,实行斋戒并思考领悟下自身或人生。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础|websocket协议</title>
      <link href="2022/04/06/%E5%9F%BA%E7%A1%80-websocket%E5%8D%8F%E8%AE%AE/"/>
      <url>2022/04/06/%E5%9F%BA%E7%A1%80-websocket%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ul><li>2008年,<code>websocket</code>首次提出来是在HTML5规范里。</li><li>2009年12也，chrome浏览器第一个支持了websocket标准。</li></ul><h2 id="浏览器支持情况"><a href="#浏览器支持情况" class="headerlink" title="浏览器支持情况"></a>浏览器支持情况</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220406150025.png" alt=""></p><p>到2011年，市面上所有的浏览器都支持了websocket.</p><span id="more"></span><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>客户端请求</p><pre class="language-none"><code class="language-none">GET &#x2F;chat HTTP&#x2F;1.1Host: server.example.comUpgrade: websocketConnection: UpgradeSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;Sec-WebSocket-Protocol: chat, superchatSec-WebSocket-Version: 13Origin: http:&#x2F;&#x2F;example.com</code></pre><p>服务应答</p><pre class="language-none"><code class="language-none">HTTP&#x2F;1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk&#x3D;Sec-WebSocket-Protocol: chat</code></pre><p>websocket由http协议升级而成，client的请求头必须包含<code>Upgrade: websocket</code></p><p>除了 Upgrade 头部外，客户端还发送一个包含 base64编码的随机字节的 <code>Sec-WebSocket-Key</code> 头部，服务器用 <code>Sec-WebSocket-Accept</code>头部中的密钥散列作为响应。这是为了防止缓存代理重新发送以前的 WebSocket 对话，并且不提供任何身份验证、隐私或完整性。散列函数将固定字符串<code>258eafa5-e914-47da-95ca-c5ab0dc85b11</code>(一个 UUID)附加到来自 Sec-WebSocket-Key 报头的值(不从 base64解码) ，应用 sha-1散列函数，并使用 base64对结果进行编码。</p><p><code>Rfc6455</code>标准要求密钥必须是一个 nonce，由随机选择的16字节值组成，该值已经以 base64编码，即 base64中的24字节(最后两个字节为 = =)。虽然一些宽松的 HTTP 服务器允许显示较短的密钥，但许多现代 HTTP 服务器会拒绝请求，并出现错误“无效的 Sec-WebSocket-Key 标头”。</p><p>一旦连接建立起来，客户端和服务器就可以以全双工模式来回发送 WebSocket 数据或文本帧。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220410153642.png" alt=""></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们用java来实现下websocket的协议。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>vison<span class="token punctuation">.</span>magpie<span class="token punctuation">.</span>websocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">ManagementFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WsServer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Socket</span><span class="token punctuation">></span></span> sockMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9527</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @param args the command line arguments     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getRuntimeMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token class-name">WsServer</span><span class="token punctuation">.</span>port<span class="token punctuation">;</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"server is running in %s of %s"</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Socket</span> sock <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"connected from "</span> <span class="token operator">+</span> sock<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Handler</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>vison<span class="token punctuation">.</span>magpie<span class="token punctuation">.</span>websocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>digest<span class="token punctuation">.</span></span><span class="token class-name">MessageDigestAlgorithms</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Socket</span> sock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> sock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sock <span class="token operator">=</span> sock<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">handle</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client disconnected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Process new http request..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> get <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^GET"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>get<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"match get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> matchWebsocketKey <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> thisLine <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Matcher</span> matchWebsocket <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"Sec-WebSocket-Key: (.*)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>thisLine<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matchWebsocket<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    matchWebsocketKey <span class="token operator">=</span> matchWebsocket<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>matchWebsocket<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">handlerWebsocket</span><span class="token punctuation">(</span>matchWebsocketKey<span class="token punctuation">,</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        count<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收的字节数："</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            buff<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buff<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">^</span>buff<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收的内容："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> count<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handlerWebsocket</span><span class="token punctuation">(</span><span class="token class-name">String</span> secWebSocketKey<span class="token punctuation">,</span> <span class="token class-name">BufferedWriter</span> writer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hand with header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> secWebSocket <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secWebSocketKeyByte <span class="token operator">=</span> <span class="token punctuation">(</span>secWebSocketKey <span class="token operator">+</span> <span class="token string">"258EAFA5-E914-47DA-95CA-C5AB0DC85B11"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> digest <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">MessageDigestAlgorithms</span><span class="token punctuation">.</span>SHA_1<span class="token punctuation">)</span><span class="token punctuation">.</span>                    <span class="token function">digest</span><span class="token punctuation">(</span>secWebSocketKeyByte<span class="token punctuation">)</span><span class="token punctuation">;</span>            secWebSocket <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>secWebSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 101 Switching Protocols\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Connection: Upgrade\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Upgrade: websocket\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Sec-WebSocket-Accept: "</span> <span class="token operator">+</span> secWebSocket <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空行标识Header和Body的分隔</span>        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里我们看到,我们在建立<code>websocket</code>连接之后，使用了一个轮训的方式进行数据读取和处理。</p><p>这与浏览器端友好的事件驱动形的API不同。那么如何实现服务端的事件驱动呢?</p><p>后续还需要继续探讨。</p><h2 id="事件驱动API"><a href="#事件驱动API" class="headerlink" title="事件驱动API"></a>事件驱动API</h2><p>我们了解到浏览器端的websocket API是十分的便利的。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Create WebSocket connection.</span><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Connection opened</span>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Server!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Listen for messages</span>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Message from server '</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>相较于上面用java socket 实现的websocket server版本事件驱动型的API让程序开发变得更容易。</p><h3 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h3><p><code>cboden/ratchet</code>也是基于事件驱动的websocket实现。<a href="http://socketo.me/">ratchet</a></p><p>我基于自己的<code>wonfu</code>框架集成进去写了个demo测试</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">## wsserver</span>        <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mychat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$handler</span><span class="token operator">-></span><span class="token function">setRedis</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">redis</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ws</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RatchetWsServer</span><span class="token punctuation">(</span><span class="token variable">$handler</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Make sure you're running this as root</span>        <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token variable">$input</span><span class="token operator">-></span><span class="token function">getOption</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'port'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span><span class="token operator">-></span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"server will run in port <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$port</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$server</span> <span class="token operator">=</span> <span class="token class-name static-context">IoServer</span><span class="token operator">::</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpServer</span><span class="token punctuation">(</span><span class="token variable">$ws</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$server</span><span class="token operator">-></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Service</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Predis<span class="token punctuation">\</span>Client</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Ratchet<span class="token punctuation">\</span>MessageComponentInterface</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Ratchet<span class="token punctuation">\</span>ConnectionInterface</span><span class="token punctuation">;</span><span class="token comment">/** * chat.php * Send any incoming messages to all connected clients (except sender) */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Mychat</span> <span class="token keyword">implements</span> <span class="token class-name">MessageComponentInterface</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$clients</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">clients</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>SplObjectStorage</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">onOpen</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ConnectionInterface</span> <span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">clients</span><span class="token operator">-></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">onMessage</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ConnectionInterface</span> <span class="token variable">$from</span><span class="token punctuation">,</span> <span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">clients</span> <span class="token keyword">as</span> <span class="token variable">$client</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//            if ($from != $client) &#123;</span>                <span class="token variable">$client</span><span class="token operator">-></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"we receive your msg:"</span><span class="token operator">.</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            &#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">onClose</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ConnectionInterface</span> <span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">clients</span><span class="token operator">-></span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">onError</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ConnectionInterface</span> <span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token class-name class-name-fully-qualified type-declaration"><span class="token punctuation">\</span>Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>非常简单的代码就能完成基本的demo测试。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220419215814.png" alt=""></p><h3 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>架构|反对中台</title>
      <link href="2022/03/27/%E5%8F%8D%E5%AF%B9%E4%B8%AD%E5%8F%B0/"/>
      <url>2022/03/27/%E5%8F%8D%E5%AF%B9%E4%B8%AD%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220401110653.png" alt=""></p><p>起初我还不反对中台，因为没有接触，没有权力评价。当渐渐的被迫与中台慢慢打交道的时候，我深深的厌恶中台。可以说，中台是毒瘤。对待技术应当客观、有理论根据、讲事实。<br>如果你要反对一个东西你就要拿出必要的依据来证明你的反对是对的。</p><span id="more"></span><h2 id="事实"><a href="#事实" class="headerlink" title="事实"></a>事实</h2><h3 id="中台在降低效率"><a href="#中台在降低效率" class="headerlink" title="中台在降低效率"></a>中台在降低效率</h3><p>我所体验的实际情况，我作为新业务技术负责人，在处理订单支付这个非常普通都不能再普通的场景确遇到麻烦重重。</p><p>首先，支付场景本质处理起来不麻烦,无非就是接入支付宝、微信支付，对接接口唤起支付。这本质是一个简单、普通的技术问题。<br>现在的问题是，不知道什么原因一定要接入技术中心的交易中台，而这个交易中台本身还要调用支付中台。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220327124440.png" alt=""></p><p>在绝大多数企业都只需对接支付宝、微信渠道的情况下，由业务直接对接也并不是件耗时的事。</p><p>现实情况是，由于需要对接中台。这当中需要提需求、需求PK、等待排期、2个团队沟通技术协议、协调发版，等等一系列的事情。<br>最要命的是可能你的需求被排到猴年马月，严重影响业务迭代计划。就算最理想的情况下，也比由业务方自己对接要慢。</p><h3 id="中台在降低性能"><a href="#中台在降低性能" class="headerlink" title="中台在降低性能"></a>中台在降低性能</h3><p>由上面的调用链条可以看到，这其中多了2次的HTTP调用，系统调用链路拉长本身就使得性能损耗。</p><h3 id="中台在制约系统稳定性"><a href="#中台在制约系统稳定性" class="headerlink" title="中台在制约系统稳定性"></a>中台在制约系统稳定性</h3><p>由于增加了系统调用，如果是同步调用，那么就意味着中台系统的故障会直接牵连接入业务的运行。一旦出现故障，业务只能干着急，等待恢复。</p><blockquote><p>献上铁索连环之计，各个大船连在一起，军队可以骑马在各个船上行动，如同平地，东吴只日可降也。俞数日，中台失火，殃及各线业务。仅未接入者，幸免。割须弃袍，败走华容道。@Samuel</p></blockquote><p>这是某架构群里，一个大佬对于中台的评价。</p><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>大家都知道，中台概念源自于阿里。因此，我特意去看了《企业IT架构转型之道，阿里巴巴中台战略思想与架构实践》一书(名字有点场，后面统称《阿里中台》)。在实践中台或被迫接入中台的过程当中，我感受到中台带来的种种弊端。当时我在想，也许是我们实践得不对，也许中台本身就是个错误。本着反驳或求证的目的，阅读了这本书。</p><p>看完后我写下了书评。</p><blockquote><p>起初看本书的目的是为了反驳或求证中台建设。实际上本书也没有讲清楚为何做中台建设，这一板块篇幅极其少。甚至本身不多的篇幅中表达的一些观点也天然矛盾。根据近来的一些信息，释放的抽象化薄化中台或多元化治理信号。我更愿意相信，中台更像政治任务而非技术架构。但是并不妨碍本书是一本优秀的分布式架构设计和亿级流量企业IT治理类书籍，提供了许多新思路参考。总之，这个世界上有很多问题就像翘翘板一样，只能要一边，这一边上去了，另边就下来了。不要过分神话或美化，不要宣扬救世主降临。</p></blockquote><p>也在某云计算群里回答别人疑问</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220330091455.png" alt=""></p><blockquote><p>我的感觉是 做中台的决定应该是来自高层，非技术层主动提议。高层要效率，认为中台能解决效率问题。可实际上根本就会导致业务和中台的矛盾，业务要动，中台要稳。组织架构上的隔离也天然降低效率。根本是事与愿违的事情。</p></blockquote><h3 id="阿里中台"><a href="#阿里中台" class="headerlink" title="阿里中台"></a>阿里中台</h3><p>我们再来从这本书来看看<code>中台</code>。</p><blockquote><p>共享服务架构的建设使得阿里巴巴摆脱了因为”烟囱式”所带来的种种桎楛,最终成为阿里巴巴中台战略的核心组成。</p></blockquote><p>这里说的<code>共享服务架构</code>是中台战略的核心。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220329231118.png" alt="阿里巴巴共享服务架构"></p><p>上图为阿里巴巴共享架构，可以看到阿里所有业务都是共用同一套用户、商品、交易、评价、营销体系。</p><p>该书作者也认为，<code>SOA的本质就是服务重用</code>。</p><p>看上去确实是服务、成果在复用，理论上来说可以达到降本增效的目的。</p><p>那么SOA的本质目的是服务重用么？</p><h3 id="SOA和微服务"><a href="#SOA和微服务" class="headerlink" title="SOA和微服务"></a>SOA和微服务</h3><blockquote><p>以下指导原则是开发，维护和使用SOA的基本原则</p></blockquote><ul><li>可重复使用、粒度、模块性、可组合型、对象化原件、构件化以及具交互操作性</li><li>符合开放标准（通用的或行业的）</li><li>服务的识别和分类，提供和发布，监控和跟踪。</li></ul><p><em>的确SOA提到了可重复使用。</em></p><p>下面是一些特定的体系架构原则：</p><ul><li>服务封装</li><li>服务松耦合（Loosely Coupled） - 服务之间的关系最小化，只是互相知道。</li><li>服务契约 - 服务按照服务描述文档所定义的服务契约行事。</li><li>服务抽象 - 除了服务契约中所描述的内容，服务将对外部隐藏逻辑。</li><li>服务的重用性 - 将逻辑分布在不同的服务中，以提高服务的重用性。</li><li>服务的可组合性 - 一组服务可以协调工作并组合起来形成一个组合服务。</li><li>服务自治 – 服务对所封装的逻辑具有控制权</li><li>服务无状态 – 服务将一个活动所需保存的信息最小化。</li><li>服务的可被发现性 – 服务需要对外部提供描述信息，这样可以通过现有的发现机制发现并访问这些服务。</li></ul><p>我们看到服务重用只是<em>SOA的众多原则的一个原则</em>。看到这些列举的原则，我们会很容易想到另一个大热的技术名词”微服务”。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/Before-SOA-vs-After-SOA-The-diagram-shown-in-figure-24-provides-an-explanation-using.png" alt="SOA和单体架构"></p><p>我们常常认为微服务是SOA的实现，谈论微服务我们总会拿<code>单体架构</code>与之对比。</p><p>单体架构随着业务规模的增大暴露的问题:</p><ol><li>编译构建变慢</li><li>难维护，代码量大、交叉调用易出错</li><li>难部署</li><li>不容易扩展</li><li>稳定性变差，一损俱损</li></ol><p>通过微服务，对单体应用的拆<em>分</em>，将单一、庞大化为分布、颗粒，能直接解决构建慢、代码庞大、恐惧维护等问题。并且细粒度的对外服务也可以按需灵活拓展。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220329235239.png" alt="微服务"></p><p>其实SOA本身是在讨论软件功能的服务化、解耦化，本质目的还是为了解决软件的编写、构建、发布问题,在适当的条件下服务可以重复利用。它是软件模块化、OOP编程思想的演化。模块化编程固然有复用的原则，但不光是为了解决重用问题。它很大程度的意义还是提高可维护性。与MVC思想一样，模块化、结构化、层级化难道就是为了重用吗？</p><p>所以首先，我反对SOA的本质就是重用的说法。</p><p>为了重用而进行的架构，如果收益大于损失,那没有批评它的理由。结果导向，它是对的。</p><p>但事实上，为了重用而把所有业务强行集中在一起,所有业务中看起来是同一个场景的功能强行走同一个系统。比如，所有业务的评价系统都走评价中台，所有业务的订单交易都走交易中台。<em>显然每个业务都有自己特殊的需求细节。</em> 中台不可能随时都能满足业务需求。《阿里中台》一书也讲到，”服务需要不断的业务滋养”并且”服务不需要业务稳定”。说明，他承认这一点,中台需要一直迭代才能满足业务。那么试问，既然需要迭代如何满足业务快速接入上线的需求，如何做到书中说的『赋予业务快速创新和试错能力』。</p><p>更糟糕的问题是，一个中台如何同时满足多个业务的不同的新特性需求？于是就有了需求优先级、业务PK等等所谓的解决方案。那么，我们说的『赋予业务快速创新和试错能力』，能力在哪里？</p><p>现在，我们看到了阿里中台就是为了复用，而把各个业务强行集中走同一个通道进行所谓的复用。我们所有其他技术概念都在讲的是“分”，分布式、MapReduce、Sharding、Partition、微服务、区块链,我一直认为技术有一个”道”,就是『分而治之』。然而,中台却是反其道的。</p><p>阿里中台失败了，阿里张勇2021年12月6日的内部文摘:</p><blockquote><p>2015年起开始施行的“中台战略”，是过去几年集团最重要的组织战略。随着整个集团正在形成多业务引擎驱动未来增长的格局，面向未来，“多元化治理”将成为集团全新的组织战略。我们希望通过更多新型治理方式的探索，始终用生产关系的先进性来驱动先进生产力的释放，用组织的创新去驱动业务的创新。</p></blockquote><p>以及网络上MR.K的观点，中台适合做“组合式创新”，没法做“颠覆式创新”。<a href="https://developer.51cto.com/art/202012/636807.htm">https://developer.51cto.com/art/202012/636807.htm</a></p><p>何畏”多元化治理”？连系下我上文说的”分而治之”。</p><h2 id="天然错误"><a href="#天然错误" class="headerlink" title="天然错误"></a>天然错误</h2><p>为什么我要说,中台根本是事与愿违的事情。中台的梦是重用，是降本增效。看看中台做了什么，中台组织与业务组织分属于不同的组织架构。</p><p><em>不同的组织架构必然会增加沟通成本，降低协作效率。</em></p><p>不同的组织架构,具体的职责目标必然是不一样的。不要说都属于同一个公司，都应有着共同的使命、愿景。但是事实上，真的可能那么容易做到么？业务部门追求的就是业务快速的上线、订单用户数据的增长。那么技术中台部门追求的是什么？他们追求的是稳定运行，不出错就是功。技术中台会更注重存量高流量业务的系统稳定性。他们的KPI是99.999%,类似这样的稳定性指标。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220330093425.png" alt=""></p><p>所以说，<em>不同的KPI决定了做事方向不会完全一致，效率肯定会打折扣。</em></p><p>我们经常会高喊『合力』的口号,高举共背KPI的旗号。我们要强调的东西，必然是不那么容易做到的东西。事实上，合力难是所有公司乃至整个人类面临的难题。真的同一个世界、同一个梦想的话。北约也不会到处去部署导弹，现在俄罗斯也不会去干乌克兰了。</p><p>再回过头看微服务，为什么要微服务？因为单体架构的缺陷,因为无限膨胀的隐患。那么所有业务全部集中走一个通道是在做什么？还是在做堆叠在膨胀。多业务接入的情况下还造成中台牵一发而动全身的局面。进而造成业务严重受中台牵连，中台臃肿不堪举步维艰，心理上害怕迭代，而业务本身需要中台支持迭代的矛盾。</p><h2 id="总结和客观"><a href="#总结和客观" class="headerlink" title="总结和客观"></a>总结和客观</h2><h3 id="其他观点"><a href="#其他观点" class="headerlink" title="其他观点"></a>其他观点</h3><p>现在有很多反对中台的言论和文章,这里我随便列举2个。</p><ol><li><a href="https://mp.weixin.qq.com/s/tfxXbVI6JoZ2KfS-6fOOIw">https://mp.weixin.qq.com/s/tfxXbVI6JoZ2KfS-6fOOIw</a></li><li><a href="https://mp.weixin.qq.com/s/9j3BnR3UqA-lnJDoM5Hrvg">https://mp.weixin.qq.com/s/9j3BnR3UqA-lnJDoM5Hrvg</a></li></ol><p>以及还有的正在做中台，但是发现了问题的。比如有赞：</p><p><a href="https://mp.weixin.qq.com/s/Lew0tQcfyupe1KGjtu0XoQ">https://mp.weixin.qq.com/s/Lew0tQcfyupe1KGjtu0XoQ</a></p><p>里面也提到了<em>需求规划困难，阻碍业务发展</em></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>『复用增效』逻辑正确，但是不能极端功利。完全为了复用的架构，必然会产生问题,软件的目的始终是解决人类的现实需求。何畏架构？</li></ol><blockquote><p>软件架构设计的主要目标是支撑软件系统的生命周期，设计良好的架构可以让系统便于理解、易于修改、方便维护，并且能轻松部署。软件架构的终极目标是最大化程序员的生产力，同时最小化系统的总运营成本。–《架构整洁之道》</p></blockquote><ol start="2"><li><p>中台也并不完全错误，我认为运维中台完全成立(如果一定要称为中台的话)。像devops这类与具体业务关联性甚少的基础设施，完全可以做成中台复用。不过，也没必要称之为中台，因为本身就是自然而然的sass平台能力的使用。但是一旦关联到具体业务的东西，必须慎重做成中台。</p></li><li><p>微服务是公司规模化发展的必然之路，中台不是。</p></li><li><p>我从交流中发现的，没有实际体验过中台的或不是技术出身的朋友很容易信服中台复用降本增效的神话。</p></li><li><p>部分复用、轻量复用，别走极端强制。凡事不可太尽，太尽必定缘尽。</p></li></ol><p>最后,个人愚见仅供参考。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库中间件shardingsphere-proxy</title>
      <link href="2022/02/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6shardingsphere/"/>
      <url>2022/02/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6shardingsphere/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>坦白说80%的程序员的80%工作都是在与数据库打交道，显然数据库工作无比的重要。当数据量不大的时候似乎一切都不是问题,一旦数据量变大，程序员的挑战就变得越来越大。</p><p>当单表数据超过8千万，普通的加索引可能效果已经不会太好了。这个时候通常的解决办法是分库分表，也就是老生常谈的<code>sharding</code>.</p><p>今天我们来看看<code>shardingsphere</code>的解决方案。</p><span id="more"></span><p>官方文档：<a href="https://shardingsphere.apache.org/document/5.1.0/en/overview/">https://shardingsphere.apache.org/document/5.1.0/en/overview/</a></p><p>当前<code>shardingsphere</code>有3个产品</p><ul><li>ShardingSphere-JDBC</li><li>ShardingSphere-Proxy</li><li>ShardingSphere-Sidecar(TODO)</li></ul><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220225175604.png" alt=""></p><p><code>ShardingSphere-Sidecar</code>还在todo，我们暂且不讨论。当前ShardingSphere在github有15k的star，可见应该还是广受大家认可的。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220225175742.png" alt=""></p><p><code>ShardingSphere-JDBC</code>是java的类库与应用程序和语言绑定，<code>ShardingSphere-Proxy</code>是中间代理与语言无关。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220225173123.png" alt=""></p><p>从官网的蓝图来看，这是一个较新的项目，同时开发团队有着长远的规划。</p><h2 id="产品架构"><a href="#产品架构" class="headerlink" title="产品架构"></a>产品架构</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220225174114.png" alt=""></p><p>从这张产品架构图我们可以看到大致的一些产品功能：</p><ul><li>sql审计</li><li>sql防火墙</li><li>分片</li><li>读写分离</li><li>DB负载均衡</li><li>伸缩拓展</li><li>影子库</li></ul><h2 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h2><p>我们来体验下<code>ShardingSphere-Proxy</code>的sharding。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>从官网的下载页面可以下到二进制的程序，如果你是使用mysql则还需要下载jdbc驱动，这些安装都很简单。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>主要工作是在配置上面。为了方便测试，我们假设的场景是只分表不分库。</p><p>我们将订单表t_order按user_id%2分2张表,t_order_0和t_order_1。</p><p>我们要对2个配置文件进行配置。</p><ol><li>server.yaml</li></ol><p><code>server.yaml</code>主要是对ShardingSphere-Proxy本身的服务配置。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">rules</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token tag">!AUTHORITY</span>   <span class="token key atrule">users</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> root@%<span class="token punctuation">:</span><span class="token number">123456</span>     <span class="token punctuation">-</span> sharding@<span class="token punctuation">:</span>sharding   <span class="token key atrule">provider</span><span class="token punctuation">:</span>     <span class="token key atrule">type</span><span class="token punctuation">:</span> ALL_PRIVILEGES_PERMITTED <span class="token punctuation">-</span> <span class="token tag">!TRANSACTION</span>   <span class="token key atrule">defaultType</span><span class="token punctuation">:</span> XA   <span class="token key atrule">providerType</span><span class="token punctuation">:</span> Atomikos <span class="token punctuation">-</span> <span class="token tag">!SQL_PARSER</span>   <span class="token key atrule">sqlCommentParseEnabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">sqlStatementCache</span><span class="token punctuation">:</span>     <span class="token key atrule">initialCapacity</span><span class="token punctuation">:</span> <span class="token number">2000</span>     <span class="token key atrule">maximumSize</span><span class="token punctuation">:</span> <span class="token number">65535</span>     <span class="token key atrule">concurrencyLevel</span><span class="token punctuation">:</span> <span class="token number">4</span>   <span class="token key atrule">parseTreeCache</span><span class="token punctuation">:</span>     <span class="token key atrule">initialCapacity</span><span class="token punctuation">:</span> <span class="token number">128</span>     <span class="token key atrule">maximumSize</span><span class="token punctuation">:</span> <span class="token number">1024</span>     <span class="token key atrule">concurrencyLevel</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token key atrule">props</span><span class="token punctuation">:</span> <span class="token key atrule">max-connections-size-per-query</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token key atrule">kernel-executor-size</span><span class="token punctuation">:</span> <span class="token number">16</span>  <span class="token comment"># Infinite by default.</span> <span class="token key atrule">proxy-frontend-flush-threshold</span><span class="token punctuation">:</span> <span class="token number">128</span>  <span class="token comment"># The default value is 128.</span> <span class="token key atrule">proxy-opentracing-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">proxy-hint-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">sql-show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">check-table-metadata-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">show-process-list-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># Proxy backend query fetch size. A larger value may increase the memory usage of ShardingSphere Proxy.</span>   <span class="token comment"># The default value is -1, which means set the minimum value for different JDBC drivers.</span> <span class="token key atrule">proxy-backend-query-fetch-size</span><span class="token punctuation">:</span> <span class="token number">-1</span> <span class="token key atrule">check-duplicate-table-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">proxy-frontend-executor-size</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># Proxy frontend executor size. The default value is 0, which means let Netty decide.</span>   <span class="token comment"># Available options of proxy backend executor suitable: OLAP(default), OLTP. The OLTP option may reduce time cost of writing packets to client, but it may increase the latency of SQL execution</span>   <span class="token comment"># and block other clients if client connections are more than `proxy-frontend-executor-size`, especially executing slow SQL.</span> <span class="token key atrule">proxy-backend-executor-suitable</span><span class="token punctuation">:</span> OLAP <span class="token key atrule">proxy-frontend-max-connections</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># Less than or equal to 0 means no limitation.</span> <span class="token key atrule">sql-federation-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># Available proxy backend driver type: JDBC (default), ExperimentalVertx</span> <span class="token key atrule">proxy-backend-driver-type</span><span class="token punctuation">:</span> JDBC</code></pre><p><code>users:</code> 定义了代理的连接信息。<code>root@%:123456</code>代表用户名root密码123456和在0.0.0.0上监听。</p><ol start="2"><li>config-sharding.yaml</li></ol><p><code>config-sharding.yaml</code>定义了分库分表的算法信息。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> db_test<span class="token key atrule">dataSources</span><span class="token punctuation">:</span> <span class="token key atrule">ds_0</span><span class="token punctuation">:</span>   <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/db_test<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>   <span class="token key atrule">username</span><span class="token punctuation">:</span> test_rw   <span class="token key atrule">password</span><span class="token punctuation">:</span> ko<span class="token important">*0^fwZtQ2nZv</span>   <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>   <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>   <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>   <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>   <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token tag">!SHARDING</span> <span class="token key atrule">tables</span><span class="token punctuation">:</span>   <span class="token key atrule">t_order</span><span class="token punctuation">:</span>     <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_0.t_order_$<span class="token punctuation">&#123;</span>0..1<span class="token punctuation">&#125;</span>     <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>       <span class="token key atrule">standard</span><span class="token punctuation">:</span>         <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id         <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> t_order_inline <span class="token key atrule">bindingTables</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> t_order <span class="token key atrule">defaultDatabaseStrategy</span><span class="token punctuation">:</span>   <span class="token key atrule">none</span><span class="token punctuation">:</span> <span class="token key atrule">defaultTableStrategy</span><span class="token punctuation">:</span>   <span class="token key atrule">none</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingAlgorithms</span><span class="token punctuation">:</span>   <span class="token key atrule">t_order_inline</span><span class="token punctuation">:</span>     <span class="token key atrule">type</span><span class="token punctuation">:</span> INLINE     <span class="token key atrule">props</span><span class="token punctuation">:</span>       <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> t_order_$<span class="token punctuation">&#123;</span>user_id % 2<span class="token punctuation">&#125;</span> <span class="token key atrule">scalingName</span><span class="token punctuation">:</span> default_scaling <span class="token key atrule">scaling</span><span class="token punctuation">:</span>   <span class="token key atrule">default_scaling</span><span class="token punctuation">:</span>     <span class="token key atrule">input</span><span class="token punctuation">:</span>       <span class="token key atrule">workerThread</span><span class="token punctuation">:</span> <span class="token number">40</span>       <span class="token key atrule">batchSize</span><span class="token punctuation">:</span> <span class="token number">1000</span>       <span class="token key atrule">rateLimiter</span><span class="token punctuation">:</span>         <span class="token key atrule">type</span><span class="token punctuation">:</span> QPS         <span class="token key atrule">props</span><span class="token punctuation">:</span>           <span class="token key atrule">qps</span><span class="token punctuation">:</span> <span class="token number">50</span>     <span class="token key atrule">output</span><span class="token punctuation">:</span>       <span class="token key atrule">workerThread</span><span class="token punctuation">:</span> <span class="token number">40</span>       <span class="token key atrule">batchSize</span><span class="token punctuation">:</span> <span class="token number">1000</span>       <span class="token key atrule">rateLimiter</span><span class="token punctuation">:</span>         <span class="token key atrule">type</span><span class="token punctuation">:</span> TPS         <span class="token key atrule">props</span><span class="token punctuation">:</span>           <span class="token key atrule">tps</span><span class="token punctuation">:</span> <span class="token number">2000</span>     <span class="token key atrule">streamChannel</span><span class="token punctuation">:</span>       <span class="token key atrule">type</span><span class="token punctuation">:</span> MEMORY       <span class="token key atrule">props</span><span class="token punctuation">:</span>         <span class="token key atrule">block-queue-size</span><span class="token punctuation">:</span> <span class="token number">10000</span>     <span class="token key atrule">completionDetector</span><span class="token punctuation">:</span>       <span class="token key atrule">type</span><span class="token punctuation">:</span> IDLE       <span class="token key atrule">props</span><span class="token punctuation">:</span>         <span class="token key atrule">incremental-task-idle-minute-threshold</span><span class="token punctuation">:</span> <span class="token number">30</span>     <span class="token key atrule">dataConsistencyChecker</span><span class="token punctuation">:</span>       <span class="token key atrule">type</span><span class="token punctuation">:</span> DATA_MATCH       <span class="token key atrule">props</span><span class="token punctuation">:</span>         <span class="token key atrule">chunk-size</span><span class="token punctuation">:</span> <span class="token number">1000</span></code></pre><p><code>schemaName</code>非常重要，代表逻辑库名。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220225182212.png" alt=""></p><p>我们通过mysql cli连接上去可以看到db名称即为<code>schemaName</code>定义的值。</p><p>我们定义了一个数据源ds_0映射到物理库db_test。</p><p><code>t_order</code>逻辑表映射到真实表t_order_0和t_order_1, <code>shardingColumn</code>为user_id,<code>shardingAlgorithmName</code>为t_order_inline</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>接下来我们来写一段脚本测试下，主要测试2个场景。</p><ul><li>跨表查询数据聚合</li><li>带分片字段的分片查询</li></ul><p>对应的sql分别是</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_order<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order <span class="token keyword">where</span> user_id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></code></pre><p>对应的java代码是</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>vison<span class="token punctuation">.</span>jpal<span class="token punctuation">.</span>queryprocess</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">LogManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSharding</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ThreadQuery</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//2. 获得数据库连接</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://www-dev.h66.cn:3307/db_test"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.操作数据库，实现增删改查</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//count</span>        <span class="token class-name">Integer</span> user_id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> countQuery <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT count(*) FROM t_order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.print(rs.getC);</span>        <span class="token comment">//如果有数据，rs.next()返回true</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>countQuery<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数据总数: %d%n"</span><span class="token punctuation">,</span>countQuery<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> shardingQuery <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM t_order where user_id = %s"</span><span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>shardingQuery<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"order_no"</span><span class="token punctuation">,</span> shardingQuery<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"order_no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> shardingQuery<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listUser<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>listUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>得出结果</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220225183624.png" alt=""></p><h2 id="收益"><a href="#收益" class="headerlink" title="收益"></a>收益</h2><p>总结下我们使用<code>ShardingSphere-Proxy</code>能给我们带来哪些好处</p><ul><li>使用代理的方式，对项目代码无入侵，与语言无关。任何编程语言都能接入。</li><li>中间件代理帮忙处理了分库分表查询的问题并且能保障性能,这无疑解放了程序员对分库分表需求的担忧。当有分库分表的需求时，几乎还可以像操作单表那样操作。</li><li>负载均衡、读写分离、影子库表功能让程序性能、可靠性大大提升</li></ul><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><ul><li>跨表查询数据聚合到底性能如何，最佳能支持多少表多少数据量的跨表查询，如何达到最佳性能这些问题都需要考虑</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据|阿里mysql中间件多表查询模型</title>
      <link href="2022/02/23/%E9%98%BF%E9%87%8Cmysql%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B/"/>
      <url>2022/02/23/%E9%98%BF%E9%87%8Cmysql%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>之前读了一本书《企业IT架构转型之道:阿里巴巴中台战略思想与架构实战》，期中有关于数据库中间件的部分实现令我映像深刻。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220223170048.png" alt="图片来源:https://shardingsphere.apache.org/document/current/en/concepts/pluggable/"></p><p>中间件解决了几个问题：</p><ul><li>数据库使用治理,通过mysql proxy的形式,能在开发时期的建表不规范ddl、生产的查询潜在危害sql进行预警、拦截、监控等操作</li><li>sharding处理,通过中间件的处理使得业务开发不用太关心sharding处理专心处理业务逻辑。</li><li>负载均衡处理,可以使得sql分散到不同实例，并对业务层无侵入。</li></ul><p>对于sharding这一块还解决了在分库分表之后跨库夸表的查询，采用多线程查询内存聚合的方式来提高查询效率。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>vison<span class="token punctuation">.</span>jpal<span class="token punctuation">.</span>queryprocess</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">LogManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadQuery</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/demo"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PASSWORD <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> totalListUser<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ThreadQuery</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> table<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTable</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        totalListUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">246</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"user_%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadQuery</span><span class="token punctuation">></span></span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> table <span class="token operator">:</span> tables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ThreadQuery</span> threadQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threadQuery<span class="token punctuation">.</span><span class="token function">setTable</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>            threadQuery<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>threadQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> thread <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>totalListUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> rs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">singleQueryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ThreadQuery</span><span class="token punctuation">.</span>totalListUser<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">singleQueryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//2. 获得数据库连接</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"线程%s启动"</span><span class="token punctuation">,</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.操作数据库，实现增删改查</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM %s WHERE `age` = 25 LIMIT 2 "</span><span class="token punctuation">,</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果有数据，rs.next()返回true</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listUser<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> listUser<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>此代码只是一个非常基础的实现demo,真正上生产还需要解决很多其他问题：</p><ol><li>线程池链接池解决链接和线程建立开销</li><li>并发数的最佳数量设置</li><li>limit和order by的处理,设想<code>select * from user where age = 25  order by create_time desc limit 10</code>该如何从sharding表进行处理</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot全局处理异常(兜底、防重)</title>
      <link href="2021/12/22/spring-boot%E5%85%A8%E5%B1%80%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8-%E9%98%B2%E9%87%8D%E5%A4%8D%E8%BE%93%E5%87%BA/"/>
      <url>2021/12/22/spring-boot%E5%85%A8%E5%B1%80%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8-%E9%98%B2%E9%87%8D%E5%A4%8D%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>网上有非常多的文章介绍了如何进行全局异常捕获处理，但是我发现并不满足我遇到的一个问题。</p><span id="more"></span><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"商品详情"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"/goods/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">detail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">></span></span> goods <span class="token operator">=</span> goodsRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>noDataFound<span class="token punctuation">,</span> <span class="token string">"获取失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>一个非常普通的api,查询并返回。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Goods entity</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPurchasingPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>purchasingPriceFen <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p>会出异常的点在于我的<code>Goods</code>的属性<code>purchasingPriceFen</code>有可能会出现<code>NullPointerException</code>.</p><p>此时的异常发生于jackson.databind.而控制器仍然会正常返回成功的json.</p><p>在常规的的<code>RestControllerAdvice</code>处理方法中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Response</span> <span class="token function">handleConstraintViolationException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> fieldName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FieldError</span><span class="token punctuation">)</span> error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> errorMessage <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>parametrErrror<span class="token punctuation">,</span> <span class="token string">"参数错误"</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">handBaseException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">handleConstraintViolationException</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"errors"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>systemError<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>会导致先输出正常的json，后面又会输出捕获的异常的错误json，最终2个json串叠加输出。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>我找了许多文章都没有解决这个问题,后面想到了正常的情况下前面的json是不应该输出的，那么把它清除不就行了？</p><p>于是最终的兜底方式是</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">handBaseException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">handleConstraintViolationException</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关键方法</span>    response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"errors"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>systemError<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>通过<code>response.reset()</code>重置掉response。</p><p>关于完整的异常处理可参考:<a href="https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc">https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>doctrine orm的批量处理效率</title>
      <link href="2021/12/21/doctrine-orm%E7%9A%84%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%95%88%E7%8E%87/"/>
      <url>2021/12/21/doctrine-orm%E7%9A%84%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>doctrine无疑是一款优秀的ORM工具，本文会根据doctrine官网的批处理这章节来讲讲doctrine的批量处理。</p><p>官网链接 <a href="https://www.doctrine-project.org/projects/doctrine-orm/en/current/reference/batch-processing.html#batch-processing">doctrine批量处理</a></p><p>此章开头，doctrine讲到会介绍doctrine的有效率的批处理方式。</p><span id="more"></span><blockquote><p>This chapter shows you how to accomplish bulk inserts, updates and deletes with Doctrine in an efficient way.</p></blockquote><p><strong>本文将以批量插入为例讲doctrine是如何执行批量操作和它的原理是什么。</strong></p><p>在文章的开头，有一段有意思的话，我觉得耐人寻味。<br><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211210154538.png" alt=""></p><p>简单翻译就是，<strong>ORM工具并不适合去处理批量操作</strong>，每个关系型数据库都有它最高效的方式来应对。如果以下的方式你认为并不是最高效的，那么建议您根据特定的关系型数据库特有的方式来处理。</p><p>下面来看看doctrine是如何处理的。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$batchSize</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CmsUser</span><span class="token punctuation">;</span>    <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'user'</span> <span class="token operator">.</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Mr.Smith-'</span> <span class="token operator">.</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$em</span><span class="token operator">-></span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token variable">$batchSize</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$em</span><span class="token operator">-></span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$em</span><span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Detaches all objects from Doctrine!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$em</span><span class="token operator">-></span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Persist objects that did not make up an entire batch</span><span class="token variable">$em</span><span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>通过日志，我们发现<code>doctrine</code>所谓的<code>有效率</code>的方式是按<code>$batchSize</code>数量切分，进行事务提交。比直接的逐条<code>$em-&gt;flush();</code>操作省去了大量的<code>commit</code>网络通信。</p><p>通过<code>wireshark</code>抓包我们也验证了这一推断。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211210160127.png" alt=""></p><p>假设数据总数是 n, batchSize 是m:</p><ul><li>逐条flush,需要执行n次insert和commit,即2n次通信。</li><li>doctrine bulk操作是n+n/m次，通信次数会少很多。</li></ul><p>并不意味着将batchSize设置最大就是最有效的方式，batchSize越大也意味着flush的工作将会更耗时。</p><p>但与mysql 本身的批量处理还是会多非常多次的通信。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl_name <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用mysql本身的方法可能只要执行2次通信。</p><p>因此，其实doctrine官网那段话说的非常忠恳了，要想获得最佳性能可能需要根据特定RDBMS来相应的处理。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>长时间的事务不提交，会阻塞其他事务的提交么？</p><p>我们知道有的情况是会的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>somthing fun</title>
      <link href="2021/12/21/somthing-fun/"/>
      <url>2021/12/21/somthing-fun/</url>
      
        <content type="html"><![CDATA[<pre><code>#1) Respect the privacy of others.#2) Think before you type.#3) With great power comes great responsibility.</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊微信体系的几大平台</title>
      <link href="2021/12/08/%E8%81%8A%E8%81%8A%E5%BE%AE%E4%BF%A1%E4%BD%93%E7%B3%BB%E7%9A%84%E5%87%A0%E5%A4%A7%E5%B9%B3%E5%8F%B0/"/>
      <url>2021/12/08/%E8%81%8A%E8%81%8A%E5%BE%AE%E4%BF%A1%E4%BD%93%E7%B3%BB%E7%9A%84%E5%87%A0%E5%A4%A7%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当前微信有商户平台、开放平台、微信号(小程序)总共3大平台。跟订阅号、服务号一样，概念名词非常多,极容易弄混。跟其开发文档一样，微信体系被不少开发吐槽很深。</p></blockquote><p>现在就针对微信体系产品平台做一个总结，避免混淆和了解各个概念用途。</p><span id="more"></span><h2 id="平台产品"><a href="#平台产品" class="headerlink" title="平台产品"></a>平台产品</h2><ul><li>开放平台，<code>https://open.weixin.qq.com/</code></li><li>公众平台(含小程序) <code>https://mp.weixin.qq.com/</code></li><li>商户平台 <code>https://pay.weixin.qq.com/</code></li></ul><h2 id="公众平台"><a href="#公众平台" class="headerlink" title="公众平台"></a>公众平台</h2><p>回顾一下微信历史：</p><ul><li>2011年1月21日，微信正式发布</li><li>2011年5月，微信推出了”语音消息”这个关键功能</li><li>2012年5月，微信推出”朋友圈”</li><li>2013年8月，微信添加了公众号、微信支付</li><li>2017年1月，小程序的开发指南和 API 正式发布</li></ul><p>在13年推出的微信公众号微信支付能力，彼时公众号和微信支付大受欢迎。公众号又分为<code>服务号</code>和<code>订阅号</code>，订阅号可以说是揭开了自媒体爆发的帷幕。自此可以说中国<code>自媒体1.0</code>时代来临，<code>2.0时代</code>我认为是抖音、快手等平台的兴起。</p><ul><li>订阅号主要服务媒体、个人等用于信息发布</li><li>服务号提供更多的运营能力和自主开发接口能力,适合企业</li><li>小程序相对于公众号，相比公众号内的H5应用有更好的用户体验和更多的微信提供的接口能力。</li></ul><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211207173256.png" alt=""></p><p>服务号、订阅号功能区别</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211207173717.png" alt=""></p><p><a href="https://kf.qq.com/faq/170815aUZjeQ170815mU7bI7.html">腾讯客服官方对于公众号、订阅号的定义区别</a></p><p>这个链接是老链接了，这里的说法是只有微信认证的服务号才具备微信支付功能。</p><p>但是在最新的商户平台公众号接入支付里的介绍是支持订阅号接入支付功能。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211207174558.png" alt=""></p><p>现在我们了解到了，公众号(服务号、订阅号)、小程序的功能和区别了。</p><ul><li>如果你是个人自媒体或组织，没有计算机技术开发能力那么你大概需要<code>订阅号</code></li><li>如果你是企业，有开发能力那么你大概需要的是<code>服务号</code></li><li>如果你作为企业，又需要更好体验的用微信作为入口的移动应用那么相较于微信内的H5应用你可能更应该选择<code>小程序</code></li><li>公众号是服务号、订阅号的统称</li><li>公众号(服务号、订阅号)、小程序管理入口都是 <code>https://mp.weixin.qq.com</code></li></ul><h2 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h2><p>在中国,几乎99%的企业应该都会使用到微信支付，所以对接微信支付是企业应用开发者不可避免的工作。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211207184020.png" alt=""></p><p>其中，</p><ul><li>JSAPI支付</li><li>Native支付</li><li>APP支付</li><li>小程序支付</li></ul><p>都是开发者们会涉及到的可能需要对接的支付方式。</p><h3 id="JSAPI支付"><a href="#JSAPI支付" class="headerlink" title="JSAPI支付"></a>JSAPI支付</h3><blockquote><p>商户已有H5商城网站，用户通过消息或扫描二维码在微信内打开网页时，可以调用微信支付完成下单购买的流程。</p></blockquote><p><strong>应用载体：微信浏览器内打开的应用</strong></p><p>从技术角度讲，就是在<code>微信内打开移动页面</code>,通过JS(javascript)调用微信的API唤起支付。</p><p><strong>需要注意的是，JSAPI唤起只能是在微信内调用，即JSAPI支付一定是在微信浏览器内触发</strong></p><p>此支付方式场景有：</p><ul><li>从公众号导航或消息点开的H5网页</li><li>H5网页链接，微信扫码打开</li></ul><h3 id="H5支付"><a href="#H5支付" class="headerlink" title="H5支付"></a>H5支付</h3><blockquote><p>要求商户已有H5商城网站，并且已经过ICP备案。通过微信H5支付可以实现在非微信浏览器（如QQ浏览器、谷歌浏览器、Safari等）中使用微信支付的场景。</p></blockquote><p><strong>应用载体：非微信浏览器打开的H5应用</strong></p><p><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_3">微信官方H5支付介绍</a></p><p>这种支付已经不能从官方的导航页面找到了，只能从搜索引擎搜索出入口了。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211207195337.png" alt=""></p><p>我猜想大概也是因为上面说的，官方并不建议这么做。<br>现在很多企业会考虑将第二曲线业务应用使用H5的方式嵌入到主业务APP内，以达到快速迭代的目的。这样可能的情况就是，一个APP内有多种微信支付方式，<code>主业务的原生APP支付</code>和<code>第二曲线业务的H5支付方式</code>。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211207200000.png" alt=""></p><p>起关键的地方在于，使用<code>deeplink</code>跳转到微信客户端进行唤起微信支付。</p><blockquote><p>统一下单接口返回支付相关参数给商户后台，如支付跳转url（参数名“mweb_url”），商户通过mweb_url调起微信支付中间页</p></blockquote><p>统一下单API接口返回<code>支付跳转链接    mweb_url</code>.</p><p>mweb_url为拉起微信支付收银台的中间页面，可通过访问该url来拉起微信客户端，完成支付,mweb_url的有效期为5分钟。</p><h3 id="Native支付"><a href="#Native支付" class="headerlink" title="Native支付"></a>Native支付</h3><blockquote><p>Native支付是指商户系统按微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式。该模式适用于PC网站、实体店单品或订单、媒体广告支付等场景</p></blockquote><p>Native支付即扫码支付，主要应用场景是在<code>PC网站应用</code>通过微信扫描网站生成的带有商品信息的支付二维码进行支付。</p><p><strong>应用载体：企业的PC网站</strong></p><h3 id="App支付"><a href="#App支付" class="headerlink" title="App支付"></a>App支付</h3><blockquote><p>APP支付是指商户通过在移动端应用APP中集成开放SDK调起微信支付模块来完成支付。适用于在移动端APP中集成微信支付功能的场景。</p></blockquote><p><strong>应用载体：企业的APP</strong></p><h3 id="小程序支付"><a href="#小程序支付" class="headerlink" title="小程序支付"></a>小程序支付</h3><blockquote><p>商户已有微信小程序，用户通过好友分享或扫描二维码在微信内打开小程序时，可以调用微信支付完成下单购买的流程。</p></blockquote><p>类似于JSAPI支付，只是是在小程序内唤起。</p><p><strong>应用载体：微信小程序</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>上述5种支付方式,支付动作都是在微信APP内</li><li>要么本身业务应用就在微信内,要么是使用微信扫码或者APP跳转到微信</li><li>所有支付方式都需要调用一个接口<code>统一下单</code>,统一下单接口需要2个重要参数<code>appid</code>、<code>mchid</code></li></ul><blockquote><p>由于微信支付的产品体系全部搭载于微信的社交体系之上，所以直连商户或服务商商户接入微信支付之前，都需要有一个微信社交载体，该载体对应的ID即为APPID。</p></blockquote><p>统一下单所需要的appid即为载体的appid。不同载体需要在不同平台申请appid。 小程序、公众号前往<code>公众平台</code>申请,自有APP前往<code>开放平台</code>申请</p><p><code>mchid</code>是商户ID,是收款账号。需前往<code>商户平台</code>申请。</p><p><strong>一个mchid只能对应一个结算币种，若需要使用多个币种收款，需要申请对应数量的mchid。</strong></p><p>微信支付交易发起依赖于公众号、小程序、移动应用（即APPID）与商户号（即MCHID）的绑定关系，因此商户在完成签约后，<strong>需要确认当前商户号同appid的绑定关系，方可使用</strong>。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211207233039.png" alt=""></p><p>APPID和mchid可以是多对多的绑定关系,同时认证主体也会造成绑定失败。</p><p><a href="https://pay.weixin.qq.com/static/pay_setting/appid_protocol.shtml">appid和mchid绑定指引</a></p><ul><li>同主体绑定可自助处理</li><li>异主体绑定可能会受资格限定</li><li>商户号与其他类型账号建立关联关系后，暂不支持解绑</li><li>绑定的APPID如已有绑定商户号，则发起绑定申请的商户号需与APPID已绑定的<code>商户号费率</code>一致</li></ul><h2 id="第三方平台"><a href="#第三方平台" class="headerlink" title="第三方平台"></a>第三方平台</h2><p>在开放平台中可以新建第三方平台应用。</p><blockquote><p>微信开放平台-第三方平台（简称第三方平台）开放给所有通过开发者资质认证的开发者使用。在得到公众号或小程序运营者（简称运营者）授权后，第三方平台开发者可以通过调用微信开放平台的接口能力，为公众号或小程序的运营者提供账号申请、小程序创建、技术开发、行业方案、活动营销、插件能力等全方位服务。</p></blockquote><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211208095207.png" alt=""></p><p>简而言之是：如果你的企业没有研发能力，可以找此类服务商在获取你的授权后代你去开发一些功能。此类服务商需要首先新建第三方平台。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>到目前为止，3大平台都已经浮出水面，最后做一个总结补充。</p><ul><li>公众平台，运营者身份也会参与很多管理工作</li><li>开放平台，更多是开发者介入,提供无社交载体的APP支付应用创建以及其他的微信扫码登录、第三方平台等功能</li><li>商户平台，与财务关系紧密，与微信支付功能息息相关</li><li>第三方平台，与公众号/小程序服务商相关，提供给无研发能力的企业，授权服务商代开发的能力。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 编码人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot记录并统计sql探索,线程安全方式</title>
      <link href="2021/12/04/java/spring-boot%E8%AE%B0%E5%BD%95sql%E6%8E%A2%E7%B4%A2/"/>
      <url>2021/12/04/java/spring-boot%E8%AE%B0%E5%BD%95sql%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标记录每次请求内的http、es、mysql耗时，本篇讨论mysql部分</p></blockquote><p>为什么说要探索，这不是很简单的事么？但是能满足以下几点么？</p><ul><li>能记录limit等参数</li><li>能将参数和sql写一起，能直接使用</li><li>能记录耗时</li><li>能计数累加,统计一次请求中sql执行的总数和总耗时</li></ul><span id="more"></span><h2 id="spring原生能力"><a href="#spring原生能力" class="headerlink" title="spring原生能力"></a>spring原生能力</h2><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">logging.level.org.hibernate.SQL</span><span class="token punctuation">=</span><span class="token value attr-value">debug</span><span class="token key attr-name">logging.level.org.hibernate.type.descriptor.sql.BasicBinder</span><span class="token punctuation">=</span><span class="token value attr-value">trace</span></code></pre><p>通过上面两条配置。</p><ul><li>✔️可以显示sql.</li><li>❌不能和参数一行显示</li><li>❌不能显示limit参数</li><li>❌不能计数和记录耗时</li></ul><pre class="language-none"><code class="language-none">2021-02-23 19:35:42.932 DEBUG 97586 --- [  restartedMain] org.hibernate.SQL                        : select admin0_.id as id1_0_, admin0_.create_time as create_t2_0_, admin0_.modify_time as modify_t3_0_, admin0_.email as email4_0_, admin0_.password as password5_0_, admin0_.status as status6_0_, admin0_.username as username7_0_ from admin admin0_ where admin0_.username&#x3D;?2021-02-23 19:35:42.949 TRACE 97586 --- [  restartedMain] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [root]</code></pre><h2 id="原生log-org-hibernate-EmptyInterceptor"><a href="#原生log-org-hibernate-EmptyInterceptor" class="headerlink" title="原生log+org.hibernate.EmptyInterceptor"></a>原生log+org.hibernate.EmptyInterceptor</h2><p><code>org.hibernate.EmptyInterceptor</code>提供钩子，hibernate本身提供entity的curd钩子。重写<code>EmptyInterceptor</code>方法，可以实现计数。但是<code>onPrepareStatement</code>方法只是装配sql前的事件，而且不是完整的sql。</p><ul><li>✔️ 可以显示sql</li><li>❌ 不能和参数一行显示</li><li>❌ 不能显示limit参数</li><li>✔️ 能计数</li><li>❌ 不能记录耗时</li></ul><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">spring.jpa.properties.hibernate.ejb.interceptor</span><span class="token punctuation">=</span><span class="token value attr-value">com.vison.itdoc.config.HibernateInterceptor</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HibernateInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">EmptyInterceptor</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token class-name">Object</span> entity<span class="token punctuation">,</span> <span class="token class-name">Serializable</span> id<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> state<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> propertyNames<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Log.info("onload...", entity)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">onPrepareStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// count++</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">.</span><span class="token function">onPrepareStatement</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterTransactionCompletion</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        INSTANCE<span class="token punctuation">.</span><span class="token function">afterTransactionCompletion</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"after trans complete"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="log4jdbc"><a href="#log4jdbc" class="headerlink" title="log4jdbc"></a>log4jdbc</h2><p>log4jdbc能很好的解决sql完整显示和记录耗时的问题</p><pre class="language-none"><code class="language-none">2021-02-23 19:59:13.709  INFO 97586 --- [nio-8081-exec-1] jdbc.sqltiming                           : select posts0_.id as id1_2_, posts0_.create_time as create_t2_2_, posts0_.modify_time as modify_t3_2_, posts0_.content as content4_2_, posts0_.title as title5_2_ from posts posts0_ where 1&#x3D;1 order by posts0_.id asc limit 10 ; &#123;executed in 1 msec&#125;</code></pre><p>还能够定义超过1定时间的执行sql记录为error类型。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.googlecode.log4jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class="language-ini" data-language="ini"><code class="language-ini">spring.datasource.driver-class-name: net.sf.log4jdbc.DriverSpy<span class="token comment">#使用log4jdbc后mysql的url</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:log4jdbc:mysql://localhost:3306/xxxx?useUnicode=true&amp;characterEncoding=UTF-8</span><span class="token comment">#使用log4jdbc后oracle的url</span><span class="token comment">#spring.datasource.url: jdbc:log4jdbc:oracle:thin:@127.0.0.1:1521:orcl</span></code></pre><p>注意需要添加<code>spring.datasource.driver-class-name</code> 和更改 <code>spring.datasource.url</code> 将jdbc改为 jdbc:log4jdbc</p><p><em>log4jdbc.properties</em>可以定义更多配置</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#配置为需要记录的包或类匹配路径</span><span class="token comment">#log4jdbc.debug.stack.prefix=com.drp</span><span class="token comment">#log4jdbc加载的drivers (驱动名)</span><span class="token comment">#log4jdbc.drivers=oracle.jdbc.OracleDriver</span><span class="token key attr-name">log4jdbc.auto.load.popular.drivers</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#在日志中显示warn警告</span><span class="token key attr-name">log4jdbc.statement.warn</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#毫秒值.执行时间超过该值的SQL语句将被记录为warn级别.</span><span class="token key attr-name">log4jdbc.sqltiming.warn.threshold</span><span class="token punctuation">=</span><span class="token value attr-value">2000</span><span class="token comment">#毫秒值.执行时间超过该值的SQL语句将被记录为error级别.</span><span class="token key attr-name">log4jdbc.sqltiming.error.threshold</span><span class="token punctuation">=</span><span class="token value attr-value">3000</span><span class="token comment">#是把boolean记录为 'true'/'false' 还是 1/0. 默认设置为false,不启用,为了移植性.</span><span class="token comment">#log4jdbc.dump.booleanastruefalse=true</span><span class="token comment">#输出的sql,一行最大的字符数，默认90. 以后新版可能为0</span><span class="token comment">#log4jdbc.dump.sql.maxlinelength=90</span><span class="token comment">#如果在调试模式下转储，则转储整个堆栈跟踪  默认false</span><span class="token key attr-name">log4jdbc.dump.fulldebugstacktrace</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token comment">#是否记录某些类型的语句，默认true</span><span class="token key attr-name">log4jdbc.dump.sql.select</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">log4jdbc.dump.sql.insert</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">log4jdbc.dump.sql.delete</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">log4jdbc.dump.sql.update</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">log4jdbc.dump.sql.create</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#输出sql末尾处加入分号，默认false</span><span class="token key attr-name">log4jdbc.dump.sql.addsemicolon</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#将此设置为false以不修剪已记录的SQL</span><span class="token key attr-name">log4jdbc.trim.sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#将此设置为false不删除额外的空行</span><span class="token key attr-name">log4jdbc.trim.sql.extrablanklines</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#log4jdbc.suppress.generated.keys.exception=false</span></code></pre><ul><li>✔️ 可以显示sql</li><li>✔️ 不能和参数一起显示</li><li>✔️ 不能显示limit参数</li><li>❌ 能计数</li><li>✔️  能记录单个sql耗时</li><li>❌ 不能统计总耗时</li></ul><p>不足的是，单纯log4jdbc并不能满足所有。理论上log4jdbc+org.hibernate.EmptyInterceptor可以满足需求了</p><h2 id="P6Spy"><a href="#P6Spy" class="headerlink" title="P6Spy"></a>P6Spy</h2><p>测试完毕，发现P6Spy目前最能满足需求：</p><ul><li>✔️ 可以显示sql</li><li>✔️ 不能和参数一起显示</li><li>✔️ 不能显示limit参数</li><li>✔️ 能计数</li><li>✔️ 不能记录耗时</li><li>✔️ 支持curd事件前后钩子，钩子参数返回sql和执行耗时及异常信息🚀</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>p6spy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>p6spy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>同<code>log4jdbc</code>需要改driver和url</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.p6spy.engine.spy.P6SpyDriver</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:p6spy:mysql://localhost:3306/test?useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></code></pre><p><em>psy.properties</em>可以定义更多配置</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#modulelist=com.p6spy.engine.spy.P6SpyFactory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span><span class="token key attr-name">modulelist</span><span class="token punctuation">=</span><span class="token value attr-value">com.vison.itdoc.config.CustomeP6Factory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span><span class="token comment">#moduelist很关键，我这里使用了自定义的Factory，因为我需要自定义event</span><span class="token key attr-name">appender</span><span class="token punctuation">=</span><span class="token value attr-value">com.p6spy.engine.spy.appender.Slf4JLogger</span><span class="token key attr-name">logMessageFormat</span><span class="token punctuation">=</span><span class="token value attr-value">com.p6spy.engine.spy.appender.CustomLineFormat</span><span class="token key attr-name">customLogMessageFormat</span><span class="token punctuation">=</span><span class="token value attr-value">%(executionTime) ms|%(category)|%(sql)</span><span class="token key attr-name">excludecategories</span><span class="token punctuation">=</span><span class="token value attr-value">result,resultset,info,debug</span></code></pre><p>正常使用默认配置就可以显示出sql和耗时信息</p><pre class="language-none"><code class="language-none">4 ms|statement|select admin0_.id as id1_0_, admin0_.create_time as create_t2_0_, admin0_.modify_time as modify_t3_0_, admin0_.email as email4_0_, admin0_.password as password5_0_, admin0_.status as status6_0_, admin0_.username as username7_0_ from admin admin0_ where admin0_.username&#x3D;&#39;root&#39;</code></pre><p>可以看到，耗时信息和实际参数</p><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p><code>modulelist=com.p6spy.engine.spy.P6SpyFactory</code>改成<code>自定义Factory</code></p><p>自定义Factory</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomeP6Factory</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>p6spy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>spy<span class="token punctuation">.</span></span>P6Factory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">P6LoadableOptions</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token class-name">P6OptionsRepository</span> optionsRepository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">P6SpyOptions</span><span class="token punctuation">(</span>optionsRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">JdbcEventListener</span> <span class="token function">getJdbcEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">P6spyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用自定义Listener</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>自定义事件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P6spyListener</span> <span class="token keyword">extends</span> <span class="token class-name">JdbcEventListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAfterExecuteQuery</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatementInformation</span> statementInformation<span class="token punctuation">,</span> <span class="token keyword">long</span> timeElapsedNanos<span class="token punctuation">,</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">App</span><span class="token punctuation">.</span>sqlCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"execute query..."</span><span class="token punctuation">,</span> statementInformation<span class="token punctuation">.</span><span class="token function">getSqlWithValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAfterExecuteUpdate</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatementInformation</span> statementInformation<span class="token punctuation">,</span> <span class="token keyword">long</span> timeElapsedNanos<span class="token punctuation">,</span> <span class="token keyword">int</span> rowCount<span class="token punctuation">,</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">App</span><span class="token punctuation">.</span>sqlCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"execute update.."</span><span class="token punctuation">,</span> statementInformation<span class="token punctuation">.</span><span class="token function">getSqlWithValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAfterExecute</span><span class="token punctuation">(</span><span class="token class-name">StatementInformation</span> statementInformation<span class="token punctuation">,</span> <span class="token keyword">long</span> timeElapsedNanos<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"execute.."</span><span class="token punctuation">,</span> statementInformation<span class="token punctuation">.</span><span class="token function">getSqlWithValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到，我在自定义事件中进行了sql计数.于是我可以在请求结束时打印每次请求的总sql执行次数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestInitInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">RequestInitInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">App</span><span class="token punctuation">.</span>_uniq_req_no <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">App</span><span class="token punctuation">.</span>sqlCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">setMsgTraceNo</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span>_uniq_req_no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request start..."</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"finish request sql执行次数:%s"</span><span class="token punctuation">,</span> <span class="token class-name">App</span><span class="token punctuation">.</span>sqlCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>由于事件参数还给出了<code>timeElapsedNanos</code>,最终我们还能统计出所有sql执行的耗时。这样一来我们就能看出一次请求内，最耗时的操作具体是什么。达到类似以下效果：</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210224141855.png" alt=""></p><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><p>以上做法其实还有个问题,并没有解决线程安全问题。用ab测试后会发现,sql统计仍然有问题。此时我们需要用到<code>Threadlocal</code><br>在定义的全局静态属性当中实际上已经有状态了，而多线程当中的共享状态必然会发生意想不到的问题。所以这里要使用并发编程的相关处理办法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//使用ThreadLocal 定义统计属性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> count <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>其次,<strong>当Threadlocal与线程池一起使用的时候还需要额外的注意</strong>。简单的描述下会发生的问题：</p><ol><li>应用程序从线程池取出1个线程</li><li>然后存储了一些线程内的变量到该线程</li><li>一旦该线程处理完毕，应用程序便会将这个线程放回到线程池</li><li>当这个线程又被再次拿出来处理另外一个请求</li><li>因为应用程序上次没有进行专门的清理动作，所以在处理新的请求时使用的可能就是相同的<code>ThreadLocal</code>数据</li></ol><p>因此我们需要进行一些必要的清理动作</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//拦截器当中 在统计完毕时移除当前线程的Threadlocal变量</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestInitInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"finish request... 执行sql %d 次"</span><span class="token punctuation">,</span> <span class="token class-name">App</span><span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">App</span><span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样最终，我们可以安全地统计一个请求当中的sql执行总次数了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://knes1.github.io/blog/2015/2015-07-08-counting-queries-per-request-with-hibernate-and-spring.html">Counting Queries per Request with Hibernate and Spring</a></li><li><a href="https://github.com/p6spy/p6spy/issues/362">register an event handler</a></li><li><a href="https://www.baeldung.com/java-threadlocal">Threadlocal 处理线程安全问题</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM响应用户请求过程</title>
      <link href="2021/12/03/php/PHP-FPM%E5%93%8D%E5%BA%94%E7%94%A8%E6%88%B7%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/"/>
      <url>2021/12/03/php/PHP-FPM%E5%93%8D%E5%BA%94%E7%94%A8%E6%88%B7%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们发布了非常多的项目，让它在机器上运行。但是你知道PHP-FPM究竟是如何让你的源代码运行并处理大量的用户请求么。</p></blockquote><h2 id="响应过程"><a href="#响应过程" class="headerlink" title="响应过程"></a>响应过程</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211203094817.png" alt=""></p><span id="more"></span><p>Nginx和PHP-FPM通过 <a href="http://www.mit.edu/~yandros/doc/specs/fcgi-spec.html">Fastcgi 协议</a> 进行交流</p><pre class="language-none"><code class="language-none">Web browser www.example.com|        |   Transport over HTTP protocol  |        |    http server (server nginx &#x2F; APACHE)            |        |     Configuration analysis    Route to www.example.com&#x2F;index.php|        |Fast CGI module loaded with nginx|        |Fast CGI monitors 127.0.0.1:9000 addressesThrough the fast CGI protocol, the request is forwarded to PHP FPM for processing|        |Request reached 127.0.0.1:9000|        |PHP FPM monitoring 127.0.0.1:9000This can be done through PHP- fpm.conf  Make changes</code></pre><h2 id="并行模式"><a href="#并行模式" class="headerlink" title="并行模式"></a>并行模式</h2><p>PHP其实有2种模式来处理并发请求：</p><ul><li>基于进程</li><li>基于线程</li></ul><h3 id="进程模式流程"><a href="#进程模式流程" class="headerlink" title="进程模式流程"></a>进程模式流程</h3><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211203101157.png" alt=""></p><ol><li>模块初始化: MINIT()</li></ol><p>这个环节会初始化一些对象和一些每个请求会用到的信息，这个时候并没有开始接收请求。这段时间可以访问全局变量。</p><ol start="2"><li>请求初始化: RINIT()</li></ol><p>PHP在这个阶段开始处理request，PHP是一种无共享架构，提供了灵活的内存管理方式。<code>share-nothing architecture</code>意味着不用担心并发引发的错乱问题。</p><p>在此中，如果需要分配动态内存，将使用<code>Zend内存管理器</code>。Zend 内存管理器会跟踪你通过它分配的内存，当请求关闭时，如果您忘记这样做，它将尝试释放受请求约束的内存。</p><ol start="3"><li>请求终止：PRSHUTDOWN()</li></ol><p>PHP处理请求结束，此阶段清理请求内存。未来的请求当中不会有当前请求的数据。</p><p>此阶段，RSHUTDOWN()的调用时机：</p><ul><li>来自<code>register_shutdown_function</code>注册的方法，用户态的shutdown调用执行完</li><li>所有的对象析构函数执行完</li><li>PHP输出缓冲flush完毕</li><li><code>max_execution_time</code>触达</li></ul><ol start="4"><li>请求终止后: PRSHUTDOWN()</li></ol><p>此阶段很少被使用。</p><ol start="5"><li>全局初始化: GINIT()</li></ol><p>此钩子在线程模型下会为每个请求都触发一次，但在多进程模型下只触发一次。</p><p>全局变量不会被清除在每个请求之后，需要每次进行<code>RINIT</code>操作。</p><ol start="6"><li>全局终止：GSHUTDOWN()</li></ol><p>与GINIT一样，多线程模式下每次请求之后都会触发，多进程模式只会执行一次。</p><p>所以总体上的执行流程如下：</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211203175045.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.phpinternalsbook.com/php7/extensions_design/php_lifecycle.html">https://www.phpinternalsbook.com/php7/extensions_design/php_lifecycle.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet Filiter 和 Spring Intercetors,记录请求日志</title>
      <link href="2021/12/02/java/Intercetors-%E8%AE%B0%E5%BD%95%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97/"/>
      <url>2021/12/02/java/Intercetors-%E8%AE%B0%E5%BD%95%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在前面的文章我们有看到Servlet Filiter的作用。与之类似的Spring中我们知道有拦截器Intercetors。</p></blockquote><p>现在有1个需求，记录request的所有请求信息，URL、请求方法、请求体。我们自然而然会想到使用<code>Filiter</code>或<code>Intercetors</code></p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211201133516.png" alt=""></p><p><code>Filiter</code>和<code>Intercetors</code>的区别在于所执行的时间点不同，但都在到达controller之前。看起来二者都可以完成这个需求。</p><span id="more"></span><p>我们先来看下Filiter。Spring当中本身支持servlet的几个注解。</p><blockquote><p>When using an embedded container, automatic registration of classes annotated with @WebServlet, @WebFilter, and @WebListener can be enabled by using @ServletComponentScan.</p></blockquote><p>但是他也说了，如果要保证顺序，需要通过定义<code>FilterRegistrationBean</code>的方式。</p><blockquote><p>you must define a FilterRegistrationBean for the Filter and set the registration bean’s order using the setOrder(int) method.</p></blockquote><p><strong>不管是Filiter还是Intercetors都是需要拿到request,从request获取要记录的信息。当要记录请求体的时候，在Java IO当中有个最大的问题是如果一旦<code>request.getInputStream()</code> 后面就会读取不到请求体</strong>，并抛出<code>HttpMessageNotReadableException: Required request body is missing</code> 异常。</p><p>Spring本身提供记录请求体的Filiter <code>AbstractRequestLoggingFilter</code>,我们可以继承并自定义。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizedRequestLoggingFilter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRequestLoggingFilter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">beforeRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>启用该<code>bean</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfigure</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogFilter</span><span class="token punctuation">></span></span> <span class="token function">logFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 利用 slf4j.MDC 记录 唯一请求码</span>        <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogFilter</span><span class="token punctuation">></span></span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogFilter</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//过滤所有路径</span>        bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomizedRequestLoggingFilter</span> <span class="token function">logInitFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//原生bean记录请求信息 请求体</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"logInitFilter..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CustomizedRequestLoggingFilter</span> filter                <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomizedRequestLoggingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setIncludeClientInfo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setIncludeQueryString</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setIncludePayload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setMaxPayloadLength</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setIncludeHeaders</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setAfterMessagePrefix</span><span class="token punctuation">(</span><span class="token string">"REQUEST DATA : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>但是原生的<code>AbstractRequestLoggingFilter</code>提供的Message格式已经固定，并不能根据自己的喜好来。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211202103252.png" alt=""></p><p>而且换行符没被转义，虽然便于调试观察但并不利于ELK这样的日志体系记录日志。</p><p>要解决这个问题就需要自己读取request并记录，就必须解决上文提到的<code>request.getInputStream()</code> stream读取问题。</p><p>解决办法网上也有，就是通过拷贝一份stream，将拷贝的stream继续扔回<code>FilterChain</code>。示例代码如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogClientFilter</span><span class="token punctuation">></span></span> <span class="token function">logClientFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//自定义的 request log filter</span>    <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogClientFilter</span><span class="token punctuation">></span></span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogClientFilter</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogClientFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>关键的MultiRead对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiReadHttpServletRequest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> cachedBytes<span class="token punctuation">;</span>    <span class="token comment">/**     * Construct a new multi-read wrapper.     *     * @param request to wrap around     */</span>    <span class="token keyword">public</span> <span class="token class-name">MultiReadHttpServletRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletInputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedBytes <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token function">cacheInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CachedServletInputStream</span><span class="token punctuation">(</span>cachedBytes<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedReader</span> <span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* Cache the inputstream in order to read it multiple times. For         * convenience, I use apache.commons IOUtils         */</span>        cachedBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cachedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* An inputstream which reads the cached request body */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CachedServletInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">ServletInputStream</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteArrayInputStream</span> buffer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">CachedServletInputStream</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contents<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReadListener</span><span class="token punctuation">(</span><span class="token class-name">ReadListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Not implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>日志记录Filiter</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogClientFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"log client..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectNode</span> rootNode <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">createObjectNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpServletRequest</span> httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>        <span class="token class-name">MultiReadHttpServletRequest</span> wrappedRequest <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">MultiReadHttpServletRequest</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rootNode<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rootNode<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"clientIp"</span><span class="token punctuation">,</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rootNode<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>wrappedRequest<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token operator">||</span> method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rootNode<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            rootNode<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jvt.me/posts/2020/05/25/read-servlet-request-body-multiple/">https://www.jvt.me/posts/2020/05/25/read-servlet-request-body-multiple/ 多次读取servlet请求体</a></li><li><a href="https://www.javadevjournal.com/spring/log-incoming-requests-spring/">https://www.javadevjournal.com/spring/log-incoming-requests-spring/ 记录spring的请求</a></li><li><a href="https://levelup.gitconnected.com/how-to-log-the-request-body-in-a-spring-boot-application-10083b70c66">https://levelup.gitconnected.com/how-to-log-the-request-body-in-a-spring-boot-application-10083b70c66</a></li><li><a href="https://stackoverflow.com/questions/54035778/commonsrequestloggingfilter-not-working-in-spring-boot-application/54545890#">https://stackoverflow.com/questions/54035778/commonsrequestloggingfilter-not-working-in-spring-boot-application/54545890#</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet | servlet学习笔记</title>
      <link href="2021/11/28/java/servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/11/28/java/servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211128120653.png" alt=""></p><p>简单而言，Servlet是一个API，本质上的实现是由承载的Servlet容器去处理。通过Java多线程处理并响应客户端的Http Request。</p><span id="more"></span><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211128105759.png" alt=""></p><p>截止目前，最新版本规范为6.0。</p><h2 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器 Filter"></a>过滤器 Filter</h2><p>在HTTP请求到达Servlet之前，可以被一个或多个Filter预处理，类似打印日志、登录检查等逻辑，完全可以放到Filter中。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211128110826.png" alt=""></p><p>Filter不光能拦截请求，对请求进行预处理，还能够修改返回。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211128111038.png" alt=""></p><h2 id="事件监听器-Listener"><a href="#事件监听器-Listener" class="headerlink" title="事件监听器 Listener"></a>事件监听器 Listener</h2><p>Servlet 侦听器用于侦听 Web 容器中的事件，例如，当您创建会话时，或在会话中放置属性时，或者如果您在另一个容器中被动化并激活时，要订阅这些事件，</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211128111619.png" alt=""></p><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><ol><li><p><strong>javax.servlet.AsyncEvent</strong> – 在 ServletRequest 上启动的异步操作（通过调用 ServletRequest#startAsync 或ServletRequest#startAsync（ServletRequest， ServletResponse））完成、超时或产生错误时触发的事件。</p></li><li><p><strong>javax.servlet.http.HttpSessionBindingEvent</strong> – 当会话绑定或取消绑定 HttpSessionListener 时，这种类型的事件要么发送到实现 HttpSessionBindingListener 的对象，要么发送到在 Web 中配置的 </p></li><li><p><strong>HttpSessionAttributeListener</strong>当任何属性在会话中被绑定、取消绑定或替换时。会话通过调用 HttpSession.setAttribute 绑定对象，并通过调用 HttpSession.removeAttribute 解除绑定对象。<br>当对象从会话中删除时，我们可以将此事件用于清理活动。</p></li><li><p><strong>javax.servlet.http.HttpSessionEvent</strong> – 这是一个类，表示 Web 应用程序中会话更改的事件通知。</p></li><li><p><strong>javax.servlet.ServletContextAttributeEvent</strong> – 事件类，用于通知有关 Web 应用程序 ServletContext 属性的更改。</p></li><li><p><strong>javax.servlet.ServletContextEvent</strong>– 这是有关 Web 应用程序 servlet 上下文更改的通知的事件类。</p></li><li><p><strong>javax.servlet.ServletRequestEvent</strong> – 此类事件表示 ServletRequest 的生命周期事件。该事件的源是此 Web 应用程序的 ServletContext。</p></li><li><p><strong>javax.servlet.ServletRequestAttributeEvent</strong>– 这是一个事件类，用于通知应用程序中 servlet 请求的属性的更改。</p></li></ol><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>在2005年的servlet 2.5中引入了注解能力，可以不再配置太多xml。</p><p><code>@WebServlet</code> </p><p>声明java类为servlet</p><p><code>@WebInitParam</code> </p><p>作为<code>WebServlet</code>参数注解。初始化serverl参数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>  name <span class="token operator">=</span> <span class="token string">"BankAccountServlet"</span><span class="token punctuation">,</span>   description <span class="token operator">=</span> <span class="token string">"Represents a Bank Account and it's transactions"</span><span class="token punctuation">,</span>   urlPatterns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/account"</span><span class="token punctuation">,</span> <span class="token string">"/bankAccount"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   initParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"savings"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServlet</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> accountType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        accountType <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>       <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>@WebFilter</code></p><p>声明过滤器，如果要对请求进行拦截、修改而不影响逻辑代码。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>  urlPatterns <span class="token operator">=</span> <span class="token string">"/account/*"</span><span class="token punctuation">,</span>  filterName <span class="token operator">=</span> <span class="token string">"LoggingFilter"</span><span class="token punctuation">,</span>  description <span class="token operator">=</span> <span class="token string">"Filter all account transaction URLs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInFilter</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>Filter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>        <span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>           <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>@WebListener</code></p><p>声明事件监听器。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankAppServletContextListener</span>   <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"ATTR_DEFAULT_LANGUAGE"</span><span class="token punctuation">,</span> <span class="token string">"english"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// ... </span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p><code>@ServletSecurity</code>、<code>@HttpConstraint</code>、<code>@HttpMethodConstraint</code></p><p>类似nginx认证功能</p><p><code>@MultipartConfig</code></p><p>处理文件上传配置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"/uploadCustDocs"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@MultipartConfig</span><span class="token punctuation">(</span>  fileSizeThreshold <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">,</span>  maxFileSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">,</span>  maxRequestSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span>  location <span class="token operator">=</span> <span class="token string">"./custDocs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadCustomerDocumentsServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>       <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Part</span> part <span class="token operator">:</span> request<span class="token punctuation">.</span><span class="token function">getParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            part<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"myFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211201093231.png" alt=""></p><p>‎Java servlet API 由两个包组成。一个是javax.servlet，另一个是javax.servlet.http。javax.servlet 包包含可用于编写独立于协议的 servlet 的所有类和接口，javax.servlet.http 包含编写 HTTP 特定 servlet 所需的所有类和接口。让我们详细探讨一下 Java Servlet API。‎</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ol><li><a href="https://o7planning.org/10395/java-servlet-filter">https://o7planning.org/10395/java-servlet-filter</a></li><li><a href="https://www.codejava.net/java-ee/servlet/how-to-modify-http-response-using-java-filter">https://www.codejava.net/java-ee/servlet/how-to-modify-http-response-using-java-filter 如何使用filter修改response</a></li><li><a href="https://en.wikipedia.org/wiki/Jakarta_Servlet">https://en.wikipedia.org/wiki/Jakarta_Servlet 维基servlet</a></li><li><a href="https://www.baeldung.com/javaee-web-annotations">Java-web-注解 www.baeldung.com</a></li><li><a href="https://www.simplilearn.com/tutorials/java-tutorial/java-servlets">Java-servlets</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP本质</title>
      <link href="2021/10/30/java/%E6%98%A5%E5%A4%A9%E4%B9%8B%E5%89%8D-http/"/>
      <url>2021/10/30/java/%E6%98%A5%E5%A4%A9%E4%B9%8B%E5%89%8D-http/</url>
      
        <content type="html"><![CDATA[<blockquote><p>试图跳过spring,而学习spring boot是不可能的。学习java web开发，从基础开始学习。就应当了解http、servlet、tomcat</p></blockquote><span id="more"></span><ul><li>起源</li><li>它解决什么问题</li><li>实现原理</li></ul><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>1980年6月至12月间，伯纳斯-李在的CERN（欧洲核子研究组织）担任工作。实验室的研究人员需要大量的信息查阅或沟通。在那段时间里，他提出了个构想：创建一个以超文本系统为基础的项目，方便研究人员分享及更新讯息。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20201222144257.png" alt=""></p><p>1989年3月，他写下了他的初步构想，并在1990年重新配置。然后被他的经理麦克·森德尔（Mike Sendall）所接受。他使用与ENQUIRE系统相似的概念来创建万维网，为此他设计并构建了第一个网页浏览器。</p><p>世界上第一个网站在CERN搭建，而CERN则位于法国边境。网站在1991年8月6日上线。</p><p>上线 的第一个网址，<a href="http://info.cern.ch/hypertext/WWW/TheProject.html">http://info.cern.ch/hypertext/WWW/TheProject.html</a> 告诉人们万维网是什么，用户如何使用浏览器，如何创建网页服务器。</p><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20201218163846.png" alt=""></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>一个连接是由传输层来控制的，这从根本上不属于HTTP的范围。HTTP并不需要其底层的传输层协议是面向连接的，只需要它是可靠的，或不丢失消息的（至少返回错误）。在互联网中，有两个最常用的传输层协议：TCP是可靠的，而UDP不是。因此，HTTP依赖于面向连接的TCP进行消息传递，但连接并不是必须的。因此通过socket编程就能实现http协议。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8081</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听指定端口</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Socket</span> sock <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"connected from "</span> <span class="token operator">+</span> sock<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Socket</span> sock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> sock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sock <span class="token operator">=</span> sock<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span> <span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span> <span class="token class-name">OutputStream</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">handle</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client disconnected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Process new http request..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 读取HTTP请求:</span>        <span class="token keyword">boolean</span> requestOk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> first <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"GET / HTTP/1."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            requestOk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> header <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 读取到空行时, HTTP Header读取完毕</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestOk <span class="token operator">?</span> <span class="token string">"Response OK"</span> <span class="token operator">:</span> <span class="token string">"Response Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestOk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 发送错误响应:</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.0 404 Not Found\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Length: 0\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 发送成功响应:</span>            <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;body>&lt;h1>Hello, world!&lt;/h1>&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.0 200 OK\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Connection: close\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Length: "</span> <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空行标识Header和Body的分隔</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// TODO: 处理HTTP请求</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304265903570978">廖雪峰-web基础</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4j使用指南</title>
      <link href="2021/10/30/java/log4j%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>2021/10/30/java/log4j%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>对于刚开始接触java的人来说，用什么来打日志似乎快被java的这么多概念搞懵了。log4j、log4j2、slf4j、logback?!!</p><span id="more"></span><h2 id="盘点"><a href="#盘点" class="headerlink" title="盘点"></a>盘点</h2><p>盘点下我们遇到过哪些日志</p><ul><li><code>java.util.logging</code></li><li><code>org.apache.commons.logging.Log</code></li><li><code>Log4j</code>和<code>Log4j2</code></li><li><code>SLF4J</code> 和 <code>Logback</code></li></ul><p>简单概括 <code>Log4j</code>和<code>Log4j2</code>是<code>commons.logging</code></p><h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><p>Apache Log4j 是一个非常古老的日志框架，并且是多年来最受欢迎的日志框架。 它引入了现代日志框架仍在使用的基本概念，如分层日志级别和记录器。</p><p>2015 年 8 月 5 日，该项目管理委员会宣布 Log4j 1.x 已达到使用寿命。 建议用户使用 Log4j 1 升级到 Apache<br>Log4j 2。</p><h2 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h2><p>Apache Log4j 2是对 Log4j 的升级，它比其前身 Log4j 1.x 提供了重大改进，并提供了 Logback 中可用的许多改进，同时修复了 Logback 架构中的一些固有问题。</p><p>与 Logback 一样，Log4j2 提供对 SLF4J 的支持，自动重新加载日志配置，并支持高级过滤选项。 除了这些功能外，它还允许基于 lambda 表达式对日志语句进行延迟评估，为低延迟系统提供异步记录器，并提供无垃圾模式以避免由垃圾收集器操作引起的任何延迟。</p><p>所有这些功能使 Log4j2 成为这三个日志框架中最先进和最快的。</p><h2 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h2><p>logback 是由 log4j 创始人设计的又一个开源日志组件，作为流行的 log4j 项目的后续版本，从而替代 log4j。</p><p>Logback 的体系结构足够通用，以便在不同情况下应用。 目前，logback 分为三个模块：logback-core，logback-classic和logback-access。</p><p>logback-core：模块为其他两个模块的基础。<br>logback-classic：模块可以被看做是log4j的改进版本。此外，logback-classic 本身实现了 SLF4J API，因此可以在 logback 和其他日志框架（如 log4j 或 java.util.logging（JUL））之间来回切换。<br>logback-access：模块与 Servlet 容器（如 Tomcat 和 Jetty）集成，以提供 HTTP 访问日志功能。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20201221143239.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPStorm使用配置</title>
      <link href="2021/09/24/PHPStorm%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>2021/09/24/PHPStorm%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>最近又开始使用PHPStorm了，为什么是”又”？因为断断续续使用过几次，都中断过。要破解感觉还是麻烦，一直使用netbeans也感觉没什么问题。</p><p>由于最近在考虑<code>doctrine\annotation</code>,netbeans的支持能力还是不足，所以又开始体验<code>phpstorm</code>。<br>几个在netbeans里喜欢的功能，千方百计开始在phpstorm找回来,以下是记录。</p><span id="more"></span><h2 id="项目名显示git分支"><a href="#项目名显示git分支" class="headerlink" title="项目名显示git分支"></a>项目名显示git分支</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210924174001.png" alt=""></p><p>如图，由于经常切换分支。有时候可能会在错误的分支上进行开发，项目名后面标上分支名这个功能我很喜欢。</p><p>发现phpstorm使用<code>GitToolBox</code>可以解决。</p><h2 id="关闭显示项目路径"><a href="#关闭显示项目路径" class="headerlink" title="关闭显示项目路径"></a>关闭显示项目路径</h2><p>但是还有个问题是，项目名会显示项目地址，这点很烦。可以通过自定义phpstorm属性办到。<br>打开 Help/Edit Custom Properties…<br>新建 idea.properties file</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">project.tree.structure.show.url</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">ide.tree.horizontal.default.autoscrolling</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></code></pre><h2 id="隐藏nbproject"><a href="#隐藏nbproject" class="headerlink" title="隐藏nbproject"></a>隐藏nbproject</h2><p>nbproject是netbeans的配置文件夹,在phpstorm项目中显示非常难受。<br>Preferences-&gt;File Types -&gt; Files and Folders to Ignore.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写好代码的七种武器之依赖注入</title>
      <link href="2021/09/09/%E5%86%99%E5%A5%BD%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%83%E7%A7%8D%E6%AD%A6%E5%99%A8%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>2021/09/09/%E5%86%99%E5%A5%BD%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%83%E7%A7%8D%E6%AD%A6%E5%99%A8%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210909111628.png" alt=""></p><p>在之前的文章中有说到，写好代码的原则。其中提到了<code>SOLID</code></p><p>那么什么是<code>SOLID</code></p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>SOLID 原则首先由著名的计算机科学家 Robert C·Martin （著名的Bob大叔）由 2000 年在他的论文中提出。但是 SOLID 缩略词是稍晚由 Michael Feathers 先使用的。</p><p>Bob大叔也是畅销书《代码整洁之道》和《架构整洁之道》的作者，也是 “Agile Alliance” 的成员。</p><p>他们达成的目标是一致的：</p><blockquote><p>“创建可多人协作的、易于理解的、易读的以及可测试的代码。”</p></blockquote><p>现在依次看一下各个原则，SOLID 是以下是原则的缩写：</p><ul><li>S 单一职责原则</li><li>O 开闭原则</li><li>L 里氏替换原则</li><li>I 接口隔离原则</li><li>D 依赖反转原则</li></ul><p>本文主要讲D 依赖反转原则</p><h2 id="what和why"><a href="#what和why" class="headerlink" title="what和why"></a>what和why</h2><ol><li>什么是依赖反转</li><li>为什么需要依赖反转</li></ol><p>依赖注入DI是依赖反转的一种实现方式，<br>我看了很多定义描述我觉得都不如来一个实例对比更能解释清楚。</p><p><em>先来看看不使用DI的案例</em></p><pre class="language-none"><code class="language-none">Application needs Foo (e.g. a controller), so:Application creates FooApplication calls Foo    Foo needs Bar (e.g. a service), so:    Foo creates Bar    Foo calls Bar        Bar needs Bim (a service, a repository, …), so:        Bar creates Bim        Bar does something</code></pre><p>可以看到的问题是:<code>依赖被分散层层创建</code></p><p><em>再来看看使用DI的情况</em></p><pre class="language-none"><code class="language-none">Application needs Foo so:Application gets Foo from the Container, so:    Container creates Bim    Container creates Bar and gives it Bim    Container creates Foo and gives it BarApplication calls Foo    Foo calls Bar    Bar does something</code></pre><p>依赖被集中创建和注入</p><p><em>这样的好处是什么？举个例子吧</em></p><p>如何你的一个Library X 使用了 Logger Y， 你想使用你自己定义的logger Z? 使用DI的话, 就不需要改变 Library X的代码了.</p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><p>再来看看实例代码版本</p><h3 id="非DI"><a href="#非DI" class="headerlink" title="非DI"></a>非DI</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">GoogleMaps</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getCoordinatesFromAddress</span><span class="token punctuation">(</span><span class="token variable">$address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// calls Google Maps webservice</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">OpenStreetMap</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getCoordinatesFromAddress</span><span class="token punctuation">(</span><span class="token variable">$address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// calls OpenStreetMap webservice</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">StoreService</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getStoreCoordinates</span><span class="token punctuation">(</span><span class="token variable">$store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$geolocationService</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoogleMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// or $geolocationService = GoogleMaps::getInstance() if you use singletons</span>        <span class="token keyword">return</span> <span class="token variable">$geolocationService</span><span class="token operator">-></span><span class="token function">getCoordinatesFromAddress</span><span class="token punctuation">(</span><span class="token variable">$store</span><span class="token operator">-></span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>业务场景很简单，就是获取店铺的坐标，情况是可以有2个或多个地图服务。</p><h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">StoreService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$geolocationService</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">GeolocationService</span> <span class="token variable">$geolocationService</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">geolocationService</span> <span class="token operator">=</span> <span class="token variable">$geolocationService</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getStoreCoordinates</span><span class="token punctuation">(</span><span class="token variable">$store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">geolocationService</span><span class="token operator">-></span><span class="token function">getCoordinatesFromAddress</span><span class="token punctuation">(</span><span class="token variable">$store</span><span class="token operator">-></span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">interface</span> <span class="token class-name-definition class-name">GeolocationService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getCoordinatesFromAddress</span><span class="token punctuation">(</span><span class="token variable">$address</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">GoogleMaps</span> <span class="token keyword">implements</span> <span class="token class-name">GeolocationService</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">OpenStreetMap</span> <span class="token keyword">implements</span> <span class="token class-name">GeolocationService</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span></code></pre><p>通过构造函数传入地图服务实例，不用对<code>StoreService</code>进行更改。<code>StoreService</code>不用关心是哪个地图服务，与依赖解耦开。</p><h3 id="PHP-DI"><a href="#PHP-DI" class="headerlink" title="PHP-DI"></a>PHP-DI</h3><p>用PHP-DI进行实现，不用通过构造函数的方式进行传递地图服务。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$storeService</span> <span class="token operator">=</span> <span class="token variable">$container</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'StoreService'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注入改为容器统一注入。</p><pre class="language-php7" data-language="php7"><code class="language-php7">$container-&gt;set(&#39;GeolocationService&#39;, \DI\create(&#39;GoogleMaps&#39;));</code></pre><p>引入了容器的概念的好处是，如果让容器在整个workflow里，则可以轻易的全局更改任何的依赖。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>管理|关于OKR的思考</title>
      <link href="2021/09/06/%E5%85%B3%E4%BA%8EOKR%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>2021/09/06/%E5%85%B3%E4%BA%8EOKR%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>起因是由于我的老板在月初的时候又布置任务要求写下本月的关键目标Top3。也就是OKR Top3,并且要求用SMART原则。</p><p>在此之前领导一直告诉我们KPI和OKR是分别用来管理销售团队和职能团队的。因为销售团队很容易用数据指标来衡量工作结果，但职能团队的工作并不好用数据指标来衡量。</p><p>但是SMART原则五条又有Measurable(可衡量的),于是我有点惊讶。如果OKR+SMART那跟KPI有什么区别？</p><span id="more"></span><p>于是我认为OKR+SMART = KPI. 但究竟是不是这样呢？</p><h2 id="OKR和KPI"><a href="#OKR和KPI" class="headerlink" title="OKR和KPI"></a>OKR和KPI</h2><p>先来看看KPI，因为本身OKR是后来才提出来的概念。相较于OKR，KPI更广和更早被人所知。</p><p>KPI 是 Key Performance Indicator 的缩写，中文名称是「关键绩效指标」，即一系列衡量工作成效的重要指标。</p><p>关键点有了，<code>指标</code></p><p><em>KPI 必须是客观的、可衡量的，以下是一些常见的 KPI：</em></p><p>医疗保健行业：患者等待时间、平均治疗费用</p><p>零售行业：坪效、每名员工销售额</p><p>人力资源部门：离职率、平均招聘时间</p><p>销售部门：销售收入、拨打电话的次数</p><p>客服部门： 客户满意度NPS</p><p>再来看下OKR</p><p>OKR 是 Objective and Key Results 的缩写，中文名称是「目标与关键结果法」，是一套帮助组织实现目标管理、推动执行与协作的工具和方法，关键点<code>工具和方法</code>。</p><p>当然KPI也可以理解为方法，但是OKR的工具性和方法指导意义会更强。</p><h2 id="OKR"><a href="#OKR" class="headerlink" title="OKR"></a>OKR</h2><p>OKR强调在”第一性原理”思考方式的基础上,聚焦战略<br>重点,提岀鼓舞人心的目标,选择RO更优的策略,从而<br><code>激发组织活力,降低共识成本</code>,促进团队和个人围绕组织<br>目标高效协作.</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210906205210.png" alt=""></p><p>一个公司都会指定公司终生奋斗的<code>使命</code>，<code>愿景</code>。</p><p>关于<code>使命</code>和<code>愿景</code> 我也听到过我领导跟我讲的比较有意思的解释版本。</p><p><code>使命</code> 可能是当下就可以实现的。<br><code>愿景</code> 可能不能实现，但是公司要为之奋斗的目标。</p><p>例如 apple 愿景：让每人拥有一台计算机；使命：推广公平的资料使用惯例，建立用户对互联网之信任和信心</p><p>言归正传。为了完成<code>使命</code>或者接近<code>愿景</code>。公司高层必然会制定长期的战略计划。</p><p>那么为了这些战略计划，每个层级每个人都因为想到<code>我可以完成什么</code>和<code>如何达到目标</code>。</p><p>以及更细化的为了落地这些<code>目标</code>和<code>关键结果</code> 需要建立哪些<code>项目</code>或<code>项目任务</code></p><p>从宏观的企业战略到微观个人任务，OKR能很好的成为企业目标管理体系和个人的工作方法。</p><p><em>OKR是更符合时代需要的管理方法</em></p><ul><li><p>企业端:VUCA时代,让组织持续进化是应对不确定性的根本</p></li><li><p>人才端:个体崛起,管理从强调<code>管控走冋自驱与协作</code></p></li><li><p>普适性:围绕目标开展工作是很自然的事</p></li><li><p>供给端: OKR SaaS把领先实践产品化,让更多企业以低成本受益</p></li><li><p>认知:OKR不是万能药,正确认识OKR才能用好OKR</p></li></ul><p><em>战略层面:从长远规划转向敏捷迭代</em></p><p>过去企业做战略通常要看3-5年,前提是市场允许你保持线性增长的合理预期。今天,非线性增长成为普遍情况,企业更加聚焦在眼前的半年或一年,以更快的速度应对市场和需求变化。</p><p><em>组织层面:从科层制、条线式运作,向分布式决策、网络化协作的方向发展</em></p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210907095116.png" alt=""></p><p>科层制最大的特点,是指令式的上传下达,每一层都依赖上一层的决策,较为被动低效,也难以产生创新。分布式、网络化的组织里,每个节点(团队或个人)都更加自主的决策和行动,主动发起协作,更及时的响应变化,涌现更多创新。</p><p><em>文化层面:从强调管控、一致到更加多元化、兼容并蓄</em></p><p>强调管控也是科层制组织特征的延续,今天的组织需要更多样化的思想和实践,产生新的变化,在內外部形成更加健康的生态,才能产生更多可能性。</p><p>OKR让每一位员工了解组织的整体目标,找到自己工作与组织目标的联系,获得意义与成就感</p><h2 id="OKR认知"><a href="#OKR认知" class="headerlink" title="OKR认知"></a>OKR认知</h2><p><em>第一,OKR并不解决战略规划的问题</em></p><p>○KR能够帮助企业更好地思考和落地战略,但不是用了OKR就有更好的战略OKR本质是一种人人皆围绕战略在主动思考并度量结果的方法和工具</p><p><em>第二,OKR不能代替领导力</em></p><p>仅仅设定一个目标并不能带来成功,领导者、管理者带领团队共同努力,才能更好达成目标各级管理者都必须主动思考业务本质和最佳路径通过OKR分派任务,是对OKR的误用,更是管理上的懒政</p><p><em>第三,OKR不是绩效考核</em></p><p>目标管理让员工专注思考如何实现目标,绩效考核专注于对员工所做贡献给予公平回报,前者是价值创造,后者是价值分配,二者有本质区别领先实践主张将目标管理和绩效评价解绑。例如谷歌、字节跳动,○KR作为目标管理工具,绩效考核通过360°评价实现。如果直接考核OKR达成率,组织势必又将陷入KP|式的讨价还价,也更容易滋生短期行为</p><h2 id="OKR落地"><a href="#OKR落地" class="headerlink" title="OKR落地"></a>OKR落地</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210907100005.png" alt=""></p><p>OKR的实施步骤遵循经典的“PDCA”目标管理流程。以年度为例,OKR的运行一般遵循</p><p>目标制定-过程跟进-总结复盘-考核应用四步实施流程,并形成闭环管理。</p><p>在一个年度内,会有多个双月或季度OKR周期,此周期内主要以目标制定-过程跟进-总结复盘环节形成的小闭环进行运作。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210907100800.png" alt=""></p><p><em>五大成功因素</em></p><ul><li>高层管理者的积极参与</li><li>把OKR应用到日常管理</li><li>创造良好的实施环境</li><li>便捷高效的OKR系统</li><li>专门的OKR运营团队</li></ul><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210907101053.png" alt=""></p><p>这里我认为 第一 第二点尤为重要。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>OKR不同于KPI，OKR+SMART 也不等于KPI</li><li>OKR是更适应当代的管理工具，面对新时代的”人”和瞬即万变的快节奏</li><li>OKR更注重目标导向,没有精确规结果，更能激发团队自主性</li><li>并不意味着可以摈弃KPI，而应采取OKR为主KPI为辅的方式。</li><li>对KPI的认知尤为重要，上到最高层下到基层都应该理解OKR的作用和如何运用OKR。</li><li>所有管理方法都应以人为本，离不开基础的沟通、演讲技巧。要让方法发挥功效，还需要有强大的感召力。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构|代码整洁之道</title>
      <link href="2021/07/30/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
      <url>2021/07/30/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>软件质量不但依赖于架构及项目管理，还与代码质量紧密相关。</p><blockquote><p>代码质量与整洁度成正比，干净的代码即在质量上较为可靠，也为后期维护、升级奠定良好基础。</p></blockquote><p>另一种概念叫做<code>极限编程</code></p><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul><li>SOLID</li><li>DRY</li><li>KISS</li></ul><h3 id="童子军军规"><a href="#童子军军规" class="headerlink" title="童子军军规"></a>童子军军规</h3><p><strong>让营地比你来时更干净</strong></p><span id="more"></span><h2 id="有意义的命名"><a href="#有意义的命名" class="headerlink" title="有意义的命名"></a>有意义的命名</h2><ul><li>名副其实，表达真实意义</li><li>不误导</li><li>做有意义的区分，避免 a、b、c</li><li>可读、可搜索</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>单一职责</li><li>行数 20-100</li></ul><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul><li>0参数最佳，3个参数已经勉为其难</li><li>标识参数丑陋不堪，向参数传入布尔值骇人听闻</li><li>如果函数需要三个以上的参数，说明这些参数应该封装为类了</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Circle</span> <span class="token function">makeCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">,</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Circle</span> <span class="token function">makeCircle</span><span class="token punctuation">(</span><span class="token class-name">Point</span> center<span class="token punctuation">,</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">bar</span><span class="token punctuation">(</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="无副作用"><a href="#无副作用" class="headerlink" title="无副作用"></a>无副作用</h3><p>函数承诺只做一件事，实际上还做了其他的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserValidator</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Cryptographer</span> cryptographer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">UserGateway</span><span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token class-name">User</span><span class="token punctuation">.</span>NULL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> codedPhrase <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getPhraseEncodedByPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> phrase <span class="token operator">=</span> cryptographer<span class="token punctuation">.</span>decrypt <span class="token punctuation">(</span>codedPhrase<span class="token punctuation">,</span>password <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"Valid Password"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>phrase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实际上还做了session 初始化的操作</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>要么抽离<code>Session.initialize()</code>,要么重命名为<code>checkPasswordAndInitializeSession</code> 不要给人误导。</p><h3 id="使用异常代替错误码"><a href="#使用异常代替错误码" class="headerlink" title="使用异常代替错误码"></a>使用异常代替错误码</h3><p>使用错误码就要定义错误码枚举，枚举类被大量导入调用。一旦增加或修改错误枚举，就要对所有引入的文件进行编译。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">deletePage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token operator">==</span>E_OK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">deleteReference</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">==</span>E_OK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>configKeys<span class="token punctuation">.</span><span class="token function">deleteKey</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">makeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>E_OK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"page deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"configKey not deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           logger<span class="token punctuation">.</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"deleteReference from registry failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"delete failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> E_ERROR<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">deletePage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>    registry<span class="token punctuation">.</span><span class="token function">deleteReference</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    configKeys<span class="token punctuation">.</span><span class="token function">deleteKey</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">makeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释并不像辛德勒的名单。它们并不“纯然地好”。实际上，注释最多也就是一种必须的恶。若编程语言足够有表达力，或者我们长于用这些语言来表达意图，就不那么需要注释——也许根本不需要。</p><h3 id="注释掉的代码"><a href="#注释掉的代码" class="headerlink" title="注释掉的代码"></a>注释掉的代码</h3><p>20世纪60年代，曾经有那么一段时间，注释掉的代码可能有用。但我们已经拥有优良的源代码控制系统如此之久，这些系统可以为我们记住不要的代码。我们无需再用注释来标记，删掉即可，它们丢不了。我担保。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="文件长度"><a href="#文件长度" class="headerlink" title="文件长度"></a>文件长度</h3><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210722110617.png" alt=""></p><p>200-500</p><h3 id="行字符数"><a href="#行字符数" class="headerlink" title="行字符数"></a>行字符数</h3><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210722111053.png" alt=""></p><p>上限120</p><h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><h3 id="德莫特定律"><a href="#德莫特定律" class="headerlink" title="德莫特定律"></a>德莫特定律</h3><p>著名的得墨式耳律（The Law of Demeter)认为，模块不应了解它所操作对象的内部形。如上节所见，对象隐藏数据，曝露操作。这意味着对象不应通过存取器曝露其内部结构<br>因为这样更像是曝露而非隐藏其内部结构。<br>更准确地说，得墨式耳律认为，类C的方法f只应该调用以下对象的方法：</p><ul><li>C</li><li>由f创建的对象；</li><li>作为参数传递给f的对象；</li><li>由C的实体变量持有的对象。</li></ul><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><ul><li>别传null值</li><li>别返回null值</li></ul><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>“复杂要人命。它消磨开发者的生命，让产品难以规划、构建和测试。”<br>——Ray Ozzie,微软公司首席技术官</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>在依赖管理情景中，对象不应负责实体化对自身的依赖。反之，它应当将这份权责移交给其他“有权力”的机制，从而实现控制的反转。因为初始设置是一种全局问题，这种授权机制通常要么是main例程，要么是有特定目的的容器。</p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><blockquote><p>“一开始就做对系统”纯属神话。</p></blockquote><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>AOP有时会与实现它的技术相混淆，例如方法拦截和通过代理做的“封包”。AOP系统的真正价值在于用简洁和模块化的方式指定系统行为。</p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>并发编程很难，非常难。如果你不那么细<br>心，就会搞出不堪入目的东西来。看看以下常见的迷思和误解：</p><ul><li><p>并发总能改进性能<br>并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。<br>事情没那么简单。</p></li><li><p>编写并发程序无需修改设计<br>事实上，并发算法的设计有可能与单线程系统的设计极不相同。目的与时机的解藕往往对系统结构产生巨大影响。</p></li><li><p>在采用Web或EJB容器的时候，理解并发问题并不重要<br>实际上，你最好了解容器在做什么，了解如何对付本章后文将提到的并发更新、死锁等问题。</p></li></ul><p>下面是一些有关编写并发软件的中肯说法：</p><ul><li>并发会在性能和编写额外代码上增加一些开销；</li><li>正确的并发是复杂的，即便对于简单的问题也是如此；<br>并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待；</li><li>并发常常需要对设计策略的根本性修改。</li></ul><h2 id="味道建议"><a href="#味道建议" class="headerlink" title="味道建议"></a>味道建议</h2><h3 id="命名常量代替魔术数"><a href="#命名常量代替魔术数" class="headerlink" title="命名常量代替魔术数"></a>命名常量代替魔术数</h3><h3 id="准确"><a href="#准确" class="headerlink" title="准确"></a>准确</h3><ul><li>用浮点数表示货币几近于犯罪。</li><li>因为你不想做并发更新就避免使用锁和/或事务管理往好处说也是一种懒惰行为。在代码中做决定时，确认自己足够准确。</li><li>明确自己为何要这么做，如果遇到异常情况如何处理。</li><li>别懒得理会决定的准确性。如果你打算调用可能返回null的函数，确认自己检查了null值。</li><li>如果查询你认为是数据库中唯一的记录，确保代码检查不存在其他记录。</li><li>如果要处理货币数据，使用整数！并恰当地处理四舍五入。</li><li>如果可能有并发更新，确认你实现了某种锁定机制。</li><li>代码中的含糊和不准确要么是意见不同的结果，要么源于懒惰。无论原因是什么，都要消除。</li></ul><h3 id="返回异常"><a href="#返回异常" class="headerlink" title="返回异常"></a>返回异常</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">/**  *   * @param array $awbnos  * @throws Exception|ConnectionTimeOutException  * @return array Description  */</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fetchTrace</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$awbnos</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword return-type">array</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre><p>php 利用 phpdoc 和 php7 特性能支持让调用者注意异常和返回值的正确处理。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>java 函数定义语法天生支持。</p><h3 id="避免过多嵌套"><a href="#避免过多嵌套" class="headerlink" title="避免过多嵌套"></a>避免过多嵌套</h3><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210729173311.png" alt=""></p><h2 id="基本法"><a href="#基本法" class="headerlink" title="基本法"></a>基本法</h2><ul><li>单一职责，贯彻落实</li><li>短、少，类1000行，方法120行，参数3个，严格要求。</li><li>消灭mess,有1个就会有无数个</li><li>Later equals never 稍后等于永不，别等现在就去做</li><li>打磨，分解函数、修改名称、消除重复。缩短和重新安置方法。有拆散类。同时保持测试通过。<code>保持重构、热爱重构、注意单元测试回归测试</code></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ol><li>《Clean Code》</li><li><a href="http://kaelzhang81.github.io/2020/04/10/%E8%AF%91-%E8%AE%BE%E8%AE%A1%E9%AB%98%E8%B4%A8%E9%87%8F%E8%BD%AF%E4%BB%B6/">http://kaelzhang81.github.io/2020/04/10/译-设计高质量软件/</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 技术工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用PHPMD让你的php代码更干净更易维护</title>
      <link href="2021/07/27/php/%E5%88%A9%E7%94%A8PHPMD%E8%AE%A9%E4%BD%A0%E7%9A%84php%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%B9%B2%E5%87%80%E6%9B%B4%E6%98%93%E7%BB%B4%E6%8A%A4/"/>
      <url>2021/07/27/php/%E5%88%A9%E7%94%A8PHPMD%E8%AE%A9%E4%BD%A0%E7%9A%84php%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%B9%B2%E5%87%80%E6%9B%B4%E6%98%93%E7%BB%B4%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<p>PHPMD - PHP Mess Detector</p><p>等价于java工具PMD，能够对php 源代码进行如下问题检测：</p><ul><li>可能的bug</li><li>欠佳的代码</li><li>过于复杂的表达式</li><li>未使用的方法、变量、参数、属性</li></ul><p>最新版本发布于 2021/05/11</p><span id="more"></span><p><a href="https://phpmd.org/about.html">https://phpmd.org/about.html</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><pre class="language-shell" data-language="shell"><code class="language-shell">phpmd /path/to/source text codesize</code></pre><ul><li>第一个参数 要检测的代码地址</li><li>第二个参数指定输出检测结果的格式</li><li>第三个参数是指定的规则集</li></ul><h2 id="规则集合"><a href="#规则集合" class="headerlink" title="规则集合"></a>规则集合</h2><ul><li><code>Clean Code</code>: 一些包含clean code的规则集合，包括面向对象设计的 SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）原则。</li><li><code>Code Size</code> : 有关代码大小的相关问题，例如行数等</li><li><code>Controversial</code> : 具有争议的规则，可以不参考此规则</li><li><code>Design</code> ： 设计规则，包含类依赖数量等等</li><li><code>Naming</code>: 命名规则</li><li><code>Unused Code</code>: 未使用代码规则</li></ul><p>关于<code>clean code</code> 有一本书名就叫 &lt;&lt; Clean Code &gt;&gt;,个人读下来感受颇深。 </p><p>这里主要介绍一些我认为非常有必要注意的规则</p><h2 id="Clean-Code"><a href="#Clean-Code" class="headerlink" title="Clean Code"></a>Clean Code</h2><h3 id="BooleanArgumentFlag"><a href="#BooleanArgumentFlag" class="headerlink" title="BooleanArgumentFlag"></a>BooleanArgumentFlag</h3><p>布尔标志参数违反单一责任原则（SRP）,可以将此类方法一拆为二。</p><pre class="language-PHP" data-language="PHP"><code class="language-PHP">class Foo &#123;    public function drink($thirsty &#x3D; true) &#123;        if($thirsty)&#123;            &#x2F;&#x2F; 喝2杯        &#125;else&#123;            &#x2F;&#x2F; 喝一杯        &#125;    &#125;&#125;</code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">drinkThirsty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 喝2杯</span>            <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">drinkUnThirsty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">// 喝2杯</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ElseExpression"><a href="#ElseExpression" class="headerlink" title="ElseExpression"></a>ElseExpression</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">bar</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// one branch</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// another branch</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>像这样的if else的表达式其实是没必要的，可通过三元表达式、拆分方法或者可能的情况下先return来规避这类问题，以将代码简单或增加可读性。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">bar</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// one branch</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// another branch</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Code-Size"><a href="#Code-Size" class="headerlink" title="Code Size"></a>Code Size</h2><h3 id="CyclomaticComplexity"><a href="#CyclomaticComplexity" class="headerlink" title="CyclomaticComplexity"></a>CyclomaticComplexity</h3><p>圈复杂度，用来衡量代码复杂度的一个计算规则。复杂度越高代表代码可读性、可维护性越差，易错性更高、集成测试更难。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210727111045.png" alt=""></p><h4 id="点边计算法"><a href="#点边计算法" class="headerlink" title="点边计算法"></a>点边计算法</h4><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210727110713.png" alt=""></p><p>上述表达式的圈复杂度为 e = 10 n = 8 Cyclomatic Complexity = 10 - 8 + 2 = 4</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210727111603.png" alt=""></p><p>计算公式为：</p><p>V(G) = E - N + 2</p><p>其中，e表示控制流图中边的数量，n表示控制流图中节点的数量。</p><p>更多可参考 <a href="http://kaelzhang81.github.io/2017/06/18/%E8%AF%A6%E8%A7%A3%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6/">http://kaelzhang81.github.io/2017/06/18/详解圈复杂度/</a></p><h3 id="ExcessiveMethodLength"><a href="#ExcessiveMethodLength" class="headerlink" title="ExcessiveMethodLength"></a>ExcessiveMethodLength</h3><p>方法长度，该规则有2个属性</p><p>minimum 最小限定值 默认 100</p><p>ignore-whitespace 是否忽略空白行 默认 false</p><h3 id="ExcessiveClassLength"><a href="#ExcessiveClassLength" class="headerlink" title="ExcessiveClassLength"></a>ExcessiveClassLength</h3><p>类长度</p><p>minimum 最小限定值 默认 1000</p><p>ignore-whitespace 是否忽略空白行 默认 false</p><h3 id="ExcessiveParameterList"><a href="#ExcessiveParameterList" class="headerlink" title="ExcessiveParameterList"></a>ExcessiveParameterList</h3><p>参数个数限定</p><p>minimum 10，根据《clean code》一书的说法，这个值应该限定为3</p><h3 id="ExcessivePublicCount"><a href="#ExcessivePublicCount" class="headerlink" title="ExcessivePublicCount"></a>ExcessivePublicCount</h3><p>公共方法、公共属性</p><p>minimum    45</p><h3 id="TooManyFields"><a href="#TooManyFields" class="headerlink" title="TooManyFields"></a>TooManyFields</h3><p>maxfields    15</p><h3 id="TooManyMethods"><a href="#TooManyMethods" class="headerlink" title="TooManyMethods"></a>TooManyMethods</h3><p>maxmethods    25<br>ignorepattern    (^(set|get))i</p><h3 id="TooManyPublicMethods"><a href="#TooManyPublicMethods" class="headerlink" title="TooManyPublicMethods"></a>TooManyPublicMethods</h3><p>maxmethods    10    The method count reporting threshold<br>ignorepattern    (^(set|get))i</p><h2 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h2><p>有的默认规则也许并不能满足自身需求需做舍弃或修改。例如函数参数数，在《clean code》一书中定义的是最多为3，而phpmd默认指定的是10. 10个确实已经非常难看了，想象你去调用一个有10个参数的函数，你一定会吐槽懵逼的。</p><p>好在phpmd这些都可以修改，如下：</p><ul><li>引入unusedcode规则集</li><li>引入codesize,并暂时排除<code>NPathComplexity</code>和<code>CyclomaticComplexity</code>这两个理解起来有一定困难的规则。诚然<code>CyclomaticComplexity</code>在度量复杂度十分有效，但若你的所有函数已经满足<code>ExcessiveMethodLength</code>已经进步很大了，所以一步步来。</li><li>修改ExcessiveParameterList,让限定值为3.</li><li>修改ExcessiveMethodLength和ExcessiveClassLength,忽略空白行</li><li>排除StaticAccess规则</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ruleset</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>My first PHPMD rule set<span class="token punctuation">"</span></span>         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://pmd.sf.net/ruleset/1.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://pmd.sf.net/ruleset/1.0.0                     http://pmd.sf.net/ruleset_xml_schema.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>                     http://pmd.sf.net/ruleset_xml_schema.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>        My custom rule set that checks my code...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rulesets/unusedcode.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rulesets/codesize.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ExcessiveParameterList<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NPathComplexity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CyclomaticComplexity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rulesets/codesize.xml/ExcessiveParameterList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minimum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>                    3                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rulesets/codesize.xml/ExcessiveClassLength<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ignore-whitespace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>                    true                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rulesets/codesize.xml/ExcessiveMethodLength<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ignore-whitespace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>                    true                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rulesets/cleancode.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StaticAccess<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ruleset</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程|用phpunit进行单元测试</title>
      <link href="2021/07/23/php/%E7%94%A8phpunit%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>2021/07/23/php/%E7%94%A8phpunit%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>最近读了一本书《clean code》。深有感悟，感觉非常接地气，讲到了日常编码中真正遇到的困扰。大致我总结下就是要做几件事：</p><ul><li>重构，定期重构，保持重构</li><li>clean code,编写整洁、易维护的代码</li><li>单元测试</li></ul><p>本篇我们讲下如何利用phpunit进行单元测试</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里主要说明下安装的版本问题，最新版phpunit-latest目前依赖php7.4. 但是我们线上版本仍然是php7.2,因此我们需要安装旧的版本.</p><p><a href="https://phpunit.de/announcements/phpunit-8.html">https://phpunit.de/announcements/phpunit-8.html</a>  从这个链接能找到phpunit-8。</p><p>安装的方式有2种，<code>PHAR</code> 和 <code>composer</code>，两种方式都可以全局安装。</p><p><a href="https://phpunit.readthedocs.io/zh_CN/latest/installation.html#installation-requirements">https://phpunit.readthedocs.io/zh_CN/latest/installation.html#installation-requirements</a> 官方的教程文档里不推荐进行全局安装。</p><blockquote><p>请注意，并不推荐全局安装 PHPUnit，比如说放在 /usr/bin/phpunit 或 /usr/local/bin/phpunit。<br>相反，PHPUnit 应该作为项目本地依赖项进行管理。</p></blockquote><p>但是我还是选择全局安装，因为不想将本地太多依赖。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="IDE提示"><a href="#IDE提示" class="headerlink" title="IDE提示"></a>IDE提示</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>TestCase</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">RedisCacheTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">&#123;</span>       <span class="token variable">$res</span> <span class="token operator">=</span>  <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Hll<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Cache</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'foo'</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>这是我的一个测试用例脚本，测试脚本类需要继承<code>TestCase</code>.</p><p>由于我的安装方式并不是本地项目安装，所以在ide不会提示TestCase的相关方法。这对于来说是不能容忍的，不过好在IDE能额外的配置引入项目外的文件进行提示。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210723100857.png" alt=""></p><h3 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h3><p>再来看看工程目录结构</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210723101019.png" alt=""></p><p>在我编写的一个<code>cache</code>组件库中</p><ul><li><code>src</code>作为源代码目录</li><li><code>tests</code>作为测试用例目录</li><li><code>bootstrap.php</code>是phpunit的启动加载文件，用于做些全局的初始化动作，比如加载autoload.</li></ul><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><pre class="language-shell" data-language="shell"><code class="language-shell">phpunit --bootstrap tests&#x2F;bootstrap.php --verbose tests&#x2F;case </code></pre><p>该命令是执行测试 tests/case下的所有测试用例文件，当然你也可以具体到只执行单个文件。</p><p><code>--bootstrap</code></p><p>加载启动文件</p><p><code>--colors</code></p><p>彩色输出</p><p><code>--debug</code></p><p>输出调试信息，例如当一个测试开始执行时输出其名称。</p><p><code>--testtox</code></p><p>以<code>testtox</code>格式显示测试结果</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210723102912.png" alt=""></p><p><code>--configuration</code>、<code>-c</code></p><p>从 XML 文件中读取配置信息。</p><p>如果<code>phpunit.xml</code> 或 <code>phpunit.xml.dist</code>（按此顺序）存在于当前工作目录并且未使用 <code>--configuration</code>，将自动从此文件中读取配置。</p><h2 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h2><pre class="language-shell" data-language="shell"><code class="language-shell">phpunit -d memory_limit&#x3D;256M tests&#x2F;Unit&#x2F;TestMessage.php --coverage-html .&#x2F;tests&#x2F;html --whitelist app&#x2F;Services&#x2F;MessageService.php</code></pre><p>带上<code>--coverage-html</code>选项后,phpunit会生成覆盖率检测报告。使用者可以以此来查看项目代码当中,被测试的情况。哪些代码经过了测试，哪些未被测试。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20220406134808.png" alt=""></p><p>如上图，展示了方法的测试覆盖情况。有1个覆盖率是0,另一个是100%。</p><p>为什么方法还有覆盖百分比？ 一个方法有不同逻辑条件流程，测试参数不一定能把所以的逻辑覆盖到。可能测试了<code>if</code>的情况,<code>else</code>的并未覆盖到。所以有的时候,测试用例需要对一个测试方法进行多次调用测试。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$service</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$service</span><span class="token operator">-></span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertIsInt</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$service</span><span class="token operator">-></span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertIsInt</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="whitelist"><a href="#whitelist" class="headerlink" title="whitelist"></a>whitelist</h3><p>查看<a href="https://phpunit.de/manual/6.5/en/appendixes.configuration.html#appendixes.configuration.whitelisting-files">官网配置文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习编写php拓展</title>
      <link href="2021/07/07/php/%E5%AD%A6%E4%B9%A0%E7%BC%96%E5%86%99php%E6%8B%93%E5%B1%95/"/>
      <url>2021/07/07/php/%E5%AD%A6%E4%B9%A0%E7%BC%96%E5%86%99php%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p><strong>为什么要学习编写php拓展？</strong></p><p>1.目前市面上有数据库或中间件无php驱动<br>2.有自己的公共组件或函数,虽然可以使用composer，为了提升性能替代composer包<br>3.为了学习php内核原理或其他拓展的内部实现原理</p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello,world"></a>hello,world</h2><p><strong>1.源码下载</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> https://www.php.net/distributions/php-7.2.19.tar.bz2<span class="token function">tar</span> -xvf php-7.2.19.tar.bz2</code></pre><p><strong>2.增加函数声明</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> php_vison.h<span class="token comment"># 在其中增加 PHP_FUNCTION(vison_print);</span><span class="token function">vim</span> vison.c<span class="token comment"># 将如下代码中的PHP_FE和PHP_FE_END中加入下面代码（这的代码是将函数指针注册到Zend引擎）</span>PHP_FE<span class="token punctuation">(</span>vison_print,  NULL<span class="token punctuation">)</span></code></pre><p><strong>3.函数定义</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> vison.c在最后加上创建执行方法vison_print</code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token function">PHP_FUNCTION</span><span class="token punctuation">(</span>vison_print<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">php_printf</span><span class="token punctuation">(</span><span class="token string">"Hello vison!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  RETURN_TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>4.编译</strong></p><pre class="language-none"><code class="language-none">phpize.&#x2F;configure &amp;&amp; make &amp;&amp; make install# 然后将生成的vison.so放入配置vim &#x2F;etc&#x2F;php.iniextension&#x3D;vison.so#然后输入php -m查看配置</code></pre><p><strong>4.验证</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">php -r <span class="token string">"vison_print();"</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ介绍和场景使用</title>
      <link href="2021/06/25/RabbitMQ%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8/"/>
      <url>2021/06/25/RabbitMQ%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">rabbitmq-manger</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3<span class="token punctuation">-</span>management        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always        <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> 5672<span class="token punctuation">:</span><span class="token number">5672</span>          <span class="token punctuation">-</span> 8091<span class="token punctuation">:</span><span class="token number">15672</span></code></pre><p>使用docker进行快速安装</p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ul><li>2007年8月，Rabbit公司发行了 RabbitMQ 1.1.0.</li><li>2009年8月，VMware出资4.2亿美元收购了SpringSource[9]，并在一段时间内作为VMware的一个独立的部门；公司原有的商业产品以vFabric应用套件名义发售。之后SpringSource又接连收购了RabbitMQ[10]、Redis[11]和Gemstone[12]。除Redis外，它们的产品也成为了vFabric应用套件的一部分。</li></ul><p>你会发现一个有趣而诧异的事实，VMware 和 Spring 、RabbitMQ、Redis这些大名鼎鼎的技术是同属一家公司。而 著名的 Spring背后的SpringSource公司主要以培训和咨询盈利。</p><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210616101427.png" alt=""></p><blockquote><p>RabbitMQ is a message broker: it accepts and forwards messages. You can think about it as a post office: when you put the mail that you want posting in a post box, you can be sure that Mr. or Ms. Mailperson will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office and a postman.</p></blockquote><p>这是官网最开头的一段介绍,这里将RabbitMQ类比为邮局派信场景，RabbitMQ扮演邮箱、邮局、邮差的角色。这里也看到了 <code>broker</code> 这个单词，Kafka也有broker这个概念，这里我们暂且将它理解为<code>代理</code>的意思。</p><h2 id="生产者-producer"><a href="#生产者-producer" class="headerlink" title="生产者 producer"></a>生产者 producer</h2><p>简单理解就是发送消息的程序</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618112249.png" alt=""></p><h2 id="消费者-consumer"><a href="#消费者-consumer" class="headerlink" title="消费者 consumer"></a>消费者 consumer</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618112407.png" alt=""></p><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 queue"></a>队列 queue</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618112446.png" alt=""></p><p>消息存储于queue当中，多个producer 可往一个 queue发送消息</p><h2 id="交换机-Exchange"><a href="#交换机-Exchange" class="headerlink" title="交换机 Exchange"></a>交换机 Exchange</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618112856.png" alt=""></p><p>交换机是用来发送消息的AMQP实体。交换机拿到一个消息之后将它路由给一个或零个队列。它使用哪种路由算法是由交换机类型和被称作绑定（bindings）的规则所决定的(这个后面会讲到)。</p><p><strong>Exchange Type</strong></p><ul><li>direct  直连</li><li>fanout  扇出</li><li>topic   主题</li><li>headers  头</li></ul><p>除交换机类型外，在声明交换机时还可以附带许多其他的属性，其中最重要的几个分别是：</p><ul><li>Name</li><li>Durability （消息代理重启后，交换机是否还存在）</li><li>Auto-delete （当所有与之绑定的消息队列都完成了对此交换机的使用后，删掉它）</li><li>Arguments（依赖代理本身）</li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">exchange_declare</span><span class="token punctuation">(</span>       <span class="token variable">$exchange</span><span class="token punctuation">,</span>       <span class="token variable">$type</span><span class="token punctuation">,</span>       <span class="token variable">$passive</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>       <span class="token variable">$durable</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>       <span class="token variable">$auto_delete</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>       <span class="token variable">$internal</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>       <span class="token variable">$nowait</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>       <span class="token variable">$arguments</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token variable">$ticket</span> <span class="token operator">=</span> <span class="token constant">null</span>   <span class="token punctuation">)</span></code></pre><p>持久（durable）、暂存（transient）。持久化的交换机会在消息代理（broker）重启后依旧存在，而暂存的交换机则不会（它们需要在代理再次上线后重新被声明）。然而并不是所有的应用场景都需要持久化的交换机。</p><p><strong>默认交换机</strong></p><p>那就是每个新建队列（queue）都会自动绑定到默认交换机上，绑定的路由键（routing key）名称与队列名称相同。</p><p><strong>直连交换机 Direct</strong></p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618113517.png" alt=""></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hello_queue'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hello_exchange'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hello_key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它是如何工作的：</p><ul><li>将一个队列绑定到某个交换机上，同时赋予该绑定一个路由键（routing key）</li><li>当一个携带着路由键为hello_key的消息被发送给直连交换机hello_exchange时，交换机会把它路由给hello_queue的队列。</li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hello_exchange'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hello_key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618113859.png" alt=""></p><p><strong>扇形交换机  fanout</strong></p><p>扇型交换机（funout exchange）将消息路由给绑定到它身上的所有队列，而不理会绑定的路由键。</p><p>如果N个队列绑定到某个扇型交换机上，当有消息发送给此扇型交换机时，交换机会将消息的拷贝分别发送给这所有的N个队列。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618114009.png" alt=""></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// RabbitFanoutProduce.php</span><span class="token variable">$faker</span> <span class="token operator">=</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'zh_CN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPStreamConnection</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.106.179'</span><span class="token punctuation">,</span> <span class="token number">5672</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建通道</span><span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">exchange_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.fanout'</span><span class="token punctuation">,</span> <span class="token class-name static-context">AMQPExchangeType</span><span class="token operator">::</span><span class="token constant">FANOUT</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$body</span> <span class="token operator">=</span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPMessage</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'delivery_mode'</span> <span class="token operator">=></span> <span class="token class-name static-context">AMQPMessage</span><span class="token operator">::</span><span class="token constant">DELIVERY_MODE_PERSISTENT</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.fanout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>RabbitFanoutProduce</code> 生产者定义了一个<code>test.fanout</code> 交换机类型是<code>AMQPExchangeType::FANOUT</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// lmsConsoumer.php</span><span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPStreamConnection</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.106.179'</span><span class="token punctuation">,</span> <span class="token number">5672</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建通道</span><span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.lms'</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.lms'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.fanout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">' [x] '</span><span class="token punctuation">,</span> <span class="token variable">$msg</span><span class="token operator">-></span><span class="token property">body</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_consume</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.lms'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>lmsConsoumer</code> 订阅了一个<code>test.lms</code>的队列并绑定到<code>test.fanout</code>交换机</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// omsConsoumer.php</span><span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPStreamConnection</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.106.179'</span><span class="token punctuation">,</span> <span class="token number">5672</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建通道</span><span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.oms'</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.oms'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.fanout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">' [x] '</span><span class="token punctuation">,</span> <span class="token variable">$msg</span><span class="token operator">-></span><span class="token property">body</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_consume</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.oms'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>omsConsoumer</code> 订阅了一个<code>test.oms</code>的队列并绑定到<code>test.fanout</code>交换机</p><p>示例中演示了，一个生产者生产消息给2个系统订阅消费。</p><p>Fanout 典型的一个应用场景是多个应用系统订阅一个消息事件。</p><p>eg： 客服系统、运营系统、财务系统同时订阅订单系统的订单状态变更事件。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618114806.png" alt=""></p><p>这样不同系统都能各自使用各自的队列处理订单的变更业务逻辑。</p><p>细化下场景举个例子：</p><p>当订单完结 order close:</p><ul><li>客服系统需要给客户发送一个客户满意度调查</li><li>运营系统需要发送一张按订单消费金额配比的优惠券</li><li>财务系统需要计算这笔订单的入账</li></ul><p><strong>主题交换机 topic</strong></p><p>主题交换机（topic exchanges）通过对消息的路由键和队列到交换机的绑定模式之间的匹配，将消息路由给一个或多个队列。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618114944.png" alt=""></p><p>topic有点类似 direct和fanout的结合体，即可以广播又可以按一定规则指定 route.</p><p>上面示例图案例：</p><ul><li>这是一个关于动物的消息消费程序</li><li>有关orange的动物将进入Q1 ，例如 fast.orange.pig 快速的橙色猪</li><li>有关 rabbit 和 lazy 的动物将进入 Q2 ，例如 lazy.green.rabbit 或 lazy.yellow.monkey</li><li>如果匹配多个模式则进入多个相应的队列，例如 lazy.orange.monkey 则会进入Q1和Q2</li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$faker</span> <span class="token operator">=</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'zh_CN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPStreamConnection</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.106.179'</span><span class="token punctuation">,</span> <span class="token number">5672</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建通道</span><span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">exchange_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.topic'</span><span class="token punctuation">,</span> <span class="token class-name static-context">AMQPExchangeType</span><span class="token operator">::</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Q1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Q2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Q1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.topic'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'*.orange.*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Q2'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.topic'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'*.*.rabbit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Q2'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.topic'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'lazy.#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$body</span> <span class="token operator">=</span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPMessage</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'delivery_mode'</span> <span class="token operator">=></span> <span class="token class-name static-context">AMQPMessage</span><span class="token operator">::</span><span class="token constant">DELIVERY_MODE_PERSISTENT</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.topic'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fast.orange.pig'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.topic'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'lazy.green.rabbit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test.topic'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'lazy.orange.monkey'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210618115131.png" alt=""></p><p>可以看到3个消息，发送到了2个队列。Q1和Q2各有2个，因为lazy.orange.monkey进入了2个队列。</p><p><strong>头交换机 header</strong></p><p>有时消息的路由操作会涉及到多个属性，此时使用消息头就比用路由键更容易表达，头交换机（headers exchange）就是为此而生的。头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。</p><p>它提供更多的匹配，可设置x-match 为any 或all 来控制是任意匹配还是全部匹配。</p><h3 id="队列-queue-1"><a href="#队列-queue-1" class="headerlink" title="队列 queue"></a>队列 queue</h3><p>AMQP中的队列（queue）跟其他消息队列或任务队列中的队列是很相似的：它们存储着即将被应用消费掉的消息。队列跟交换机共享某些属性，但是队列也有一些另外的属性。</p><ul><li>Name</li><li>Durable（消息代理重启后，队列依旧存在）</li><li>Exclusive（只被一个连接（connection）使用，而且当连接关闭后队列即被删除）</li><li>Auto-delete（当最后一个消费者退订后即被删除）</li><li>Arguments（一些消息代理用他来完成类似与TTL的某些额外功能）</li></ul><h3 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h3><p>消费者应用（Consumer applications） - 用来接受和处理消息的应用 - 在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题。这就给我们出了个难题，AMQP代理在什么时候删除消息才是正确的？AMQP 0-9-1 规范给我们两种建议：</p><ul><li>当消息代理（broker）将消息发送给应用后立即删除。（使用AMQP方法：basic.deliver或basic.get-ok）</li><li>待应用（application）发送一个确认回执（acknowledgement）后再删除消息。（使用AMQP方法：basic.ack）</li></ul><p>前者被称作自动确认模式（automatic acknowledgement model），后者被称作显式确认模式（explicit acknowledgement model)。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string single-quoted-string">' [x] Received '</span><span class="token punctuation">,</span> <span class="token variable">$msg</span><span class="token operator">-></span><span class="token property">body</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">substr_count</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token operator">-></span><span class="token property">body</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">" [x] Done\n"</span><span class="token punctuation">;</span>  <span class="token variable">$msg</span><span class="token operator">-></span><span class="token function">ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_consume</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'task_queue'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码示例展示ack使用，basic_consume的第4个参数要 设置为<code>false</code>。</p><p><strong>When Consumers Fail or Lose Connection: Automatic Requeueing</strong></p><p>某些情况下,消费者的连接断开或者消费进程挂了都会导致消息的丢失。而且是大量的，因为在不启用ack的情况下,消息大概会是批量的发送。而不是你想象中的，一个消息接着一个消息的发送。</p><p>当手动ack启用的时候,消息会被重新放入队列。并且重发的消息会有个属性值<code>redeliver</code>,重发的时候会被设置为<code>true</code></p><h3 id="拒绝消息"><a href="#拒绝消息" class="headerlink" title="拒绝消息"></a>拒绝消息</h3><p>当一个消费者接收到某条消息后，处理过程有可能成功，有可能失败。应用可以向消息代理表明，本条消息由于“拒绝消息（Rejecting Messages）”的原因处理失败了（或者未能在此时完成）。当拒绝某条消息时，应用可以告诉消息代理如何处理这条消息——销毁它或者重新放入队列。当此队列只有一个消费者时，请确认不要由于拒绝消息并且选择了重新放入队列的行为而引起消息在同一个消费者身上无限循环的情况发生。</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>AMQP连接通常是长连接。AMQP是一个使用TCP提供可靠投递的应用层协议。AMQP使用认证机制并且提供TLS（SSL）保护。当一个应用不再需要连接到AMQP代理的时候，需要优雅的释放掉AMQP连接，而不是直接将TCP连接关闭。</p><h3 id="虚拟主机-vhost"><a href="#虚拟主机-vhost" class="headerlink" title="虚拟主机 vhost"></a>虚拟主机 vhost</h3><p>为了在一个单独的代理上实现多个隔离的环境（用户、用户组、交换机、队列 等），AMQP提供了一个虚拟主机（virtual hosts - vhosts）的概念。这跟Web servers虚拟主机概念非常相似，这为AMQP实体提供了完全隔离的环境。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPStreamConnection</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.106.179'</span><span class="token punctuation">,</span> <span class="token number">5672</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'test-vhost'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="动态匹配模型"><a href="#动态匹配模型" class="headerlink" title="动态匹配模型"></a>动态匹配模型</h2><p>生产者</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InputInterface</span> <span class="token variable">$input</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">OutputInterface</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>   <span class="token punctuation">&#123;</span>       <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPStreamConnection</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.106.179'</span><span class="token punctuation">,</span> <span class="token number">5672</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 创建通道</span>       <span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">exchange_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'order.lifecycle'</span><span class="token punctuation">,</span> <span class="token class-name static-context">AMQPExchangeType</span><span class="token operator">::</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//定义一个默认 全状态队列</span>       <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'order.all'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//匹配 全状态 订单消息</span>       <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'order.all'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'order.lifecycle'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'order.*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$faker</span> <span class="token operator">=</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'zh_CN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$orderStatus</span> <span class="token operator">=</span> <span class="token punctuation">[</span>           <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">ORDER_CREATE</span><span class="token punctuation">,</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">ORDER_SENDED</span><span class="token punctuation">,</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">ORDER_WAIT_PAY</span>       <span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token variable">$orderStatus</span><span class="token punctuation">[</span><span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token variable">$orderStatus</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$body</span> <span class="token operator">=</span> <span class="token punctuation">[</span>           <span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token variable">$status</span><span class="token punctuation">,</span>           <span class="token string single-quoted-string">'name'</span> <span class="token operator">=></span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">,</span>           <span class="token string single-quoted-string">'order_no'</span> <span class="token operator">=></span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token property">uuid</span>       <span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPMessage</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'delivery_mode'</span> <span class="token operator">=></span> <span class="token class-name static-context">AMQPMessage</span><span class="token operator">::</span><span class="token constant">DELIVERY_MODE_PERSISTENT</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//消息 动态 绑定 路由键</span>       <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'order.lifecycle'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'order.'</span><span class="token operator">.</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name static-context">Command</span><span class="token operator">::</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php">消费者 <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPStreamConnection</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.106.179'</span><span class="token punctuation">,</span> <span class="token number">5672</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建通道</span>        <span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义 h66 消费 pay 队列</span>        <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'h66.pay'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将 WAIY_PAY 类型消息 绑定到该队列</span>        <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'h66.pay'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'order.lifecycle'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'order.WAIT_PAY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token operator">-></span><span class="token property">body</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"处理数据...<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$body</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span> <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$body</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'order_no'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 消费 队列</span>        <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">basic_consume</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'h66.pay'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 阻塞队列监听事件</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>代码示例中 生成者根据订单状态动态生产相应路由键消息到交换机，消费者订阅自己所需的状态到自己的队列当中进行消费。</p><p>例如 <code>handPay</code> 消费者只订阅待支付类型。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>PHP的api在往未定义的交换机生产消息时不会抛出异常</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://rabbitmq.mr-ping.com/">https://rabbitmq.mr-ping.com/</a></li><li><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的waitimeout</title>
      <link href="2021/06/02/mysql%E7%9A%84waitimeout/"/>
      <url>2021/06/02/mysql%E7%9A%84waitimeout/</url>
      
        <content type="html"><![CDATA[<p>首先，我们来看下</p><pre class="language-shell" data-language="shell"><code class="language-shell">show GLOBAL VARIABLES like <span class="token string">'%timeout%'</span><span class="token punctuation">;</span></code></pre><p>默认值为28800s即8小时,我们改为100s</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment"># Default Homebrew MySQL server config</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token comment"># Only allow connections from localhost</span><span class="token key attr-name">bind-address</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0</span><span class="token key attr-name">wait_timeout</span><span class="token punctuation">=</span><span class="token value attr-value">100</span><span class="token key attr-name">interactive_timeout</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></code></pre><p>重新查看结果</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210603144255.png" alt=""></p><span id="more"></span><p>查看对守护进程连接的影响</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">longT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token variable">$TicketModel</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'开始建立连接...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$TicketModel</span><span class="token operator">-></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'t_id'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><p>发现在100s后的连接已被主动断开</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210603144315.png" alt=""></p><p>代码中的场景是，<strong>在wait_timeout之内无任何操作会自动关闭</strong></p><h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><p>interactive_timeout 28800</p><blockquote><p>The number of seconds the server waits for activity on an interactive connection before closing it. An interactive client is defined as a client that uses the <strong>CLIENT_INTERACTIVE</strong> option to mysql_real_connect(). See also wait_timeout.</p></blockquote><p>waitimeout 28800</p><p>The number of seconds the server waits for activity on a noninteractive connection before closing it.</p><p>On thread startup, the session wait_timeout value is initialized from the global wait_timeout value or from the global interactive_timeout value, depending on the type of client (as defined by the CLIENT_INTERACTIVE connect option to mysql_real_connect()). See also interactive_timeout.</p><p>通过MySQL客户端连接db的是交互会话，通过jdbc等程序连接db的是非交互会话。 </p><p>总结：</p><p>如果应用程序长时间的使用一个连接，而有机会长时间不进行任何操作。则会导致连接被关闭。</p><p>参考文献:</p><p>1.<a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html">https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html</a><br>2.<a href="https://cloud.tencent.com/developer/article/1181515">https://cloud.tencent.com/developer/article/1181515</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+quasar+electron+springboot+mysql撸一个TODO LIST 看板</title>
      <link href="2021/04/09/vue-quasar-electron-springboot-mysql%E6%92%B8%E4%B8%80%E4%B8%AATODO-LIST-%E7%9C%8B%E6%9D%BF/"/>
      <url>2021/04/09/vue-quasar-electron-springboot-mysql%E6%92%B8%E4%B8%80%E4%B8%AATODO-LIST-%E7%9C%8B%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>先看效果</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210330200044.png" alt=""></p><p>写本项目的目的有几点：</p><ol><li>学习下vue+electron桌面开发</li><li>学习下java和spring开发(本人一直使用PHP)</li><li>一直缺少一款能适合自己的TODO LIST软件，能有桌面端的</li></ol><span id="more"></span><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210409114201.png" alt=""></p><p>可直接打包成dmg、exe 等二进制文件使用。<br>这是我打包后的效果。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>vue</li><li>quasar</li><li>electron</li><li>springboot</li><li>mysql</li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><ul><li>前端 <a href="https://github.com/visonforcoding/carambola-todo">https://github.com/visonforcoding/carambola-todo</a></li><li>后端 <a href="https://github.com/visonforcoding/carambola-todo-service">https://github.com/visonforcoding/carambola-todo-service</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程日记-线程不安全的危害</title>
      <link href="2021/03/03/%E7%BC%96%E5%8F%91%E7%BC%96%E7%A8%8B%E6%97%A5%E8%AE%B0-%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%B1%E5%AE%B3/"/>
      <url>2021/03/03/%E7%BC%96%E5%8F%91%E7%BC%96%E7%A8%8B%E6%97%A5%E8%AE%B0-%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%B1%E5%AE%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210303192545.png" alt=""></p><span id="more"></span><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"HelloServlet"</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOG <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">HelloServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token operator">++</span>count<span class="token punctuation">;</span>        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"计数 %d"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>按常理多少次请求后就会打印出计数多少。</p><pre class="language-none"><code class="language-none">ab -n300 -c20 http:&#x2F;&#x2F;localhost:8080&#x2F;servlet-demo&#x2F;hello</code></pre><p>正常下，执行第一次 计数应为300</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210303194840.png" alt=""></p><p>事实上得到的却不是</p><p>再执行..</p><p>2 ~ 590<br>3 ~ 879<br>4 ~ 1170</p><p>几乎没有规律，并不是预期的 300的倍数。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>实际上<code>++count</code>是一个读取-修改-写入的操作。</p><p>假设线程A、B 同时读取到了值是m,同时写入+1后的值m+1。结果count = m+1,则事实上整个计数就少了1,应该为m+2。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>将<code>count</code>声明为<code>AtomicInter</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> atomicCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token operator">++</span>count<span class="token punctuation">;</span>    <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"计数count %d"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"计数atomicCount %d"</span><span class="token punctuation">,</span> atomicCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210309095018.png" alt=""></p><p>可以看到，<code>AtomicInteger</code>统计的是正确的了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot+vue+supervisor+nginx的前后端分离部署</title>
      <link href="2021/02/22/java/spring-boot-vue%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%83%A8%E7%BD%B2/"/>
      <url>2021/02/22/java/spring-boot-vue%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<ul><li>要保证同域部署,因为跨域会有很多问题要重新解决</li></ul><p>顺便树下，但其实现在互联网产品一般都有多客户端，pc web 、小程序、app。保守的同域session模式保持会话已经满足不了一些需求。比如，单端登录等。</p><p>言归正传，我采取的思路是，前端请求接口时统一加上api前缀，nginx将api前缀的路由请求代理转发到spring-boot</p><span id="more"></span><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server_name</span> admin.domain.xyz</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span>  /</span> <span class="token punctuation">&#123;</span>                <span class="token directive"><span class="token keyword">index</span> index.html</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">root</span> /home/wwwuser/webroot/itdoc-admin-web/dist/spa</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>              <span class="token directive"><span class="token keyword">proxy_pass</span>  http://127.0.0.1:8081/</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment"># optionally disable falling back to PHP script for the asset directories;</span>    <span class="token comment"># nginx will return a 404 error when files are not found instead of passing the</span>    <span class="token comment"># request to Symfony (improves performance but Symfony's 404 page is not displayed)</span>    <span class="token comment"># location /bundles &#123;</span>    <span class="token comment">#     try_files $uri =404;</span>    <span class="token comment"># &#125;</span>    <span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/admin_error.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/admin_access.log</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="supervisor守护java-jar"><a href="#supervisor守护java-jar" class="headerlink" title="supervisor守护java -jar"></a>supervisor守护java -jar</h2><p>我这里采取java -jar模式部署，但是单纯的这种模式并不能保证自启动和进程监控等。因此需要借助supervisor。</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">program:itdoc</span><span class="token punctuation">]</span></span><span class="token key attr-name">command</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/jdk-11.0.2/bin/java -jar itdoc-0.0.2-SNAPSHOT.jar</span><span class="token key attr-name">process_name</span><span class="token punctuation">=</span><span class="token value attr-value">%(program_name)s</span><span class="token key attr-name">numprocs</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">directory</span><span class="token punctuation">=</span><span class="token value attr-value">/home/wwwuser/webroot</span><span class="token key attr-name">umask</span><span class="token punctuation">=</span><span class="token value attr-value">022</span><span class="token key attr-name">priority</span><span class="token punctuation">=</span><span class="token value attr-value">999</span><span class="token key attr-name">autostart</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">autorestart</span><span class="token punctuation">=</span><span class="token value attr-value">unexpected</span><span class="token key attr-name">startsecs</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">startretries</span><span class="token punctuation">=</span><span class="token value attr-value">3</span><span class="token key attr-name">exitcodes</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span class="token key attr-name">stopsignal</span><span class="token punctuation">=</span><span class="token value attr-value">TERM</span><span class="token key attr-name">stopwaitsecs</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">stopasgroup</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">killasgroup</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">wwwuser</span><span class="token key attr-name">redirect_stderr</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">stdout_logfile</span><span class="token punctuation">=</span><span class="token value attr-value">/var/log/webroot/itdoc-out.log</span><span class="token key attr-name">stdout_logfile_maxbytes</span><span class="token punctuation">=</span><span class="token value attr-value">1MB</span><span class="token key attr-name">stdout_logfile_backups</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">stdout_capture_maxbytes</span><span class="token punctuation">=</span><span class="token value attr-value">1MB</span><span class="token key attr-name">stdout_events_enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">stderr_logfile</span><span class="token punctuation">=</span><span class="token value attr-value">/var/log/webroot/itdoc-err.log</span><span class="token key attr-name">stderr_logfile_maxbytes</span><span class="token punctuation">=</span><span class="token value attr-value">1MB</span><span class="token key attr-name">stderr_logfile_backups</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">stderr_capture_maxbytes</span><span class="token punctuation">=</span><span class="token value attr-value">1MB</span></code></pre><p>这里的<code>autostart</code> 和 <code>autorestart</code> 能保证自启动和启动重启</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Locust进行性能测试</title>
      <link href="2021/01/23/%E5%88%A9%E7%94%A8Locust%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>2021/01/23/%E5%88%A9%E7%94%A8Locust%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>要看一个项目的最大可用能力是多少，性能测试工作少不了.</li><li>每一个项目都应该做压测</li><li>多线程并发模型一定要做压测</li></ul><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-none"><code class="language-none">$ pip3 install locust</code></pre><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> locust <span class="token keyword">import</span> HttpUser<span class="token punctuation">,</span> task<span class="token punctuation">,</span> between<span class="token keyword">class</span> <span class="token class-name">QuickstartUser</span><span class="token punctuation">(</span>HttpUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    wait_time <span class="token operator">=</span> between<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@task</span>    <span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/world"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@task</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">view_items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> item_id <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"/item?id=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item_id<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"/item"</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"bar"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>wait_time = between(1, 2.5)</code></p><p>Our class defines a wait_time that will make the simulated users wait between 1 and 2.5 seconds after each task (see below) is executed. For more info see wait_time attribute.</p><p><code>def hello_world(self):</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@task</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/world"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@task</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">view_items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><code>task(3)</code> 内的参数表示任务执行的权重，<code>view_items</code>的次数将是<code>hello_world</code>次数的3倍。</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><pre class="language-none"><code class="language-none">$ locust -f locust_files&#x2F;my_locust_file.py</code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210330151409.png" alt=""></p><p>任务执行界面和结果</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210330151426.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑启动</title>
      <link href="2021/01/21/%E9%BB%91%E5%90%AF%E5%8A%A8/"/>
      <url>2021/01/21/%E9%BB%91%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="facebook案例"><a href="#facebook案例" class="headerlink" title="facebook案例"></a>facebook案例</h2><p>作为黑启动流程的一部分，每个Facebook 用户会话（在用户端浏览器中运行<br>JavaScript 代码）都加载了测试工具。虽然聊天功能的用户界面元素被隐藏起来，但浏览器<br>还是会向已部署在生产环境中的后台聊天服务器发送用户不可见的聊天测试信息，这使开</p><p>发团队能够在整个项目过程中模拟出类生产负载，从而在发布之前找出并解决性能问题。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210121214126.jpeg" alt=""></p><p>老子惊了,这有点牛皮</p>]]></content>
      
      
      
        <tags>
            
            <tag> 方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet | servlet集成mybatis-无xml&amp;注解方式</title>
      <link href="2021/01/06/java/servlet%E9%9B%86%E6%88%90mybatis-%E6%97%A0xml-%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/"/>
      <url>2021/01/06/java/servlet%E9%9B%86%E6%88%90mybatis-%E6%97%A0xml-%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>习惯了php项目之后，恐怕非常不喜欢操作xml吧.本章将介绍servlet+mybatis无xml配置模式。</p></blockquote><span id="more"></span><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>首先定义datasource</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> driver <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/db_itdoc?useSSL=false"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UnpooledDataSourceFactory</span> unpooledDataSourceFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnpooledDataSourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unpooledDataSourceFactory<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> unpooledDataSourceFactory<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>获取sessionFactory</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisLoader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSessionFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DatabaseConfig</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TransactionFactory</span> transactionFactory                    <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Environment</span> environment                    <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token string">"development"</span><span class="token punctuation">,</span> transactionFactory<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>            configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory                    <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="定义mapper"><a href="#定义mapper" class="headerlink" title="定义mapper"></a>定义mapper</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user(name,email) VALUES(#&#123;name&#125;, #&#123;email&#125;)"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="查询和插入"><a href="#查询和插入" class="headerlink" title="查询和插入"></a>查询和插入</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/user/profile"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">profile</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"i am user profile"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token class-name">MybatisLoader</span><span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/user/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token class-name">MybatisLoader</span><span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"返回"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"保存失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"保存"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Spring MVC HandlerInterceptor拦截器介绍</title>
      <link href="2020/09/24/java/Introduction-to-Spring-MVC-HandlerInterceptor%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/09/24/java/Introduction-to-Spring-MVC-HandlerInterceptor%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java JPA学习</title>
      <link href="2020/09/23/java/Java-JPA%E6%80%9D%E8%80%83/"/>
      <url>2020/09/23/java/Java-JPA%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200923170827.png" alt=""></p><p>JPA即Java Persistence API. 2006年5月11号，JPA 1.0 规范作为 JCP JSR 220 的一部分最终被发布。</p><p>在PHP世界当中doctrine、cake ORM 都有JPA的影子。</p><span id="more"></span><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>持久化实体是一个轻量级的 Java 类，其状态通常持久地保存到关系数据库的表中。 这种实体的实例对应于表中的各个行。 实体之间通常有关系，这些关系通过对象/关系元数据表示。 可以在实体类文件中直接使用注释来指定这种关系，也可以在随应用程序分发的单独XML描述文件中指定。</p><h2 id="JPQL"><a href="#JPQL" class="headerlink" title="JPQL"></a>JPQL</h2><p>Java持久化查询语言 （JPQL）对存储在关系数据库中的实体进行查询。查询在语法上类似于SQL查询，但是操作的是实体对象而不是直接对数据库表进行操作。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>在引入EJB 3.0规范之前，许多企业级Java开发人员使用由持久化框架（例如Hibernate）或数据访问对象（DAO）提供的轻量级持久化对象，来代替实体bean（EJB的一种）。 这是因为在以前的EJB规范中，实体bean需要太多复杂的代码和繁重的资源占用，并且由于bean和DAO对象或持久化框架之间的源代码中的互连和依赖性，它们只能在Java EE应用程序服务器中使用。 因此，最初在第三方持久性框架中提供的许多功能都被合并到Java Persistence API中，并且从2006年开始，<code>像Hibernate（版本3.2）和TopLink Essentials这样的项目已经实现Java Persistence API规范。</code></p><h2 id="JPA提供商"><a href="#JPA提供商" class="headerlink" title="JPA提供商"></a>JPA提供商</h2><p>JPA是一个开源API，因此Oracle，Redhat，Eclipse等各种企业供应商通过在其中添加JPA持久性风格来提供新产品。 其中一些产品包括:</p><p>Hibernate, Eclipselink, Toplink, Spring Data JPA, etc.</p><p>JSR定义了标准，众多组织对这个标准进行了实现，这使得开发者几乎可以在不同的实现版本里无缝切换。</p><h2 id="spring-data-jpa"><a href="#spring-data-jpa" class="headerlink" title="spring-data-jpa"></a>spring-data-jpa</h2><p>事实上Spring-data-jpa并不是jpa的具体实现或提供商。它只是jpa的一个数据访问抽象.在spring-data-jpa中你可以使用<br>Hibernate, Eclipse Link, 和其他的JPA provider。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211222145130.png" alt=""></p><h3 id="hibernate"><a href="#hibernate" class="headerlink" title="hibernate"></a>hibernate</h3><p>spring-data-jpa 默认使用的是hibernate,我们可以查看使用的版本。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"spring version is : %s"</span><span class="token punctuation">,</span><span class="token class-name">SpringVersion</span><span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查看 hibernate 版本</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"hibernate version is : %s"</span><span class="token punctuation">,</span><span class="token class-name">Version</span><span class="token punctuation">.</span><span class="token function">getVersionString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211224111236.png" alt=""></p><p>更多官方文档可查阅 <a href="https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html">https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html</a></p><h2 id="注解-Annotations"><a href="#注解-Annotations" class="headerlink" title="注解 Annotations"></a>注解 Annotations</h2><p>通常，Xml文件用于配置特定组件，或映射两种不同规格的组件。 在我们的例子中，我们必须在框架中单独维护xml。 这意味着在编写映射xml文件时，我们需要将POJO类属性与mapping.xml文件中的实体标记进行比较。</p><p>这是解决方案:在类定义中，我们可以使用注释编写配置部分。 注释用于类，属性和方法。 注释以“@”符号开头。 在声明类，属性或方法之前声明注释。 JPA的所有注释都在javax.persistence包中定义。</p><p>以下是我们的示例中使用的注释列表</p><p>注解 描述</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>@Entity</td><td>此批注指定将类声明为实体或表</td></tr><tr><td>@Table</td><td>此批注指定声明表名。</td></tr><tr><td>@Basic</td><td>此批注明确指定非约束字段</td></tr><tr><td>@Embedded</td><td>此批注指定类或实体的属性，该实体的可嵌入类的值实例。</td></tr><tr><td>@Id</td><td>此批注指定属性，用于类的标识（表的主键）。</td></tr><tr><td>@GeneratedValue</td><td>此批注指定了如何初始化标识属性，例如自动，手动或从序列表中获取的值。</td></tr><tr><td>@Transient</td><td>此批注指定了不持久的属性，即该值永远不会存储到数据库中。</td></tr><tr><td>@Column</td><td>此批注用于指定持久性属性的列或属性。</td></tr><tr><td>@SequenceGenerator</td><td>此批注用于定义@GeneratedValue批注中指定的属性的值。 它创建了一个序列。</td></tr><tr><td>@TableGenerator</td><td>此批注用于指定@GeneratedValue批注中指定的属性的值生成器。 它创建了一个价值生成表。</td></tr><tr><td>@AccessType</td><td>此类注释用于设置访问类型。 如果设置@AccessType（FIELD），则会发生字段访问。 如果设置@AccessType（PROPERTY），则将进行Property wise评估。</td></tr><tr><td>@JoinColumn</td><td>此批注用于指定实体关联或实体集合。 这用于多对一和一对多关联。</td></tr><tr><td>@UniqueConstraint</td><td>此批注用于指定主要或辅助表的字段，唯一约束。</td></tr><tr><td>@ColumnResult</td><td>此批注使用select子句引用SQL查询中的列的名称。</td></tr><tr><td>@ManyToMany</td><td>此批注用于定义连接表之间的多对多关系。</td></tr><tr><td>@ManyToOne</td><td>此批注用于定义连接表之间的多对一关系。</td></tr><tr><td>@OneToMany</td><td>此批注用于定义连接表之间的一对多关系。</td></tr><tr><td>@OneToOne</td><td>此批注用于定义连接表之间的一对一关系。</td></tr><tr><td>@NamedQueries</td><td>此批注用于指定命名查询的列表。</td></tr><tr><td>@NamedQuery</td><td>此批注用于使用静态名称指定查询。</td></tr></tbody></table><h3 id="Transient"><a href="#Transient" class="headerlink" title="Transient"></a>Transient</h3><blockquote><p>此批注指定了不持久的属性，即该值永远不会存储到数据库中。</p></blockquote><p>JPA默认所有Entity属性都是数据表Column,如果需要增加其他衍生属性而不需要成为数据表字段，则需要此注解。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Integer</span> purchasingPriceFen<span class="token punctuation">;</span><span class="token annotation punctuation">@Transient</span><span class="token keyword">private</span> <span class="token class-name">String</span> purchasingPrice<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPurchasingPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>purchasingPriceFen <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>本例中，<code>purchasingPrice</code>是<code>purchasingPriceFen</code>的格式化表示，方便一些实体属性的格式化输出。</p><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><p>多为数据库表名与entity类名不一致的情况.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dorder"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>在实际开发当中,我们都希望代码注释和数据表注释越全越好。那么如何使用JPA定义表的注释呢。<code>javax.persistence.Table</code>本身办不到，但是其实现方hibernate的Table注解可以。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Table</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>appliesTo <span class="token operator">=</span> <span class="token string">"dorder"</span><span class="token punctuation">,</span> comment <span class="token operator">=</span> <span class="token string">"订单表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h3><p>该注解用于定义字段,对应到数据库表的DDL。该字段我建议多使用columnDefinition定义好字段的数据类型,comment</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">"varchar(25) NOT NULL default '无名' comment '商品名'"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></code></pre><h3 id="Temporal"><a href="#Temporal" class="headerlink" title="Temporal"></a>Temporal</h3><p>@Temporal 是属性或方法级别的注解，用于声明属性持久化到数据库时所使用的时间精度。该注解可以应用于任何以下类型的实体类属性：</p><p>java.util.Date<br>java.util.Calendar</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Temporal</span><span class="token punctuation">(</span><span class="token class-name">TemporalType</span><span class="token punctuation">.</span>TIME<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Date</span> tokenExpiredTime<span class="token punctuation">;</span></code></pre><h2 id="Entity-Relationships"><a href="#Entity-Relationships" class="headerlink" title="Entity Relationships"></a>Entity Relationships</h2><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211223101826.png" alt=""></p><p>实体关系，RDBMS与NoSQL最直接的区别,直接影响到了我们应用程序的业务数据建模。那么JPA是如何来表示实体关系呢。</p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>关系A和关系B是一对一的关系，一般在一个表里有另一个表的关联id,进行关联。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211223102537.png" alt=""></p><p>例如,用户与当前家庭住址是一对一关系。商品与商品类别是一对一关系。</p><p>我们先按官方指导来使用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//定义地址实体</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>appliesTo <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span> comment <span class="token operator">=</span> <span class="token string">"地址表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">"varchar(50) NOT NULL COMMENT '详细地址'"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detail<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> detail<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDetail</span><span class="token punctuation">(</span><span class="token class-name">String</span> detail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//定义用户实体</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"名字不可为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">short</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>        <span class="token annotation punctuation">@OneToOne</span>    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"address_id"</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>JoinColumn</code>注解定义了User表的关联字段和关联表address的关联字段。对应到数据库里会自动生成外键并行成外键约束。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211223135649.png" alt=""></p><p>再来看看当表被关联了如何做CURD。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Log4j2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户添加"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"/user/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> user1 <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户详情"</span><span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">detail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>noDataFound<span class="token punctuation">,</span> <span class="token string">"获取失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211223135833.png" alt=""></p><p>在数据提交时，关联表的数据用嵌套的json进行提交即可。数据查询时使用<code>Repository</code>会自动进行关联查询,查看日志可以看到实际的sql.</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    user0_<span class="token punctuation">.</span>id <span class="token keyword">AS</span> id1_4_0_<span class="token punctuation">,</span>    user0_<span class="token punctuation">.</span>create_time <span class="token keyword">AS</span> create_t2_4_0_<span class="token punctuation">,</span>    user0_<span class="token punctuation">.</span>modify_time <span class="token keyword">AS</span> modify_t3_4_0_<span class="token punctuation">,</span>    user0_<span class="token punctuation">.</span>address_id <span class="token keyword">AS</span> address_7_4_0_<span class="token punctuation">,</span>    user0_<span class="token punctuation">.</span>age <span class="token keyword">AS</span> age4_4_0_<span class="token punctuation">,</span>    user0_<span class="token punctuation">.</span>mobile <span class="token keyword">AS</span> mobile5_4_0_<span class="token punctuation">,</span>    user0_<span class="token punctuation">.</span>name <span class="token keyword">AS</span> name6_4_0_<span class="token punctuation">,</span>    address1_<span class="token punctuation">.</span>id <span class="token keyword">AS</span> id1_0_1_<span class="token punctuation">,</span>    address1_<span class="token punctuation">.</span>create_time <span class="token keyword">AS</span> create_t2_0_1_<span class="token punctuation">,</span>    address1_<span class="token punctuation">.</span>modify_time <span class="token keyword">AS</span> modify_t3_0_1_<span class="token punctuation">,</span>    address1_<span class="token punctuation">.</span>detail <span class="token keyword">AS</span> detail4_0_1_<span class="token keyword">FROM</span>    <span class="token keyword">USER</span> user0_    <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> address address1_ <span class="token keyword">ON</span> user0_<span class="token punctuation">.</span>address_id <span class="token operator">=</span> address1_<span class="token punctuation">.</span>id<span class="token keyword">WHERE</span>    user0_<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">3</span></code></pre><p><strong>这点在某种程度上会让开发变得很方便，但也会有潜在的性能风险，因为多表关联数据量大的情况下必然会使得性能下降</strong></p><p>查询结果也以嵌套json对象的形式展现这点非常棒。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211223140828.png" alt=""></p><h3 id="javax-persistence-CascadeType"><a href="#javax-persistence-CascadeType" class="headerlink" title="javax.persistence.CascadeType"></a>javax.persistence.CascadeType</h3><p>在定义关联关系时可以定义,级联的关系操作。</p><table><thead><tr><th>类型</th><th>说明</th><th>解释</th></tr></thead><tbody><tr><td>ALL</td><td>级联所有实体状态转换</td><td>拥有所有级联操作权限。</td></tr><tr><td>PERSIST</td><td>级联实体持久化操作</td><td>当父实体被持久化时，会连同持久化子实体</td></tr><tr><td>MERGE</td><td>级联实体合并操作</td><td>当Student中的数据改变，会相应地更新Course中的数据。</td></tr><tr><td>REMOVE</td><td>级联实体删除操作</td><td>删除当前实体时，与它有映射关系的实体也会跟着被删除。</td></tr><tr><td>REFRESH</td><td>级联实体刷新操作</td><td>假设场景 有一个订单,订单里面关联了许多商品,这个订单可以被很多人操作,那么这个时候A对此订单和关联的商品进行了修改,与此同时,B也进行了相同的操作,但是B先一步比A保存了数据,那么当A保存数据的时候,就需要先刷新订单信息及关联的商品信息后,再将订单及商品保存。</td></tr><tr><td>DETACH</td><td>级联实体分离操作</td><td></td></tr></tbody></table><h3 id="FetchType"><a href="#FetchType" class="headerlink" title="FetchType"></a>FetchType</h3><p>在定义实体关系的<code>OneToOne</code>或其他关系注解时，我们可以定义fetch属性。</p><ul><li>FetchType.LAZY</li><li>FetchType.EAGER</li></ul><p>lazy即懒惰模式eager渴望模式。表现差异在于eager会一开始就查找出关联实体，而lazy模式是当你调用相应关联get方法时才会查询。本质区别在于lazy是分sql查询,eager是join关联查询。</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211223144919.png" alt=""></p><p>当我们定义<code>@OneToOne(fetch = FetchType.LAZY)</code>查看日志的话，我们可以看到之前的join变成了2个select。</p><p>不过会存在一个问题是在被指定为lazy的属性对象里返回的json会有个<code>hibernateLazyInitializer</code>,如果你不想展示的话可以使用注解<code>JsonIgnoreProperties</code>定义到该对象类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"hibernateLazyInitializer"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>当在大型应用当中,我建议不要进行外键约束和不要使用EAGER。因为关联查询往往会导致慢查询而拖垮数据库，而1次的sql和2-3次的sql其实在接口层面差异并不明显。</p><h2 id="ManyToMany"><a href="#ManyToMany" class="headerlink" title="ManyToMany"></a>ManyToMany</h2><p>在许多场景当中，关系都是多对多的对应关系。拿电商业务来说，订单与商品的关系是多对多的关系。即1个订单可以有多个商品，1个商品可以在多个订单当中。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dorder"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>appliesTo <span class="token operator">=</span> <span class="token string">"dorder"</span><span class="token punctuation">,</span> comment <span class="token operator">=</span> <span class="token string">"订单表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> orderNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> uid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderPriceFen<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span>    <span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>foreignKey <span class="token operator">=</span> <span class="token annotation punctuation">@ForeignKey</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConstraintMode</span><span class="token punctuation">.</span>NO_CONSTRAINT<span class="token punctuation">)</span><span class="token punctuation">,</span>            inverseForeignKey <span class="token operator">=</span> <span class="token annotation punctuation">@ForeignKey</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConstraintMode</span><span class="token punctuation">.</span>NO_CONSTRAINT<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">></span></span> goods<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>我们在订单表中定义了goods属性并用<code>ManyToMany</code>表示是多对多的关系。</li><li>使用<code>ConstraintMode.NO_CONSTRAINT</code>去除外键约束。</li><li>jpa会生成关联表</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/order/create"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"订单创建"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    order<span class="token punctuation">.</span><span class="token function">setUid</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">></span></span> orderGoods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span> g <span class="token operator">:</span> order<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">></span></span> goods <span class="token operator">=</span> goodsRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>orderGoods<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    order<span class="token punctuation">.</span><span class="token function">setGoods</span><span class="token punctuation">(</span>orderGoods<span class="token punctuation">)</span><span class="token punctuation">;</span>    orderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span> <span class="token string">"创建成功"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211223190914.png" alt=""></p><h3 id="Many-to-Many-With-a-New-Entity"><a href="#Many-to-Many-With-a-New-Entity" class="headerlink" title="Many-to-Many With a New Entity"></a>Many-to-Many With a New Entity</h3><p>有种场景是多对多的关联表还需要其他属性，可能这是实际当中更为常见的情况。比如订单商品表还需要记录商品数量,这个时候最好的方式是用一个新的Entity来建立多对多的关联关系。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderGoods</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">"int NOT NULL comment '数量'"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> nums<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ManyToOne</span>    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>foreignKey <span class="token operator">=</span> <span class="token annotation punctuation">@ForeignKey</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConstraintMode</span><span class="token punctuation">.</span>NO_CONSTRAINT<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"orderGoods"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Order</span> order<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ManyToOne</span>    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>foreignKey <span class="token operator">=</span> <span class="token annotation punctuation">@ForeignKey</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConstraintMode</span><span class="token punctuation">.</span>NO_CONSTRAINT<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Goods</span> goods<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>还需对<code>Goods</code>和<code>Order</code>进行<code>mappedBy</code>,防止被重复关联。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>appliesTo <span class="token operator">=</span> <span class="token string">"goods"</span><span class="token punctuation">,</span> comment <span class="token operator">=</span> <span class="token string">"商品表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"goods"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderGoods</span><span class="token punctuation">></span></span> orderGoods<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dorder"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>appliesTo <span class="token operator">=</span> <span class="token string">"dorder"</span><span class="token punctuation">,</span> comment <span class="token operator">=</span> <span class="token string">"订单表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"order"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Transient</span>    <span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"order"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderGoods</span><span class="token punctuation">></span></span> orderGoods<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>最终完成订单和订单商品的添加</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20211223232404.png" alt=""></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>以上代码与直接的<code>ManyToMany</code>方式不同的是，我没能实现主表的save让JPA自动将关联表数据也插入,是我手动处理的。<br>因为遇到的问题现在还没解决。</p><p>想让其自动将关联数据save,把hibernate的info日志打开。会发现<code>Collection found: was: [&lt;unreferenced&gt;] (initialized)</code>日志记录,应该是哪里不对，但是目前不纠结了。</p><p>以上代码虽然能完成需求但是数据插入并不是在一个事务内执行的，因此实际生产当中这种写法也不可取,需写在一个事务内。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://fanlychie.github.io/post/jpa-column-annotation.html">https://fanlychie.github.io/post/jpa-column-annotation.html</a></li><li><a href="https://dzone.com/articles/what-is-the-difference-between-hibernate-and-sprin-1">https://dzone.com/articles/what-is-the-difference-between-hibernate-and-sprin-1</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP QA</title>
      <link href="2020/09/17/php/PHP-QA%E4%B9%8BPHPStan/"/>
      <url>2020/09/17/php/PHP-QA%E4%B9%8BPHPStan/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200917210020.png" alt=""></p><p>写在前面，工作7年，PHP也写了7年了。期间也写一些java和python，也对各语言的特点有一些自己的体会。<br>这次咱们聊聊QA之余也来聊聊PHP语言本身。</p><span id="more"></span><p>来到<code>PHPStan</code>的官网，我看到了一段话。</p><blockquote><p>I really like how much productivity a web developer gains by switching from compiled languages like Java or C# to an interpreted one like PHP. Aside from the dead simple execution model (start, handle one request, and die) and a much shorter feedback loop (no need to wait for the compiler), there’s a healthy ecosystem of open-source frameworks and libraries to help developers with their everyday tasks. Because of these reasons, PHP is the most popular language for web development by far.</p></blockquote><p>大意是作者很乐意看到web开发者们从C#或Java这些编译性语言里切换到解释语言。除了简单的执行模型（启动，处理一个请求和终止）和较短的反馈周期（无需等待编译）之外，还有一个健康的开源框架和库生态系统可帮助开发人员完成日常工作任务。由于这些原因，PHP是迄今为止最流行的Web开发语言。</p><p>这篇文章是作者2016年12月4日写的，说实话对于<code>PHP是迄今为止最流行的Web开发语言</code>这句话我已经开始怀疑了。至少在最近这些年，在国内PHP的市场已经不那么好了。并且我也在趋向从解释性语言向编译语言切换了。但是其中对于解释性语言的优势描述我是非常赞同的，这也是它宝贵的优势。</p><ul><li>简单的执行模型</li><li>较短的反馈周期</li></ul><h2 id="QA之PHPStan"><a href="#QA之PHPStan" class="headerlink" title="QA之PHPStan"></a>QA之PHPStan</h2><p>言归正传，继续PHPStan</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="language-none"><code class="language-none">composer require --dev phpstan&#x2F;phpstan</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class="language-none"><code class="language-none">vendor&#x2F;bin&#x2F;phpstan analyse src tests</code></pre><h2 id="PHPmd"><a href="#PHPmd" class="headerlink" title="PHPmd"></a>PHPmd</h2><pre class="language-none"><code class="language-none">~&#x2F;vendor&#x2F;bin&#x2F;phpmd src&#x2F;Service&#x2F;OrderService.php text codesize,unusedcode,naming</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+vuex+axios+vant+vue-router简单单页登录态demo</title>
      <link href="2020/09/15/web/vue-vuex-axios-vant-vue-router%E7%AE%80%E5%8D%95%E5%8D%95%E9%A1%B5%E7%99%BB%E5%BD%95%E6%80%81demo/"/>
      <url>2020/09/15/web/vue-vuex-axios-vant-vue-router%E7%AE%80%E5%8D%95%E5%8D%95%E9%A1%B5%E7%99%BB%E5%BD%95%E6%80%81demo/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200915182645.png" alt=""></p><span id="more"></span><h2 id="创建vant项目"><a href="#创建vant项目" class="headerlink" title="创建vant项目"></a>创建vant项目</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装 Vue Cli</span><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli<span class="token comment"># 创建一个项目</span>vue create hello-world<span class="token comment"># 创建完成后，可以通过命令打开图形化界面，如下图所示</span>vue ui<span class="token comment"># 或者 通过 yarn 安装</span><span class="token function">yarn</span> <span class="token function">add</span> vant</code></pre><p><img src="http://img.rc5j.cn/blog20200915181419.png" alt=""></p><p>在图形化界面中，点击<code>依赖</code> -&gt; <code>安装依赖</code>，然后将 <code>vant</code> 添加到依赖中即可。</p><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">yarn</span> <span class="token function">add</span> vue-router</code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-nav-bar</span>    <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span>    <span class="token attr-name">left-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>返回<span class="token punctuation">"</span></span>    <span class="token attr-name">right-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span>    <span class="token attr-name">left-arrow</span>    <span class="token attr-name">@click-left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickLeft<span class="token punctuation">"</span></span>    <span class="token attr-name">@click-right</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickRight<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar-item</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-o<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar-item</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar-item</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>friends-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar-item</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user-o<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-nav-bar</span>    <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span>    <span class="token attr-name">left-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>返回<span class="token punctuation">"</span></span>    <span class="token attr-name">right-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span>    <span class="token attr-name">left-arrow</span>    <span class="token attr-name">@click-left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickLeft<span class="token punctuation">"</span></span>    <span class="token attr-name">@click-right</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickRight<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar-item</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-o<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar-item</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar-item</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>friends-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabbar-item</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user-o<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabbar</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>路由配置和登录态控制</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">// import store from '@/store'</span><span class="token comment">// import layout from '@/layout/layout'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/Home"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/user/detail'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'user_detail'</span><span class="token punctuation">,</span>    meta<span class="token operator">:</span><span class="token punctuation">&#123;</span>      requireLogin<span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/User/detail.vue"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>    meta<span class="token operator">:</span><span class="token punctuation">&#123;</span>      requireLogin<span class="token operator">:</span><span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/Login/login.vue"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  mode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  base<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">,</span>  routes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// store.getters('isLogin')</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requireLogin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//需要检测登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'前往登录...'</span><span class="token punctuation">)</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/login'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><p><img src="http://img.rc5j.cn/blog20200915181827.png" alt=""></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>引入<code>axios</code></p><pre class="language-none"><code class="language-none">yarn add axios</code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> login <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/api/loginReq"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      loginInfo<span class="token operator">:</span><span class="token punctuation">&#123;</span>          username<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>          pwd<span class="token operator">:</span><span class="token string">""</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loginInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>code<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot validation数据验证</title>
      <link href="2020/09/14/java/spring-boot-validation%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/"/>
      <url>2020/09/14/java/spring-boot-validation%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200914225941.png" alt=""></p><p>做业务处理，不可避免的要对参数进行校验，一套完整规范的校验体系可以提高不少的效率。</p><p>在写了PHP、java、python 等编程语言之后，我发现java的优势就是它的规范、它的严谨。在<code>jsr</code>之下建立各种场景的标准，所有人都在这套规范下拓展、迭代、升级。最终这套体系变得越来越完美、符合体系的生态产品也越来越多。 这大概就是java最强之处吧。</p><p>本节介绍下spring-boot的验证，它也是基于<code>jsr</code>的validation之下。</p><span id="more"></span><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>javax.validation 正是 jsr的规范。</p><h2 id="定义验证规则"><a href="#定义验证规则" class="headerlink" title="定义验证规则"></a>定义验证规则</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不可为空"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"不可为空"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不可为空"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不可为空"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span></code></pre><h2 id="controller使用"><a href="#controller使用" class="headerlink" title="controller使用"></a>controller使用</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LoginInfo</span> loginInfo<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>这里要对<code>@Valid</code> 进行使用</p><h2 id="全局处理"><a href="#全局处理" class="headerlink" title="全局处理"></a>全局处理</h2><pre class="language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * ConstraintViolationException     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">handleConstraintViolationException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> fieldName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FieldError</span><span class="token punctuation">)</span> error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> errorMessage <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span>parametrErrror<span class="token punctuation">,</span> <span class="token string">"参数错误"</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>由于使用<code>@Valid</code>对参数进行校验之后，如果有校验不通过会抛出一个<code>MethodArgumentNotValidException</code>异常。全局进行捕获之后可以全局处理参数不正确的情况。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/fqybzhangji/p/10384347.html">https://www.cnblogs.com/fqybzhangji/p/10384347.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC和spring对它的实现</title>
      <link href="2020/09/09/java/IOC%E5%92%8Cspring%E5%AF%B9%E5%AE%83%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/09/09/java/IOC%E5%92%8Cspring%E5%AF%B9%E5%AE%83%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200909211506.png" alt=""></p><span id="more"></span><h2 id="IOS概述"><a href="#IOS概述" class="headerlink" title="IOS概述"></a>IOS概述</h2><p><a href="https://www.cnblogs.com/DebugLZQ/archive/2013/06/05/3107957.html">https://www.cnblogs.com/DebugLZQ/archive/2013/06/05/3107957.html</a> 这篇文章已经讲的很好。</p><p>我做下总结。</p><ul><li>面向对象编程的世界，程序之间的耦合不可避免，而且会使得系统变得难以维护</li><li>IOC就是为了降低这种耦合</li><li>IOS也不是完美的，所有事情都有优缺点</li></ul><p><img src="http://img.rc5j.cn/blog20200909212010.png" alt=""></p><p>IOC就是为了把原本互相之间有耦合在一起，会造成牵一发而动全身的现象。通过容器解耦开,各自能独立运作。</p><p><img src="http://img.rc5j.cn/blog20200909212051.png" alt=""></p><h2 id="spring的实现"><a href="#spring的实现" class="headerlink" title="spring的实现"></a>spring的实现</h2><p>org.springframework.beans 和org.springframework.context 包是Spring Framework 的IoC 容器的基础。</p><p>BeanFactory 接口提供高级的配置机制，可以管理任意类型的对象。</p><ul><li>ApplicationContext 是BeanFactory 的子接口。</li><li>它添加了和Spring 的AOP 特性很简便的整合；</li><li>消息资源处理（用于国际化i18n），事件发布；</li><li>应用层特定的上下文， 比如用于Web 应用程序的WebApplicationContext。</li></ul><p>总之，BeanFactory 提供了配置框架和基本功能，而ApplicationContext 添加了更多企业级开发特定的功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php编译参数详解</title>
      <link href="2020/09/03/php/php%E7%BC%96%E8%AF%91%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/09/03/php/php%E7%BC%96%E8%AF%91%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>尽管经历了N次的手动编译，你可能还是不知道哪些编译参数需要哪些不需要</p><span id="more"></span><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>执行帮助命令查看编译配置帮助</p><pre class="language-none"><code class="language-none">.&#x2F;configure --help&#x3D;short</code></pre><p>得到结果</p><pre class="language-none"><code class="language-none">Optional Features and Packages:  --disable-option-checking  ignore unrecognized --enable&#x2F;--with options  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE&#x3D;no)  --enable-FEATURE[&#x3D;ARG]  include FEATURE [ARG&#x3D;yes]  --with-PACKAGE[&#x3D;ARG]    use PACKAGE [ARG&#x3D;yes]  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE&#x3D;no)  --with-libdir&#x3D;NAME      Look for libraries in ...&#x2F;NAME rather than ...&#x2F;lib  --disable-rpath         Disable passing additional runtime library                          search paths  --enable-re2c-cgoto     Enable -g flag to re2c to use computed goto gcc extension  --disable-gcc-global-regs                          whether to enable GCC global register variablesSAPI modules:  --with-apxs2&#x3D;FILE       Build shared Apache 2.0 Handler module. FILE is the optional                          pathname to the Apache apxs tool apxs  --disable-cli           Disable building CLI version of PHP                          (this forces --without-pear)  --enable-embed&#x3D;TYPE     EXPERIMENTAL: Enable building of embedded SAPI library                          TYPE is either &#39;shared&#39; or &#39;static&#39;. TYPE&#x3D;shared  --enable-fpm            Enable building of the fpm SAPI executable  fastcgi进程管理,这个应该必不可少  --with-fpm-user&#x3D;USER    Set the user for php-fpm to run as. (default: nobody)  --with-fpm-group&#x3D;GRP    Set the group for php-fpm to run as. For a system user, this                          should usually be set to match the fpm username (default: nobody)  --with-fpm-systemd      Activate systemd integration  --with-fpm-acl          Use POSIX Access Control Lists  --with-litespeed        Build PHP as litespeed module  --enable-phpdbg            Build phpdbg  --enable-phpdbg-webhelper  Build phpdbg web SAPI support  --enable-phpdbg-debug      Build phpdbg in debug mode  --enable-phpdbg-readline   Enable readline support in phpdbg (depends on static ext&#x2F;readline)  --disable-cgi           Disable building CGI version of PHP   禁用cgi  --with-valgrind&#x3D;DIR     Enable valgrind supportGeneral settings:  --enable-gcov           Enable GCOV code coverage (requires LTP) - FOR DEVELOPERS ONLY!!  --enable-debug          Compile with debugging symbols  --with-layout&#x3D;TYPE      Set how installed files will be laid out.  Type can                          be either PHP or GNU [PHP]  --with-config-file-path&#x3D;PATH                          Set the path in which to look for php.ini [PREFIX&#x2F;lib]  --with-config-file-scan-dir&#x3D;PATH                          Set the path where to scan for configuration files  --enable-sigchild       Enable PHP&#39;s own SIGCHLD handler  --enable-libgcc         Enable explicitly linking against libgcc  --disable-short-tags    Disable the short-form &lt;? start tag by default  --enable-dmalloc        Enable dmalloc  --disable-ipv6          Disable IPv6 support  --enable-dtrace         Enable DTrace support  --enable-fd-setsize     Set size of descriptor setsExtensions:  --with-EXTENSION&#x3D;shared[,PATH]    NOTE: Not all extensions can be build as &#39;shared&#39;.    Example: --with-foobar&#x3D;shared,&#x2F;usr&#x2F;local&#x2F;foobar&#x2F;      o Builds the foobar extension as shared extension.      o foobar package install prefix is &#x2F;usr&#x2F;local&#x2F;foobar&#x2F;  --disable-all           Disable all extensions which are enabled by default  --disable-libxml        Disable LIBXML support  --with-libxml-dir&#x3D;DIR   LIBXML: libxml2 install prefix  --with-openssl&#x3D;DIR      Include OpenSSL support (requires OpenSSL &gt;&#x3D; 1.0.1)  --with-kerberos&#x3D;DIR     OPENSSL: Include Kerberos support  --with-system-ciphers   OPENSSL: Use system default cipher list instead of hardcoded value  --with-pcre-regex&#x3D;DIR   Include Perl Compatible Regular Expressions support.                          DIR is the PCRE install prefix BUNDLED  --with-pcre-jit         Enable PCRE JIT functionality (BUNDLED only)  --with-pcre-valgrind&#x3D;DIR                          Enable PCRE valgrind support. Developers only!  --without-sqlite3&#x3D;DIR   Do not include SQLite3 support. DIR is the prefix to                          SQLite3 installation directory.  --with-zlib&#x3D;DIR         Include ZLIB support (requires zlib &gt;&#x3D; 1.2.0.4)  --with-zlib-dir&#x3D;&lt;DIR&gt;   Define the location of zlib install directory  --enable-bcmath         Enable bc style precision math functions  --with-bz2&#x3D;DIR          Include BZip2 support  --enable-calendar       Enable support for calendar conversion  --disable-ctype         Disable ctype functions  --with-curl&#x3D;DIR         Include cURL support  --enable-dba            Build DBA with bundled modules. To build shared DBA                          extension use --enable-dba&#x3D;shared  --with-qdbm&#x3D;DIR         DBA: QDBM support  --with-gdbm&#x3D;DIR         DBA: GDBM support  --with-ndbm&#x3D;DIR         DBA: NDBM support  --with-db4&#x3D;DIR          DBA: Oracle Berkeley DB 4.x or 5.x support  --with-db3&#x3D;DIR          DBA: Oracle Berkeley DB 3.x support  --with-db2&#x3D;DIR          DBA: Oracle Berkeley DB 2.x support  --with-db1&#x3D;DIR          DBA: Oracle Berkeley DB 1.x support&#x2F;emulation  --with-dbm&#x3D;DIR          DBA: DBM support  --with-tcadb&#x3D;DIR        DBA: Tokyo Cabinet abstract DB support  --with-lmdb&#x3D;DIR        DBA: Lightning memory-mapped database support  --without-cdb&#x3D;DIR       DBA: CDB support (bundled)  --disable-inifile       DBA: INI support (bundled)  --disable-flatfile      DBA: FlatFile support (bundled)  --disable-dom           Disable DOM support  --with-libxml-dir&#x3D;DIR   DOM: libxml2 install prefix  --with-enchant&#x3D;DIR      Include enchant support.                          GNU Aspell version 1.1.3 or higher required.  --enable-exif           Enable EXIF (metadata from images) support  --disable-fileinfo      Disable fileinfo support  --disable-filter        Disable input filter support  --with-pcre-dir         FILTER: pcre install prefix  --enable-ftp            Enable FTP support  --with-openssl-dir&#x3D;DIR  FTP: openssl install prefix  --with-gd&#x3D;DIR           Include GD support.  DIR is the GD library base                          install directory BUNDLED  --with-webp-dir&#x3D;DIR      GD: Set the path to libwebp install prefix  --with-jpeg-dir&#x3D;DIR     GD: Set the path to libjpeg install prefix  --with-png-dir&#x3D;DIR      GD: Set the path to libpng install prefix  --with-zlib-dir&#x3D;DIR     GD: Set the path to libz install prefix  --with-xpm-dir&#x3D;DIR      GD: Set the path to libXpm install prefix  --with-freetype-dir&#x3D;DIR GD: Set the path to FreeType 2 install prefix  --enable-gd-jis-conv    GD: Enable JIS-mapped Japanese font support  --with-gettext&#x3D;DIR      Include GNU gettext support  --with-gmp&#x3D;DIR          Include GNU MP support  --with-mhash&#x3D;DIR        Include mhash support  --disable-hash          Disable hash support  --without-iconv&#x3D;DIR     Exclude iconv support  --with-imap&#x3D;DIR         Include IMAP support. DIR is the c-client install prefix  --with-kerberos&#x3D;DIR     IMAP: Include Kerberos support. DIR is the Kerberos install prefix  --with-imap-ssl&#x3D;DIR     IMAP: Include SSL support. DIR is the OpenSSL install prefix  --with-interbase&#x3D;DIR    Include Firebird support.  DIR is the Firebird base                          install directory &#x2F;opt&#x2F;firebird  --enable-intl           Enable internationalization support  --with-icu-dir&#x3D;DIR      Specify where ICU libraries and headers can be found  --disable-json          Disable JavaScript Object Serialization support  --with-ldap&#x3D;DIR         Include LDAP support  --with-ldap-sasl&#x3D;DIR    LDAP: Include Cyrus SASL support  --enable-mbstring       Enable multibyte string support  --disable-mbregex       MBSTRING: Disable multibyte regex support  --disable-mbregex-backtrack                          MBSTRING: Disable multibyte regex backtrack check  --with-libmbfl&#x3D;DIR      MBSTRING: Use external libmbfl.  DIR is the libmbfl base                          install directory BUNDLED  --with-onig&#x3D;DIR         MBSTRING: Use external oniguruma. DIR is the oniguruma install prefix.                          If DIR is not set, the bundled oniguruma will be used  --with-mysqli&#x3D;FILE      Include MySQLi support.  FILE is the path                          to mysql_config.  If no value or mysqlnd is passed                          as FILE, the MySQL native driver will be used  --enable-embedded-mysqli                          MYSQLi: Enable embedded support                          Note: Does not work with MySQL native driver!  --with-mysql-sock&#x3D;SOCKPATH                          MySQLi&#x2F;PDO_MYSQL: Location of the MySQL unix socket pointer.                          If unspecified, the default locations are searched  --with-oci8&#x3D;DIR         Include Oracle Database OCI8 support. DIR defaults to $ORACLE_HOME.                          Use --with-oci8&#x3D;instantclient,&#x2F;path&#x2F;to&#x2F;instant&#x2F;client&#x2F;lib                          to use an Oracle Instant Client installation  --with-odbcver&#x3D;HEX      Force support for the passed ODBC version. A hex number is expected, default 0x0350.                             Use the special value of 0 to prevent an explicit ODBCVER to be defined.  --with-adabas&#x3D;DIR       Include Adabas D support &#x2F;usr&#x2F;local  --with-sapdb&#x3D;DIR        Include SAP DB support &#x2F;usr&#x2F;local  --with-solid&#x3D;DIR        Include Solid support &#x2F;usr&#x2F;local&#x2F;solid  --with-ibm-db2&#x3D;DIR      Include IBM DB2 support &#x2F;home&#x2F;db2inst1&#x2F;sqllib  --with-ODBCRouter&#x3D;DIR   Include ODBCRouter.com support &#x2F;usr  --with-empress&#x3D;DIR      Include Empress support \$EMPRESSPATH                          (Empress Version &gt;&#x3D; 8.60 required)  --with-empress-bcs&#x3D;DIR                          Include Empress Local Access support \$EMPRESSPATH                          (Empress Version &gt;&#x3D; 8.60 required)  --with-birdstep&#x3D;DIR     Include Birdstep support &#x2F;usr&#x2F;local&#x2F;birdstep  --with-custom-odbc&#x3D;DIR  Include user defined ODBC support. DIR is ODBC install base                          directory &#x2F;usr&#x2F;local. Make sure to define CUSTOM_ODBC_LIBS and                          have some odbc.h in your include dirs. f.e. you should define                          following for Sybase SQL Anywhere 5.5.00 on QNX, prior to                          running this configure script:                            CPPFLAGS&#x3D;\&quot;-DODBC_QNX -DSQLANY_BUG\&quot;                            LDFLAGS&#x3D;-lunix                            CUSTOM_ODBC_LIBS&#x3D;\&quot;-ldblib -lodbc\&quot;  --with-iodbc&#x3D;DIR        Include iODBC support &#x2F;usr&#x2F;local  --with-esoob&#x3D;DIR        Include Easysoft OOB support &#x2F;usr&#x2F;local&#x2F;easysoft&#x2F;oob&#x2F;client  --with-unixODBC&#x3D;DIR     Include unixODBC support &#x2F;usr&#x2F;local  --with-dbmaker&#x3D;DIR      Include DBMaker support  --disable-opcache       Disable Zend OPcache support  --disable-opcache-file  Disable file based caching  --disable-huge-code-pages                          Disable copying PHP CODE pages into HUGE PAGES  --enable-pcntl          Enable pcntl support (CLI&#x2F;CGI only)  --disable-pdo           Disable PHP Data Objects support  --with-pdo-dblib&#x3D;DIR    PDO: DBLIB-DB support.  DIR is the FreeTDS home directory  --with-pdo-firebird&#x3D;DIR PDO: Firebird support.  DIR is the Firebird base                          install directory &#x2F;opt&#x2F;firebird  --with-pdo-mysql&#x3D;DIR    PDO: MySQL support. DIR is the MySQL base directory                          If no value or mysqlnd is passed as DIR, the                          MySQL native driver will be used  --with-zlib-dir&#x3D;DIR     PDO_MySQL: Set the path to libz install prefix  --with-pdo-oci&#x3D;DIR      PDO: Oracle OCI support. DIR defaults to $ORACLE_HOME.                          Use --with-pdo-oci&#x3D;instantclient,&#x2F;path&#x2F;to&#x2F;instant&#x2F;client&#x2F;lib                          for an Oracle Instant Client installation.  --with-pdo-odbc&#x3D;flavour,dir                          PDO: Support for &#39;flavour&#39; ODBC driver.  include and lib dirs are looked for under &#39;dir&#39;.  &#39;flavour&#39; can be one of:  ibm-db2, iODBC, unixODBC, generic  If &#39;,dir&#39; part is omitted, default for the flavour  you have selected will be used. e.g.:    --with-pdo-odbc&#x3D;unixODBC  will check for unixODBC under &#x2F;usr&#x2F;local. You may attempt  to use an otherwise unsupported driver using the \&quot;generic\&quot;  flavour.  The syntax for generic ODBC support is:    --with-pdo-odbc&#x3D;generic,dir,libname,ldflags,cflags  When built as &#39;shared&#39; the extension filename is always pdo_odbc.so  --with-pdo-pgsql&#x3D;DIR    PDO: PostgreSQL support.  DIR is the PostgreSQL base                          install directory or the path to pg_config  --without-pdo-sqlite&#x3D;DIR                          PDO: sqlite 3 support.  DIR is the sqlite base                          install directory BUNDLED  --with-pgsql&#x3D;DIR        Include PostgreSQL support.  DIR is the PostgreSQL                          base install directory or the path to pg_config  --disable-phar          Disable phar support  --disable-posix         Disable POSIX-like functions  --with-pspell&#x3D;DIR       Include PSPELL support.                          GNU Aspell version 0.50.0 or higher required  --with-libedit&#x3D;DIR      Include libedit readline replacement (CLI&#x2F;CGI only)  --with-readline&#x3D;DIR     Include readline support (CLI&#x2F;CGI only)  --with-recode&#x3D;DIR       Include recode support  --disable-session       Disable session support  --with-mm&#x3D;DIR           SESSION: Include mm support for session storage  --enable-shmop          Enable shmop support  --disable-simplexml     Disable SimpleXML support  --with-libxml-dir&#x3D;DIR   SimpleXML: libxml2 install prefix  --with-snmp&#x3D;DIR         Include SNMP support  --with-openssl-dir&#x3D;DIR  SNMP: openssl install prefix  --enable-soap           Enable SOAP support  --with-libxml-dir&#x3D;DIR   SOAP: libxml2 install prefix  --enable-sockets        Enable sockets support  --with-sodium&#x3D;DIR     Include sodium support  --with-password-argon2&#x3D;DIR           Include Argon2 support in password_*. DIR is the Argon2 shared library path]  --enable-sysvmsg        Enable sysvmsg support  --enable-sysvsem        Enable System V semaphore support  --enable-sysvshm        Enable the System V shared memory support  --with-tidy&#x3D;DIR         Include TIDY support  --disable-tokenizer     Disable tokenizer support  --enable-wddx           Enable WDDX support  --with-libxml-dir&#x3D;DIR   WDDX: libxml2 install prefix  --with-libexpat-dir&#x3D;DIR WDDX: libexpat dir for XMLRPC-EPI (deprecated)  --disable-xml           Disable XML support  --with-libxml-dir&#x3D;DIR   XML: libxml2 install prefix  --with-libexpat-dir&#x3D;DIR XML: libexpat install prefix (deprecated)  --disable-xmlreader     Disable XMLReader support  --with-libxml-dir&#x3D;DIR   XMLReader: libxml2 install prefix  --with-xmlrpc&#x3D;DIR       Include XMLRPC-EPI support  --with-libxml-dir&#x3D;DIR   XMLRPC-EPI: libxml2 install prefix  --with-libexpat-dir&#x3D;DIR XMLRPC-EPI: libexpat dir for XMLRPC-EPI (deprecated)  --with-iconv-dir&#x3D;DIR    XMLRPC-EPI: iconv dir for XMLRPC-EPI  --disable-xmlwriter     Disable XMLWriter support  --with-libxml-dir&#x3D;DIR   XMLWriter: libxml2 install prefix  --with-xsl&#x3D;DIR          Include XSL support.  DIR is the libxslt base                          install directory (libxslt &gt;&#x3D; 1.1.0 required)  --enable-zend-test           Enable zend-test extension  --enable-zip            Include Zip read&#x2F;write support  --with-zlib-dir&#x3D;DIR     ZIP: Set the path to libz install prefix  --with-pcre-dir         ZIP: pcre install prefix  --with-libzip&#x3D;DIR       ZIP: use libzip  --enable-mysqlnd        Enable mysqlnd explicitly, will be done implicitly                          when required by other extensions  --disable-mysqlnd-compression-support                          Disable support for the MySQL compressed protocol in mysqlnd  --with-zlib-dir&#x3D;DIR     mysqlnd: Set the path to libz install prefixPEAR:  --with-pear&#x3D;DIR         Install PEAR in DIR [PREFIX&#x2F;lib&#x2F;php]  --without-pear          Do not install PEARZend:  --enable-maintainer-zts Enable thread safety - for code maintainers only!!  --disable-inline-optimization                          If building zend_execute.lo fails, try this switch  --disable-zend-signals  whether to enable zend signal handlingTSRM:  --with-tsrm-pth&#x3D;pth-config                          Use GNU Pth  --with-tsrm-st          Use SGI&#39;s State Threads  --with-tsrm-pthreads    Use POSIX threads (default)Libtool:  --enable-shared&#x3D;PKGS    Build shared libraries default&#x3D;yes  --enable-static&#x3D;PKGS    Build static libraries default&#x3D;yes  --enable-fast-install&#x3D;PKGS                          Optimize for fast installation default&#x3D;yes  --with-gnu-ld           Assume the C compiler uses GNU ld default&#x3D;no  --disable-libtool-lock  Avoid locking (might break parallel builds)  --with-pic              Try to use only PIC&#x2F;non-PIC objects default&#x3D;use both  --with-tags&#x3D;TAGS        Include additional configurations automaticSome influential environment variables:  CC          C compiler command  CFLAGS      C compiler flags  LDFLAGS     linker flags, e.g. -L&lt;lib dir&gt; if you have libraries in a              nonstandard directory &lt;lib dir&gt;  LIBS        libraries to pass to the linker, e.g. -l&lt;library&gt;  CPPFLAGS    (Objective) C&#x2F;C++ preprocessor flags, e.g. -I&lt;include dir&gt; if              you have headers in a nonstandard directory &lt;include dir&gt;  CPP         C preprocessor  YACC        The &#96;Yet Another Compiler Compiler&#39; implementation to use.              Defaults to the first program found out of: &#96;bison -y&#39;, &#96;byacc&#39;,              &#96;yacc&#39;.  YFLAGS      The list of arguments that will be passed by default to $YACC.              This script will default YFLAGS to the empty string to avoid a              default value of &#96;-d&#39; given by some make applications.  CXX         C++ compiler command  CXXFLAGS    C++ compiler flags  CXXCPP      C++ preprocessorUse these variables to override the choices made by &#96;configure&#39; or to helpit to find libraries and programs with nonstandard names&#x2F;locations.</code></pre><h2 id="默认拓展"><a href="#默认拓展" class="headerlink" title="默认拓展"></a>默认拓展</h2><p>当不配置任何参数时，它默认会有哪些拓展呢？</p><pre class="language-none"><code class="language-none">php -m</code></pre><pre class="language-none"><code class="language-none">[PHP Modules]CorectypedatedomfileinfofilterhashiconvjsonlibxmlpcrePDOpdo_sqlitePharposixReflectionsessionSimpleXMLSPLsqlite3standardtokenizerxmlxmlreaderxmlwriter[Zend Modules]</code></pre><p>此时你会发现连<code>php-fpm</code>都没有</p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><pre class="language-none"><code class="language-none">yum install -y libxml2-devel openssl-devel</code></pre><pre class="language-none"><code class="language-none">.&#x2F;configure --enable-fpm  --enable-bcmath  --with-openssl \--enable-mbstring --with-mysqli --enable-mysqlnd</code></pre><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><pre class="language-none"><code class="language-none">make &amp;&amp; make install</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="查看ini配置"><a href="#查看ini配置" class="headerlink" title="查看ini配置"></a>查看ini配置</h3><pre class="language-none"><code class="language-none">php -ini | grep &#39;ini&#39;</code></pre><pre class="language-none"><code class="language-none">Configuration File (php.ini) Path &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;libLoaded Configuration File &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;php.iniScan this dir for additional .ini files &#x3D;&gt; (none)Additional .ini files parsed &#x3D;&gt; (none)user_ini.cache_ttl &#x3D;&gt; 300 &#x3D;&gt; 300user_ini.filename &#x3D;&gt; .user.ini &#x3D;&gt; .user.iniinit_command_executed_count &#x3D;&gt; 0init_command_failed_count &#x3D;&gt; 0com_init_db &#x3D;&gt; 0</code></pre><p>从源代码目录 复制配置文件到<code>Configuration File (php.ini) Path</code></p><pre class="language-none"><code class="language-none">cp php.ini-production &#x2F;usr&#x2F;local&#x2F;lib&#x2F;php.ini</code></pre><h2 id="设置服务-amp-开机启动-centos-7"><a href="#设置服务-amp-开机启动-centos-7" class="headerlink" title="设置服务&amp;开机启动(centos 7+)"></a>设置服务&amp;开机启动(centos 7+)</h2><p>服务服务脚本到systemd</p><pre class="language-none"><code class="language-none">cp sapi&#x2F;fpm&#x2F;php-fpm.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;</code></pre><p>查看启动脚本</p><pre class="language-none"><code class="language-none">cat sapi&#x2F;fpm&#x2F;php-fpm.service</code></pre><p>结果</p><pre class="language-none"><code class="language-none"># It&#39;s not recommended to modify this file in-place, because it# will be overwritten during upgrades.  If you want to customize,# the best way is to use the &quot;systemctl edit&quot; command.[Unit]Description&#x3D;The PHP FastCGI Process ManagerAfter&#x3D;network.target[Service]Type&#x3D;simplePIDFile&#x3D;&#x2F;usr&#x2F;local&#x2F;var&#x2F;run&#x2F;php-fpm.pidExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;php-fpm --nodaemonize --fpm-config &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php-fpm.confExecReload&#x3D;&#x2F;bin&#x2F;kill -USR2 $MAINPIDPrivateTmp&#x3D;true[Install]WantedBy&#x3D;multi-user.target</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="language-none"><code class="language-none">cp sapi&#x2F;fpm&#x2F;php-fpm.conf &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php-fpm.conf</code></pre><p>修改php-fpm.conf 相应配置使得PIDFile文件位置与php-fpm.service配置的一致。并复制<a href="http://www.conf到对应目录">www.conf到对应目录</a></p><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><pre class="language-none"><code class="language-none">systemctl daemon-reloadsystemctl start php-fpm.servicesystemctl status php-fpm.servicesystemctl enable php-fpm.service</code></pre><h2 id="php8"><a href="#php8" class="headerlink" title="php8"></a>php8</h2><h3 id="mac下"><a href="#mac下" class="headerlink" title="mac下"></a>mac下</h3><p><code>openssl</code>和<code>icu4c</code>依赖需要定义</p><pre class="language-none"><code class="language-none">export PKG_CONFIG_PATH&#x3D;&quot;$PKG_CONFIG_PATH:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openssl-1.1.1g&quot;</code></pre><pre class="language-none"><code class="language-none">export PKG_CONFIG_PATH&#x3D;&quot;$PKG_CONFIG_PATH:&#x2F;usr&#x2F;local&#x2F;opt&#x2F;icu4c&#x2F;lib&#x2F;pkgconfig&quot;</code></pre><p><strong>什么是<code>pkg-config</code></strong></p><blockquote><p>The pkg-config program is used to retrieve information about installed libraries in the system. It is typically used to compile and link against one or more libraries. Here is a typical usage scenario in a Makefile:</p></blockquote><p>收集系统安装库的程序，在<code>Makefile</code>里会用到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>supervisor使用</title>
      <link href="2020/09/02/supervisor%E4%BD%BF%E7%94%A8/"/>
      <url>2020/09/02/supervisor%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>作为一款进程管理工具，supervisor普遍用来管理应用的守护进程</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>常规安装的方式有两种,pip安装或发行版安装</p><p>以centos 8为pip安装方式为例。</p><h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><pre class="language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> supervisor</code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="language-none"><code class="language-none">echo_supervisord_conf &gt; &#x2F;etc&#x2F;supervisord.conf</code></pre><p>生成配置文件</p><h3 id="配置systemd服务"><a href="#配置systemd服务" class="headerlink" title="配置systemd服务"></a>配置systemd服务</h3><p>如果是发行版安装，默认会配置好开机启动服务。如果非发行版安装，可以手动配置。</p><p>There are user-contributed scripts for various operating systems at: <a href="https://github.com/Supervisor/initscripts">https://github.com/Supervisor/initscripts</a></p><p>注意，事实上github上的脚本有点问题，与实际安装的目录位置不匹配。稍作修改</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment"># supervisord service for systemd (CentOS 7.0+)</span><span class="token comment"># by ET-CS (https://github.com/ET-CS)</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span><span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">Supervisor daemon</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span><span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">forking</span><span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/bin/supervisord</span><span class="token key attr-name">ExecStop</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/bin/supervisorctl $OPTIONS shutdown</span><span class="token key attr-name">ExecReload</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/bin/supervisorctl $OPTIONS reload</span><span class="token key attr-name">KillMode</span><span class="token punctuation">=</span><span class="token value attr-value">process</span><span class="token key attr-name">Restart</span><span class="token punctuation">=</span><span class="token value attr-value">on-failure</span><span class="token key attr-name">RestartSec</span><span class="token punctuation">=</span><span class="token value attr-value">42s</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span><span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span></code></pre><p>将此文件为保存为 <code>vim /etc/systemd/system/supervisord.service</code></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>重新读取所有服务项</p><pre class="language-none"><code class="language-none">systemctl daemon-reload</code></pre><p>启动服务</p><pre class="language-none"><code class="language-none">systemctl start supervisord.service</code></pre><p>开机启动</p><pre class="language-none"><code class="language-none">systemctl enable supervisord.service</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h3 id="启用子配置目录"><a href="#启用子配置目录" class="headerlink" title="启用子配置目录"></a>启用子配置目录</h3><p><code>vim /etc/supervisord.conf</code><br>最后2行打开注释并编辑为</p><pre class="language-none"><code class="language-none">[include]files &#x3D; .&#x2F;supervisord.d&#x2F;*.ini</code></pre><p>重启</p><pre class="language-none"><code class="language-none">systemctl reload supervisord.service# 或者supervisorctl reload</code></pre><h3 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h3><p><code>vim /etc/supervisord.d/glances.ini</code></p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">program:glances</span><span class="token punctuation">]</span></span><span class="token key attr-name">command</span><span class="token punctuation">=</span><span class="token value attr-value">glances --export influxdb -q</span><span class="token key attr-name">process_name</span><span class="token punctuation">=</span><span class="token value attr-value">%(program_name)s</span><span class="token key attr-name">numprocs</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">directory</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp</span><span class="token key attr-name">umask</span><span class="token punctuation">=</span><span class="token value attr-value">022</span><span class="token key attr-name">priority</span><span class="token punctuation">=</span><span class="token value attr-value">999</span><span class="token key attr-name">autostart</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">autorestart</span><span class="token punctuation">=</span><span class="token value attr-value">unexpected</span><span class="token key attr-name">startsecs</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">startretries</span><span class="token punctuation">=</span><span class="token value attr-value">3</span><span class="token key attr-name">exitcodes</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span class="token key attr-name">stopsignal</span><span class="token punctuation">=</span><span class="token value attr-value">TERM</span><span class="token key attr-name">stopwaitsecs</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">stopasgroup</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">killasgroup</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">redirect_stderr</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">stdout_logfile</span><span class="token punctuation">=</span><span class="token value attr-value">/var/log/glances/glances-out.log</span><span class="token key attr-name">stdout_logfile_maxbytes</span><span class="token punctuation">=</span><span class="token value attr-value">1MB</span><span class="token key attr-name">stdout_logfile_backups</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">stdout_capture_maxbytes</span><span class="token punctuation">=</span><span class="token value attr-value">1MB</span><span class="token key attr-name">stdout_events_enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">stderr_logfile</span><span class="token punctuation">=</span><span class="token value attr-value">/var/log/glances/glances-err.log</span><span class="token key attr-name">stderr_logfile_maxbytes</span><span class="token punctuation">=</span><span class="token value attr-value">1MB</span><span class="token key attr-name">stderr_logfile_backups</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">stderr_capture_maxbytes</span><span class="token punctuation">=</span><span class="token value attr-value">1MB</span></code></pre><p>注意先建好目录 <code>/var/log/glances</code></p><h3 id="重新读取配置并启用"><a href="#重新读取配置并启用" class="headerlink" title="重新读取配置并启用"></a>重新读取配置并启用</h3><pre class="language-none"><code class="language-none">supervisorctl reloadsupervisorctl start glances</code></pre><h3 id="可查看运行状态"><a href="#可查看运行状态" class="headerlink" title="可查看运行状态"></a>可查看运行状态</h3><pre class="language-none"><code class="language-none">supervisorctl status</code></pre><p>结果</p><pre class="language-none"><code class="language-none">glances                          RUNNING   pid 46026, uptime 0:05:05</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql字符集问题</title>
      <link href="2020/09/01/mysql%E5%AD%97%E7%AC%A6%E9%9B%86%E9%97%AE%E9%A2%98/"/>
      <url>2020/09/01/mysql%E5%AD%97%E7%AC%A6%E9%9B%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>现代产品和国际化产品建议都使用utf8mb4字符集，表情已无处不在🤖🦖。人生苦短建议mb4.</p><span id="more"></span><p>mysql 可以设置数据库级别，表级别，列级别 字符集编码；控制粒度依次细化，也就是如果都设置了，列级别优先级最高。</p><p>定义数据表结构时建议不要定义列的字符集，以免将来修改变得麻烦。</p><h2 id="修改表的字符集"><a href="#修改表的字符集" class="headerlink" title="修改表的字符集"></a>修改表的字符集</h2><h3 id="修改表的字符集-并刷新之前已存在的数据"><a href="#修改表的字符集-并刷新之前已存在的数据" class="headerlink" title="修改表的字符集 并刷新之前已存在的数据"></a>修改表的字符集 并刷新之前已存在的数据</h3><pre class="language-none"><code class="language-none">ALTER table table_name CONVERT to CHARACTER set  新的字符集; </code></pre><h3 id="修改表的字符集，但不对之前已存在的数据刷新"><a href="#修改表的字符集，但不对之前已存在的数据刷新" class="headerlink" title="修改表的字符集，但不对之前已存在的数据刷新"></a>修改表的字符集，但不对之前已存在的数据刷新</h3><pre class="language-none"><code class="language-none">ALTER table table_name DEFAULT to CHARACTER set  新的字符集; </code></pre><h2 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a>批量修改</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>CONCAT<span class="token punctuation">(</span><span class="token string">'ALTER TABLE '</span><span class="token punctuation">,</span>TABLE_NAME<span class="token punctuation">,</span><span class="token string">' CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;'</span><span class="token punctuation">)</span><span class="token keyword">FROM</span>information_schema<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">TABLES</span><span class="token punctuation">`</span><span class="token keyword">WHERE</span>TABLE_SCHEMA <span class="token operator">=</span> <span class="token string">'DATABASE_NAME'</span><span class="token punctuation">;</span></code></pre><p>得到修改语句，复制出执行语句，进行执行。如果数据库数据较多，将会比较耗时。</p><p>如果只是修改默认字符集不修改数据。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>CONCAT<span class="token punctuation">(</span><span class="token string">'ALTER TABLE '</span><span class="token punctuation">,</span>TABLE_NAME<span class="token punctuation">,</span><span class="token string">' DEFAULT  CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;'</span><span class="token punctuation">)</span><span class="token keyword">FROM</span>information_schema<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">TABLES</span><span class="token punctuation">`</span><span class="token keyword">WHERE</span>TABLE_SCHEMA <span class="token operator">=</span> <span class="token string">'DATABASE_NAME'</span><span class="token punctuation">;</span></code></pre><p>这样执行应该较为安全，也满足一般需求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java开发环境准备</title>
      <link href="2020/08/27/java/mac%E4%B8%8B%E4%BD%BF%E7%94%A8openjdk-11/"/>
      <url>2020/08/27/java/mac%E4%B8%8B%E4%BD%BF%E7%94%A8openjdk-11/</url>
      
        <content type="html"><![CDATA[<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>最近似乎java 8以上的版本都不能从oracle官网下载了，于是就尝试使用open jdk11</p><p><img src="http://img.rc5j.cn/blog20200827114344.png" alt=""></p><span id="more"></span><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>可以从 <a href="https://mirrors.huaweicloud.com/openjdk/">https://mirrors.huaweicloud.com/openjdk/</a> 下载得到</p><h3 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h3><pre class="language-none"><code class="language-none">sudo mv &#x2F;Downloads&#x2F;jdk11 &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk-11.jdk</code></pre><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>配置bash_profile</p><p><code>vim ~/.bash_profile</code></p><pre class="language-none"><code class="language-none">JAVA_HOME&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;jdk-11.0.2&quot;PATH&#x3D;$PATH:$HOME&#x2F;bin:$JAVA_HOME&#x2F;binexport PATH</code></pre><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>Maven 下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><h3 id="mac-brew-安装"><a href="#mac-brew-安装" class="headerlink" title="mac brew 安装"></a>mac brew 安装</h3><pre class="language-shell" data-language="shell"><code class="language-shell">brew <span class="token function">install</span> maven</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glances+influxdb+granfana打造服务器监控系统</title>
      <link href="2020/08/25/glances-influxdb-granfana%E6%89%93%E9%80%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/08/25/glances-influxdb-granfana%E6%89%93%E9%80%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210430141234.png" alt=""></p><p>服务监控就是你的眼睛，当你对服务器运行状况一无所知时，你应该感到坐立不安。</p><span id="more"></span><h2 id="glances安装"><a href="#glances安装" class="headerlink" title="glances安装"></a>glances安装</h2><p>glances是由python编写的，因此可以使用pip直接安装</p><pre class="language-none"><code class="language-none">pip3 install glances</code></pre><h2 id="influxdb安装"><a href="#influxdb安装" class="headerlink" title="influxdb安装"></a>influxdb安装</h2><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.influxdata.com&#x2F;influxdb&#x2F;releases&#x2F;influxdb-1.8.2.x86_64.rpmsudo yum localinstall influxdb-1.8.2.x86_64.rpm</code></pre><h2 id="收集数据到influxdb"><a href="#收集数据到influxdb" class="headerlink" title="收集数据到influxdb"></a>收集数据到influxdb</h2><p>配置 glances</p><p><code>vim /etc/glances/glances.conf</code></p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">influxdb</span><span class="token punctuation">]</span></span><span class="token comment"># Configuration for the --export influxdb option</span><span class="token comment"># https://influxdb.com/</span><span class="token key attr-name">host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">8086</span><span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">db</span><span class="token punctuation">=</span><span class="token value attr-value">glances</span><span class="token key attr-name">prefix</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span><span class="token comment">#tags=foo:bar,spam:eggs</span></code></pre><pre class="language-none"><code class="language-none">pip3 install influxdbglances --export influxdb</code></pre><p>执行 <code>glances --export influxdb</code> 测试下，报错</p><p><code>InfluxDB database &#39;glances&#39; did not exist. Please create it</code>需要新建数据库。</p><p>执行shell <code>influx</code></p><pre class="language-none"><code class="language-none">CREATE DATABASE glances  #创建数据SHOW DATABASES   # 查看数据库</code></pre><p>再次执行<code>glances --export influxdb</code> ,可显示如下代表目前一切正常</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210430141339.png" alt=""></p><h2 id="作为服务运行"><a href="#作为服务运行" class="headerlink" title="作为服务运行"></a>作为服务运行</h2><p>此时我们需要编写.service脚本作为服务后台运行</p><pre class="language-service" data-language="service"><code class="language-service">[Unit]Description&#x3D;glances  daemonAfter&#x3D;network.target influxdb.service[Service]User&#x3D;rootGroup&#x3D;rootExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;glances --quiet --export influxdbType&#x3D;simpleKillMode&#x3D;process[Install]WantedBy&#x3D;multi-user.target</code></pre><p>命名该文件为<code>glances.service</code>并放到<code>/usr/lib/systemd/system</code>目录下</p><p><code>systemctl start glances</code> 启动</p><p>更多的 <code>service</code>脚本编写可参考，<a href="http://www.jinbuguo.com/systemd/systemd.service.html">http://www.jinbuguo.com/systemd/systemd.service.html</a></p><h2 id="granfana安装"><a href="#granfana安装" class="headerlink" title="granfana安装"></a>granfana安装</h2><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.grafana.com&#x2F;oss&#x2F;release&#x2F;grafana-7.1.5-1.x86_64.rpmsudo yum install grafana-7.1.5-1.x86_64.rpm</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl daemon-reloadsystemctl start grafana-serversystemctl status grafana-serversystemctl <span class="token builtin class-name">enable</span> grafana-server.service</code></pre><h3 id="docker-granfana安装"><a href="#docker-granfana安装" class="headerlink" title="docker-granfana安装"></a>docker-granfana安装</h3><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># docker-compose.yml</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.1"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">grafana</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/grafana<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 3001<span class="token punctuation">:</span><span class="token number">3000</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/granfa_admin_pwd <span class="token comment"># 5.2.0之后才可用</span></code></pre><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><pre class="language-conf" data-language="conf"><code class="language-conf"> server &#123;        listen       80;        server_name  grafana-dev.domain.cn;        #charset koi8-r;        location &#x2F; &#123;           proxy_pass  http:&#x2F;&#x2F;127.0.0.1:3001;           proxy_http_version 1.1;           proxy_set_header Upgrade $http_upgrade;           proxy_set_header Connection &quot;upgrade&quot;;        &#125;&#125;</code></pre><p>就可以在web上进行访问,初始的账号密码都是<code>admin</code></p><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210430141408.png" alt=""></p><p>docker安装情况应注意docker容器ip 和宿主机ip</p><pre class="language-shell" data-language="shell"><code class="language-shell">docker network <span class="token function">ls</span> <span class="token comment"># 查看docker网络</span>docker network inspect <span class="token variable">$networkid</span> <span class="token comment"># 查看具体网络信息</span></code></pre><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210811145603.png" alt=""></p><p>在配置<code>influxdb</code> 数据源时，如果你是用<code>docker</code>安装，需要保持<code>granfana</code>和<code>influxdb</code>是在同一个网段</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210811145551.png" alt=""></p><p>添加一个看板</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210811150952.png" alt=""></p><p>grafana 还支持zipkin</p><p><img src="https://vison-blog.oss-cn-beijing.aliyuncs.com/20210430141436.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuetifyjs图标解决方案</title>
      <link href="2020/08/24/web/vuetifyjs%E5%9B%BE%E6%A0%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/08/24/web/vuetifyjs%E5%9B%BE%E6%A0%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200824102537.png" alt=""></p><p>vuetifyjs官方提供的方法实际运用当中似乎会存在一些兼容问题，比如使用Font Awesome时有些图标就不会正常显示。</p><span id="more"></span><h2 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 官方 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-icon</span><span class="token punctuation">></span></span>fas fa-php<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-icon</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 替代 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-php v-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre><p>有些图标不显示的问题可以使用上述方法替代解决</p><h2 id="使用阿里巴巴字体"><a href="#使用阿里巴巴字体" class="headerlink" title="使用阿里巴巴字体"></a>使用阿里巴巴字体</h2><p>阿里巴巴字体非常多非常庞大，基本想要的都有，而国外的很多不能用。所以可以使用阿里巴巴字体替代。</p><p>第一步：拷贝项目下面生成的fontclass代码：</p><p>可以在public/index.html 下用 link 标签引入</p><p>//at.alicdn.com/t/font_8d5l8fzk5b87iudi.css</p><p>第二步：挑选相应图标并获取类名，应用于页面：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont icon-xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gunicorn+flask_rest构建部署轻量级api服务</title>
      <link href="2020/08/20/python/gunicorn-flask-rest%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2%E8%BD%BB%E9%87%8F%E7%BA%A7api%E6%9C%8D%E5%8A%A1/"/>
      <url>2020/08/20/python/gunicorn-flask-rest%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2%E8%BD%BB%E9%87%8F%E7%BA%A7api%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200820155306.png" alt=""></p><span id="more"></span><h2 id="flask-结构"><a href="#flask-结构" class="headerlink" title="flask 结构"></a>flask 结构</h2><p>首先简单看看 flask_rest的目录结构。</p><p><img src="http://img.rc5j.cn/blog20200820155423.png" alt=""></p><h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#app.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> Resource<span class="token punctuation">,</span> Api<span class="token keyword">from</span> resources<span class="token punctuation">.</span>bd <span class="token keyword">import</span> Index<span class="token punctuation">,</span>Format<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS<span class="token comment"># from common import config</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">)</span>api <span class="token operator">=</span> Api<span class="token punctuation">(</span>app<span class="token punctuation">)</span>api<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span>Format<span class="token punctuation">,</span> <span class="token string">'/bd/format'</span><span class="token punctuation">)</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     app.run(debug=True)</span></code></pre><p>如果使用gunicorn启动，则注释掉app.run</p><h2 id="gunicorn启动配置"><a href="#gunicorn启动配置" class="headerlink" title="gunicorn启动配置"></a>gunicorn启动配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># config.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> gevent<span class="token punctuation">.</span>monkeygevent<span class="token punctuation">.</span>monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> multiprocessingdebug <span class="token operator">=</span> <span class="token boolean">True</span>loglevel <span class="token operator">=</span> <span class="token string">'debug'</span>bind <span class="token operator">=</span> <span class="token string">"0.0.0.0:5000"</span>pidfile <span class="token operator">=</span> <span class="token string">"logs/gunicorn.pid"</span>accesslog <span class="token operator">=</span> <span class="token string">"logs/access.log"</span>errorlog <span class="token operator">=</span> <span class="token string">"logs/debug.log"</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 启动的进程数</span>workers <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span>worker_class <span class="token operator">=</span> <span class="token string">'gevent'</span>x_forwarded_for_header <span class="token operator">=</span> <span class="token string">'X-FORWARDED-FOR'</span></code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class="language-shell" data-language="shell"><code class="language-shell">python3 -m venv webpj<span class="token builtin class-name">source</span> webpj/bin/activatepip <span class="token function">install</span> -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.compip <span class="token function">install</span> xlrd -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.compip <span class="token function">install</span> openpyxl -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.comgunicorn -c config.py app:app</code></pre><h2 id="平滑重启"><a href="#平滑重启" class="headerlink" title="平滑重启"></a>平滑重启</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> logs/gunicorn.pid <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -HUP</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas数据快速处理</title>
      <link href="2020/07/31/pandas%E6%95%B0%E6%8D%AE%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/"/>
      <url>2020/07/31/pandas%E6%95%B0%E6%8D%AE%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200731122918.png" alt=""></p><p>销售同事拿到一份数据，但是数据导出列是json,我顺手就帮他处理了下。不得不说 pandas在处理这类问题还是非常效率高的.</p><span id="more"></span><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas<span class="token keyword">import</span> jsondata <span class="token operator">=</span> pandas<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">)</span>address <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>ordertime_list <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'order_datetime'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>address_new_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> ad <span class="token keyword">in</span> address<span class="token punctuation">:</span>    addressJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>ad<span class="token punctuation">)</span>    address_new_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>addressJson<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> ad <span class="token keyword">in</span> address_new_list<span class="token punctuation">:</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> ordertime_list<span class="token punctuation">:</span>        ad<span class="token punctuation">[</span><span class="token string">'order_time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tdf <span class="token operator">=</span> pandas<span class="token punctuation">.</span>DataFrame<span class="token punctuation">.</span>from_records<span class="token punctuation">(</span>address_new_list<span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'new_data.xlsx'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php生态之性能分析</title>
      <link href="2020/07/23/php/php%E7%94%9F%E6%80%81%E4%B9%8B%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
      <url>2020/07/23/php/php%E7%94%9F%E6%80%81%E4%B9%8B%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200724153643.png" alt=""></p><p>一般情况下我们并不会太关注PHP的执行效率，因为一般而言他都表现正常满足需求。但当真正遇到问题的时候，我们需要有分析性能在哪丢失的能力。</p><span id="more"></span><p><code>xhprof</code>正是这样的工具。但是由于年久失修，目前已经不支持PHP7 .</p><p><img src="http://img.rc5j.cn/blog20200724154122.png" alt=""></p><p>不过，好在还有非官方商业组织开源了PHP7版本,<code>tideways-xhprof</code>。</p><p><img src="http://img.rc5j.cn/blog20200724154306.gif" alt=""></p><p>官网  <a href="https://tideways.com/profiler/xhprof-for-php7">https://tideways.com/profiler/xhprof-for-php7</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone <span class="token string">"https://github.com/tideways/php-xhprof-extension.git"</span><span class="token builtin class-name">cd</span> php-xhprof-extensionphpize./configure<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p>配置好ini，重启查看下php -m</p><h2 id="图形化"><a href="#图形化" class="headerlink" title="图形化"></a>图形化</h2><p><code>tideways-xhprof</code> 可以将分析出方法调用、方法调用过程和性能消耗数据。</p><p><code>tideways-xhprof</code> 本身还提供商业化服务，有着比较好的体验。不过也同时有开源的图形化工具。比较好的是<code>xhgui</code>和他配套的是<code>perftools/php-profiler</code>.看了下作者，还是<code>markstory</code>，cakephp的作者，几年前使用cakephp的时候，还有过交流。</p><h2 id="xgui安装"><a href="#xgui安装" class="headerlink" title="xgui安装"></a>xgui安装</h2><p>可以选择源码部署，也可以选择docker部署。方便点选择使用docker。</p><ol><li><p>Clone or download xhgui from GitHub.</p></li><li><p>Startup the containers: docker-compose up -d</p></li><li><p>Open your browser at <a href="http://xhgui.127.0.0.1.xip.io:8142">http://xhgui.127.0.0.1.xip.io:8142</a> or just <a href="http://localhost:8142">http://localhost:8142</a></p></li></ol><h2 id="php-profiler使用"><a href="#php-profiler使用" class="headerlink" title="php-profiler使用"></a>php-profiler使用</h2><p>官方github上写几种接入方式，我推荐用注册shutdown方式，正在对项目代码无入侵。保存过程在shutdown之后。</p><pre class="language-PHP" data-language="PHP"><code class="language-PHP"> $profiler &#x3D; new \Xhgui\Profiler\Profiler($config);    &#x2F;&#x2F; The profiler itself checks whether it should be enabled    &#x2F;&#x2F; for request (executes lambda function from config)$profiler-&gt;enable();    &#x2F;&#x2F; shutdown handler collects and stores the data.$profiler-&gt;registerShutdownHandler();</code></pre><p>上面的<code>$config</code>，在使用非文件存储的时候要注意不要安装官方配置来，官方配置目前存在一点问题，新配置会不生效。我看了源码，并且提交了PR。</p><pre class="language-PHP" data-language="PHP"><code class="language-PHP">&#x2F;&#x2F;    &#39;db.host&#39; &#x3D;&gt; &#39;mongodb:&#x2F;&#x2F;127.0.0.1:27018&#39;,&#x2F;&#x2F;    &#39;db.db&#39; &#x3D;&gt; &#39;xhprof&#39;,    &#39;save.handler.mongodb&#39; &#x3D;&gt; array(        &#39;dsn&#39; &#x3D;&gt; &#39;mongodb:&#x2F;&#x2F;127.0.0.1:27018&#39;,        &#39;database&#39; &#x3D;&gt; &#39;xhprof&#39;,        &#x2F;&#x2F; Allows you to pass additional options like replicaSet to MongoClient.        &#x2F;&#x2F; &#39;username&#39;, &#39;password&#39; and &#39;db&#39; (where the user is added)        &#39;options&#39; &#x3D;&gt; array(),    ),</code></pre><p>注释部分才有效.</p><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><pre class="language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php&#x2F;** * Default configuration for Xhgui *&#x2F;$mongoUri &#x3D; getenv(&#39;XHGUI_MONGO_URI&#39;) ?: &#39;127.0.0.1:27017&#39;;$mongoUri &#x3D; str_replace(&#39;mongodb:&#x2F;&#x2F;&#39;, &#39;&#39;, $mongoUri);$mongoDb &#x3D; getenv(&#39;XHGUI_MONGO_DB&#39;) ?: &#39;xhprof&#39;;return array(    &#39;debug&#39; &#x3D;&gt; false,    &#39;mode&#39; &#x3D;&gt; &#39;development&#39;,    &#x2F;&#x2F; Can be mongodb, file or upload.    &#x2F;&#x2F; For file    &#x2F;&#x2F;    &#x2F;&#x2F;&#39;save.handler&#39; &#x3D;&gt; &#39;file&#39;,    &#x2F;&#x2F;&#39;save.handler.filename&#39; &#x3D;&gt; dirname(__DIR__) . &#39;&#x2F;cache&#x2F;&#39; . &#39;xhgui.data.&#39; . microtime(true) . &#39;_&#39; . substr(md5($url), 0, 6),    &#x2F;&#x2F; For upload    &#x2F;&#x2F;    &#x2F;&#x2F; Saving profile data by upload is only recommended with HTTPS    &#x2F;&#x2F; endpoints that have IP whitelists applied.    &#x2F;&#x2F;    &#x2F;&#x2F; The timeout option is in seconds and defaults to 3 if unspecified.    &#x2F;&#x2F;    &#x2F;&#x2F;&#39;save.handler&#39; &#x3D;&gt; &#39;upload&#39;,    &#x2F;&#x2F;&#39;save.handler.upload.uri&#39; &#x3D;&gt; &#39;https:&#x2F;&#x2F;example.com&#x2F;run&#x2F;import&#39;,    &#x2F;&#x2F;&#39;save.handler.upload.timeout&#39; &#x3D;&gt; 3,    &#x2F;&#x2F; For MongoDB    &#39;save.handler&#39; &#x3D;&gt; &#39;mongodb&#39;,    &#39;db.host&#39; &#x3D;&gt; sprintf(&#39;mongodb:&#x2F;&#x2F;%s&#39;, $mongoUri),    &#39;db.db&#39; &#x3D;&gt; $mongoDb,    &#39;pdo&#39; &#x3D;&gt; array(        &#39;dsn&#39; &#x3D;&gt; &#39;sqlite:&#x2F;tmp&#x2F;xhgui.sqlite3&#39;,        &#39;user&#39; &#x3D;&gt; null,        &#39;pass&#39; &#x3D;&gt; null,        &#39;table&#39; &#x3D;&gt; &#39;results&#39;    ),    &#x2F;&#x2F; Allows you to pass additional options like replicaSet to MongoClient.    &#x2F;&#x2F; &#39;username&#39;, &#39;password&#39; and &#39;db&#39; (where the user is added)    &#39;db.options&#39; &#x3D;&gt; array(),    &#39;templates.path&#39; &#x3D;&gt; dirname(__DIR__) . &#39;&#x2F;src&#x2F;templates&#39;,    &#39;date.format&#39; &#x3D;&gt; &#39;M jS H:i:s&#39;,    &#39;detail.count&#39; &#x3D;&gt; 6,    &#39;page.limit&#39; &#x3D;&gt; 25,    &#x2F;&#x2F; call fastcgi_finish_request() in shutdown handler    &#39;fastcgi_finish_request&#39; &#x3D;&gt; true,    &#x2F;&#x2F; Profile x in 100 requests. (E.g. set XHGUI_PROFLING_RATIO&#x3D;50 to profile 50% of requests)    &#x2F;&#x2F; You can return true to profile every request.    &#39;profiler.enable&#39; &#x3D;&gt; function() &#123;        $ratio &#x3D; getenv(&#39;XHGUI_PROFILING_RATIO&#39;) ?: 100;        return (getenv(&#39;XHGUI_PROFILING&#39;) !&#x3D;&#x3D; false) &amp;&amp; (mt_rand(1, 100) &lt;&#x3D; $ratio);    &#125;,    &#39;profiler.simple_url&#39; &#x3D;&gt; function($url) &#123;        return preg_replace(&#39;&#x2F;\&#x3D;\d+&#x2F;&#39;, &#39;&#39;, $url);    &#125;,        &#x2F;&#x2F;&#39;profiler.replace_url&#39; &#x3D;&gt; function($url) &#123;    &#x2F;&#x2F;    return str_replace(&#39;token&#39;, &#39;&#39;, $url);    &#x2F;&#x2F;&#125;,    &#39;profiler.options&#39; &#x3D;&gt; array(),    &#39;profiler.skip_built_in&#39; &#x3D;&gt; false,);</code></pre><p>以上是默认配置</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://img.rc5j.cn/blog20200724134032.png" alt=""></p><p>图中可以看到,每次请求的花费时间。</p><p><img src="http://img.rc5j.cn/blog20200724165205.png" alt=""></p><p><img src="http://img.rc5j.cn/blog20200724165354.png" alt=""></p><p>通过观察方法调用次数，可以发现symfony ErrorHandler这个组件方法执行的特别多。</p><p>于是我取消了这个组件，发现接口请求时间从<code>113ms</code>直接就降到了<code>71ms</code>.</p><p><strong>这就是很直观的性能定位了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>edge使用google theme</title>
      <link href="2020/07/10/edge%E4%BD%BF%E7%94%A8google-theme/"/>
      <url>2020/07/10/edge%E4%BD%BF%E7%94%A8google-theme/</url>
      
        <content type="html"><![CDATA[<p>用edge打开 edge://flags/#edge-allow-store-extension-themes</p><p><img src="http://img.rc5j.cn/blog20200710172834.png" alt=""></p><p>改为启用！</p><p>访问 <a href="https://chrome.google.com/webstore/category/themes">https://chrome.google.com/webstore/category/themes</a></p><p>安装即可啦。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kafka搭建和使用(PHP语言版本)</title>
      <link href="2020/07/08/php/kafka%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-PHP%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/"/>
      <url>2020/07/08/php/kafka%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-PHP%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200723094704.png" alt=""></p><p>首先,安装确实是一个费时费力的事情。这里我们使用docker安装。</p><span id="more"></span><h2 id="docker搭建kafka"><a href="#docker搭建kafka" class="headerlink" title="docker搭建kafka"></a>docker搭建kafka</h2><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token comment">## docker-compose.yml</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">zookeeper</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/zookeeper        <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token string">"2181:2181"</span>    <span class="token key atrule">kafka</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka        <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token string">"9092:9092"</span>        <span class="token key atrule">environment</span><span class="token punctuation">:</span>           <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> 172.17.0.1           <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span><span class="token number">2181</span>           <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9092</span></code></pre><p>更多细节建议访问官方文档查阅。</p><h2 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h2><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><pre class="language-PHP" data-language="PHP"><code class="language-PHP">public function kafka(Request $request)   &#123;       $faker &#x3D; Factory::create(&#39;zh_CN&#39;);       $message &#x3D; $faker-&gt;name();       Log::debug(&#39;消息&#39;, [&#39;message&#39; &#x3D;&gt; $message]);       $conf &#x3D; new Conf();       $conf-&gt;set(&#39;log_level&#39;, (string) LOG_DEBUG);       $conf-&gt;set(&#39;debug&#39;, &#39;all&#39;);       $conf-&gt;set(&#39;metadata.broker.list&#39;, &#39;127.0.0.1:9092&#39;);       $conf-&gt;setDrMsgCb(function ($kafka, $message) &#123;           Log::debug(&quot;kafka信息&quot;, [&#39;message&#39; &#x3D;&gt; var_export($message, true)]);       &#125;);       $conf-&gt;setErrorCb(function ($kafka, $err, $reason) &#123;           Log::debug(&quot;kafka错误&quot;, [&#39;err&#39; &#x3D;&gt; $err, &#39;reason&#39; &#x3D;&gt; $reason]);       &#125;);       $conf-&gt;setLogCb(function ($kafka, $level, $facility, $message) &#123;           Log::debug(vsprintf(&quot;Kafka %s: %s (level: %d)\n&quot;, [$facility, $message, $level]));       &#125;);       &#x2F;&#x2F;If you need to produce exactly once and want to keep the original produce order, uncomment the line below       &#x2F;&#x2F;$conf-&gt;set(&#39;enable.idempotence&#39;, &#39;true&#39;);       $producer &#x3D; new Producer($conf);       $topic &#x3D; $producer-&gt;newTopic(&quot;test&quot;);       $topic-&gt;produce(RD_KAFKA_PARTITION_UA, 0, $faker-&gt;name());       $producer-&gt;poll(0);       $result &#x3D; $producer-&gt;flush(10000);       if (RD_KAFKA_RESP_ERR_NO_ERROR !&#x3D;&#x3D; $result) &#123;           throw new \RuntimeException(&#39;Was unable to flush, messages might be lost!&#39;);       &#125;       return new ActionResponse($result);   &#125;</code></pre><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><pre class="language-PHP" data-language="PHP"><code class="language-PHP">public function consume()    &#123;        $conf &#x3D; new Conf();&#x2F;&#x2F; Configure the group.id. All consumer with the same group.id will consume&#x2F;&#x2F; different partitions.        $conf-&gt;set(&#39;group.id&#39;, &#39;myConsumerGroup&#39;);&#x2F;&#x2F; Initial list of Kafka brokers        $conf-&gt;set(&#39;metadata.broker.list&#39;, &#39;127.0.0.1&#39;);&#x2F;&#x2F; Set where to start consuming messages when there is no initial offset in&#x2F;&#x2F; offset store or the desired offset is out of range.&#x2F;&#x2F; &#39;smallest&#39;: start from the beginning        $conf-&gt;set(&#39;auto.offset.reset&#39;, &#39;smallest&#39;);        $consumer &#x3D; new KafkaConsumer($conf);&#x2F;&#x2F; Subscribe to topic &#39;test&#39;        $consumer-&gt;subscribe([&#39;test&#39;]);        echo &quot;Waiting for partition assignment... (make take some time when\n&quot;;        echo &quot;quickly re-joining the group after leaving it.)\n&quot;;        while (true) &#123;            $message &#x3D; $consumer-&gt;consume(120 * 1000);            switch ($message-&gt;err) &#123;                case RD_KAFKA_RESP_ERR_NO_ERROR:                    $this-&gt;info($message-&gt;payload);                    break;                case RD_KAFKA_RESP_ERR__PARTITION_EOF:                    echo &quot;No more messages; will wait for more\n&quot;;                    break;                case RD_KAFKA_RESP_ERR__TIMED_OUT:                    $this-&gt;info(&quot;Timed out&quot;);                    break;                default:                    throw new Exception($message-&gt;errstr(), $message-&gt;err);                    break;            &#125;        &#125;    &#125;</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>生产者是一个restful的api，直接调用会往kafka里写入1个中文姓名的消息。</p><p>消费者是一个PHP脚本进程，启动会开始消费kafka消息</p><pre class="language-shell" data-language="shell"><code class="language-shell">php bin/cli.php kafka consume</code></pre><p><img src="http://img.rc5j.cn/blog20200709115956.png" alt=""></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>虽然已经搭建了kafka<code>消息中间件</code>,和编写了<code>生产者</code>和<code>消费者</code>.但是关于其中的许多细节还要搞清除。包括:</p><ul><li>什么是broken</li><li>什么是partition</li><li>消息flush是做什么</li><li>poll又是做什么</li><li>等等更多细节</li></ul><h2 id="broken"><a href="#broken" class="headerlink" title="broken"></a>broken</h2>]]></content>
      
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个线上问题引发的对PHP生命周期和SESSION机制思考</title>
      <link href="2020/07/01/php/%E4%B8%80%E4%B8%AA%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E5%AF%B9PHP%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8CSESSION%E6%9C%BA%E5%88%B6%E6%80%9D%E8%80%83/"/>
      <url>2020/07/01/php/%E4%B8%80%E4%B8%AA%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E5%AF%B9PHP%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8CSESSION%E6%9C%BA%E5%88%B6%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP生态之自动化测试</title>
      <link href="2020/07/01/php/PHP%E7%94%9F%E6%80%81%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>2020/07/01/php/PHP%E7%94%9F%E6%80%81%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>PHP TESTING FOR EVERYONE</p><span id="more"></span><p><img src="http://img.rc5j.cn/blog20200701101728.png" alt=""></p><p>在长久的工作经历中，测试大佬常会在你耳旁嘀咕开发要自测要自测。但是实际上开发往往只会关心当前负责的单元功能的正确与否。繁杂的开发任务当中，还要兼顾所有流程的功能运转可能就没那个精力了，或者说这本身就是测试的工作。在远古时代互联网领域工作还没细分到前端、后端、测试、UI的时候，所有一揽子活都只有一个人做，那就是程序员。</p><p><strong>但是如何尽量保证程序返回结果是预期的？</strong> 能否做到每次发布之前自动对程序测试看是否达到预期？<br>这个时候我们可以引入<strong>自动化测试</strong>。</p><h2 id="自动化测试范围"><a href="#自动化测试范围" class="headerlink" title="自动化测试范围"></a>自动化测试范围</h2><ul><li>UI测试</li><li>接口测试</li><li>单元测试</li><li>数据测试</li></ul><p>其中UI测试和数据测试的自动化可能是最不容易做且效益最小的。这部分可能最好是人为的进行测试效果最好。</p><p>在体验了java 的junit之后特别觉得junit的强大,其实PHP也可以做。接下来我们来了解下PHP的测试框架<code>codeception</code></p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><pre class="language-none"><code class="language-none">composer require &quot;codeception&#x2F;codeception&quot; --dev</code></pre><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><pre class="language-none"><code class="language-none">php vendor&#x2F;bin&#x2F;codecept bootstrap</code></pre><p>该命令会初始化配置文件和目录</p><h3 id="轻量安装"><a href="#轻量安装" class="headerlink" title="轻量安装"></a>轻量安装</h3><p>Use predefined installation templates for common use cases. Run them instead of bootstrap command.</p><p><code>bootstrap</code>会默认初始化所有测试类型所需要的组件，有些你不会用到的类库也会安装。推荐使用轻量安装所用能到的测试类型。</p><p>例如你只需要单元测试，则可以</p><pre class="language-none"><code class="language-none">php vendor&#x2F;bin&#x2F;codecept init unit</code></pre><p><strong>suite配置</strong></p><p>初始化之后还要对测试类型进行相应的配置,在tests目录下新建unit的配置</p><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># unit.suite.yml</span><span class="token comment"># Codeception Test Suite Configuration</span><span class="token comment">#</span><span class="token comment"># Suite for unit or integration tests.</span><span class="token key atrule">actor</span><span class="token punctuation">:</span> UnitTester<span class="token key atrule">modules</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Asserts        <span class="token punctuation">-</span> \Helper\Unit    <span class="token key atrule">step_decorators</span><span class="token punctuation">:</span> <span class="token null important">~</span>        </code></pre><p><img src="http://img.rc5j.cn/blog20200702152857.png" alt=""></p><h2 id="codeception单元测试"><a href="#codeception单元测试" class="headerlink" title="codeception单元测试"></a>codeception单元测试</h2><p><img src="http://img.rc5j.cn/blog20200702143824.png" alt=""></p><p>codeception的单元测试其实也是基于phpunit之上构建的。phpunit的单元测试用例可以之前在codeception上执行。</p><h3 id="创建单元测试"><a href="#创建单元测试" class="headerlink" title="创建单元测试"></a>创建单元测试</h3><pre class="language-none"><code class="language-none">php vendor&#x2F;bin&#x2F;codecept generate:test unit Example</code></pre><p>执行完会在tests/unit目录里创建测试用例文件 </p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ExampleTest</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Codeception<span class="token punctuation">\</span>Test<span class="token punctuation">\</span>Unit</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @var \UnitTester     */</span>    <span class="token keyword">protected</span> <span class="token variable">$tester</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">_before</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">_after</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// tests</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>all public methods with test prefix are tests</li><li>_before method is executed before each test (like setUp in PHPUnit)</li><li>_after method is executed after each test (like tearDown in PHPUnit)</li></ul><h3 id="运行用例"><a href="#运行用例" class="headerlink" title="运行用例"></a>运行用例</h3><pre class="language-none"><code class="language-none">php vendor&#x2F;bin&#x2F;codecept run unit ExampleTest</code></pre><p>如果有目录可以执行到文件</p><pre class="language-none"><code class="language-none">php bin&#x2F;codecept run unit tests&#x2F;unit&#x2F;src&#x2F;Service&#x2F;InvoiceServiceTest.php       </code></pre><p>运行所有单元测试用例</p><pre class="language-none"><code class="language-none">php vendor&#x2F;bin&#x2F;codecept run unit</code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserTest</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Codeception<span class="token punctuation">\</span>Test<span class="token punctuation">\</span>Unit</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'toolooooongnaaaaaaameeee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'davert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="http://img.rc5j.cn/blog20200723093255.png" alt=""></p><p><img src="http://img.rc5j.cn/blog20200723093429.png" alt=""></p><p>可以统计到所有文件的覆盖率和用例测试结果。</p><p>结合git钩子我们可以在每次分支提交时进行自动的用例测试，能一定程度上防止代码更改了而没测试产生非预期的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intl安装的那些事儿</title>
      <link href="2020/06/19/php/intl%E5%AE%89%E8%A3%85%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>2020/06/19/php/intl%E5%AE%89%E8%A3%85%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<p>被intl折磨的还不够么</p><span id="more"></span><p>To build the extension you need to install the » ICU library, version 4.0.0 or newer is required. As of PHP 7.4.0 ICU 50.1 or newer is required.</p><p>This extension is bundled with PHP as of PHP version 5.3.0. Alternatively, the PECL version of this extension may be used with all PHP versions greater than 5.2.0 (5.2.4+ recommended).</p><h2 id="ICU安装"><a href="#ICU安装" class="headerlink" title="ICU安装"></a>ICU安装</h2><p>现在icu已被放到github，下载建议直接从github下载源码到本地。</p><p><a href="https://github.com/unicode-org/icu/releases/tag/release-60-3">https://github.com/unicode-org/icu/releases/tag/release-60-3</a></p><p>下载后编译安装</p><h2 id="拓展安装"><a href="#拓展安装" class="headerlink" title="拓展安装"></a>拓展安装</h2><pre class="language-shell" data-language="shell"><code class="language-shell">pecl <span class="token function">install</span> intl</code></pre><p>总会遇到问题,建议用phpize 源码安装。进入源码ext下的intl目录</p><pre class="language-none"><code class="language-none">.&#x2F;configure  --enable-intl   --with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;bin&#x2F;php-configmakemake install</code></pre><p>重启php-fpm</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Dynamic SQL使用尝试</title>
      <link href="2020/06/01/java/MyBatis-Dynamic-SQL%E4%BD%BF%E7%94%A8%E5%B0%9D%E8%AF%95/"/>
      <url>2020/06/01/java/MyBatis-Dynamic-SQL%E4%BD%BF%E7%94%A8%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>首先说明下，我可能是被这个插件的名字给误导了。我原本以为Dynamic SQL是为了解决动态查询场景的。但可能<code>MyBatis Dynamic SQL</code> 并不是来解决这个问题的。</p><p>20.06.04更新</p><p><strong>打脸了</strong>，原来它是支持的，果然是动态sql.并且还真香！</p><span id="more"></span><h2 id="MyBatis-Dynamic-SQL"><a href="#MyBatis-Dynamic-SQL" class="headerlink" title="MyBatis Dynamic SQL"></a>MyBatis Dynamic SQL</h2><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><p>This library is a framework for generating dynamic SQL statements. Think of it as a typesafe SQL templating library, with additional support for MyBatis3 and Spring JDBC Templates.</p><p>The primary goals of the library are:</p><ul><li>Typesafe - to the extent possible, the library will ensure that parameter types match the database column types</li><li>Expressive - statements are built in a way that clearly communicates their meaning (thanks to Hamcrest for some inspiration)</li><li>Flexible - where clauses can be built using any combination of and, or, and nested conditions</li><li>Extensible - the library will render statements for MyBatis3, Spring JDBC templates or plain JDBC. It can be extended to generate clauses for other frameworks as well. Custom where conditions can be added easily if none of the built in conditions are sufficient for your needs.</li><li>Small - the library is a small dependency to add. It has no transitive dependencies.</li></ul><p>官方似乎说到这个类库的主要目标是解决类型安全问题。</p><p>This library grew out of a desire to create a utility that could be used to improve the code generated by MyBatis Generator, but the library can be used on it’s own with very little setup required.</p><p>官方说可以使用<code>MyBatis Generator</code>生成代码文件。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.dynamic-sql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-dynamic-sql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="MyBatis-Generator"><a href="#MyBatis-Generator" class="headerlink" title="MyBatis Generator"></a>MyBatis Generator</h2><p>MyBatis Generator may generate:</p><p>Java or Kotlin classes that match the table structure. This may include:</p><ul><li>a class to match the primary key of the table (if there is a primary key)</li><li>a class to match the non-primary key fields of the table (except BLOB fields)</li><li>a class to include the BLOB fields of a table (if the table has BLOB fields)</li><li>a class to enable dynamic selects, updates, and deletes</li></ul><p><code>MyBatis Generator</code>将会生成下述三个文件：</p><ul><li>与表对应的 model 类 Employee.java</li><li>定义了表信息和列信息的 support 类 EmployeeDynamicSqlSupport.java</li><li>以注解形式实现的 mapper 接口 EmployeeMapper.java</li></ul><h3 id="Running-MyBatis-Generator-With-Maven"><a href="#Running-MyBatis-Generator-With-Maven" class="headerlink" title="Running MyBatis Generator With Maven"></a>Running MyBatis Generator With Maven</h3><ol><li>配置pom.xml</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Generate MyBatis Artifacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>generate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><p>注意<code>mysql-connector-java</code>依赖配置</p><ol start="2"><li>配置 generatorConfig.xml</li></ol><p>在resource中配置生成配置文件generatorConfig.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dsql<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3DynamicSql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/db_itdoc<span class="token punctuation">"</span></span> <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.vison.itdoc.entity<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.vison.itdoc.dao<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>task<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre><p><code>userId</code>和<code>password</code>分别是数据库用户名和密码</p><ol start="3"><li>执行生成</li></ol><pre class="language-shell" data-language="shell"><code class="language-shell">$ mvn mybatis-generator:generate</code></pre><h2 id="使用MyBatis-Dynamic-SQL"><a href="#使用MyBatis-Dynamic-SQL" class="headerlink" title="使用MyBatis Dynamic SQL"></a>使用MyBatis Dynamic SQL</h2><p>当相应的文件生成之后，这个时候可以直接使用了。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SelectStatementProvider</span> queryCount <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">RenderingStrategies</span><span class="token punctuation">.</span>MYBATIS3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Long</span> taskCount <span class="token operator">=</span> taskMapper<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>queryCount<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>taskCount <span class="token operator">/</span> iPageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">SelectStatementProvider</span> tasksQuerypProvider <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>iPageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>iOffset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">RenderingStrategy</span><span class="token punctuation">.</span>MYBATIS3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">></span></span> tasks <span class="token operator">=</span> taskMapper<span class="token punctuation">.</span><span class="token function">selectMany</span><span class="token punctuation">(</span>tasksQuerypProvider<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>MyBatis Dynamic SQL</code>非常优雅得sqlbuilder方式,会提示表字段名。</p><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3><p>在这之前<code>mybatis</code>可以使用xml或注解方式进行动态组织sql</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> remark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#123;</span>                <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">"T.ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">"TASK T"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"T.type = #&#123;type&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>remark <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"T.remark = #&#123;remark&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">ORDER_BY</span><span class="token punctuation">(</span><span class="token string">"T.create_time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>在mapper上</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SelectProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">TaskService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"queryCount"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">queryCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> remark<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在可以换另一种方式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SelectStatementProvider</span> <span class="token function">countTask</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> typeInteger<span class="token punctuation">,</span> <span class="token class-name">String</span> remarkString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">QueryExpressionDSL</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectModel</span><span class="token punctuation">></span></span><span class="token punctuation">.</span>QueryExpressionWhereBuilder builder <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeInteger <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token function">isEqualTo</span><span class="token punctuation">(</span>typeInteger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remarkString <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>remark<span class="token punctuation">,</span> <span class="token function">isEqualTo</span><span class="token punctuation">(</span>remarkString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">RenderingStrategy</span><span class="token punctuation">.</span>MYBATIS3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">SelectStatementProvider</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">Object</span> searchObj<span class="token punctuation">,</span> <span class="token class-name">Integer</span> iPageSize<span class="token punctuation">,</span> <span class="token class-name">Integer</span> iOffset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">QueryExpressionDSL</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectModel</span><span class="token punctuation">></span></span><span class="token punctuation">.</span>QueryExpressionWhereBuilder builder <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>remark<span class="token punctuation">,</span> type<span class="token punctuation">,</span> createTime<span class="token punctuation">,</span> modifyTime<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder            <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>iPageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>iOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">RenderingStrategy</span><span class="token punctuation">.</span>MYBATIS3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>从编码感受上，由于根据表结构生成了<code>SqlSupport</code>.任何对表的信息引用都能有提示，包括表名、字段名。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">></span></span> tasks <span class="token operator">=</span> taskMapper<span class="token punctuation">.</span><span class="token function">selectMany</span><span class="token punctuation">(</span>taskService<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> iPageSize<span class="token punctuation">,</span> iOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>调用上面，也无需在mapper上再编写方法，因为已经全部生成了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.olowolo.com/post/new-mybatis-dynamic-sql/">Mybatis Dynamic SQL - 重新定义 Mybatis 动态 SQL</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用信号控制php常驻进程平滑中断思考</title>
      <link href="2020/05/30/php/php%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8B%E5%B9%B3%E6%BB%91%E4%B8%AD%E6%96%AD/"/>
      <url>2020/05/30/php/php%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8B%E5%B9%B3%E6%BB%91%E4%B8%AD%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>很多场景下我们都需要进程程序在后台一直处理任务，比如队列消费。可采用while true的方式让进程常驻按一定的频次执行任务。但是但我们要重启进程或中止进程时，如何保证进程内正在执行的任务执行完毕再中止呢？</p><span id="more"></span><p>思考一下，可不可以我们通过一种指令告诉进程，”诶，我现在要重启一下，你能把正在做的事情做完了先退出歇会么？”</p><p><code>kill</code>命令可以解决这个问题。</p><h2 id="再看kill"><a href="#再看kill" class="headerlink" title="再看kill"></a>再看kill</h2><p>许人肯定会觉得 kill 不就是杀掉进程么？ 我经常用<code>kill -9</code>杀进程。 这么说也没错，不过我们现在可以系统地来看看<code>kill</code>命令.</p><p>我们先看下官方的定义,让那个男人来跟我们讲讲。</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">man</span> shell</code></pre><pre class="language-none"><code class="language-none">KILL(1)                                                                         User Commands                                                                         KILL(1)NAME       kill - terminate a processSYNOPSIS       kill [-s signal|-p] [-q sigval] [-a] [--] pid...       kill -l [signal]DESCRIPTION       The command kill sends the specified signal to the specified process or process group.  If no signal is specified, the TERM signal is sent.  The TERM signal will kill       processes which do not catch this signal.  For other processes, it may be necessary to use the KILL (9) signal, since this signal cannot be caught.       Most modern shells have a builtin kill function, with a usage rather similar to that of the command described here.  The &#39;-a&#39; and &#39;-p&#39; options, and the possibility to       specify processes by command name are a local extension.       If sig is 0, then no signal is sent, but error checking is still performed.</code></pre><ul><li>官方解释<code>kill</code>是用来终止进程的。</li><li><code>kill</code> 发送指定的信号给到进程或进程组。</li><li>如果没有指定信号，默认发送<code>TERM</code>信号。</li><li><code>TERM</code>信号将会杀掉进程，当<code>TERM</code>未被捕获的时候。</li><li><code>9</code>信号不能被捕获</li></ul><p><strong>谈谈我的理解</strong></p><ol><li>kill命令就是用来杀掉进程的</li><li>它可以给进程发送一些指令，让程序去捕获做特殊处理。比如上面说到的场景，让程序执行完正在执行的任务，再退出。</li></ol><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>接下来我们用PHP脚本来验证下上面的理解。我们用<code>pcntl_signal</code>来对信号进行捕获。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">SignalShell</span> <span class="token keyword">extends</span> <span class="token class-name">Shell</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$taskFinish</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token comment">//        pcntl_signal(SIGTERM, [$this, 'sig_handler']);</span><span class="token comment">//        pcntl_signal(SIGHUP, [$this, 'sig_handler']);</span>        <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGINT</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sig_handler'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        pcntl_signal(SIGQUIT, [$this, 'sig_handler']);</span>        <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGILL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sig_handler'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGPIPE</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sig_handler'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGALRM</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sig_handler'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGUSR1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sig_handler'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"注册信号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">taskFinish</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sig_handler</span><span class="token punctuation">(</span><span class="token variable">$signo</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$signo</span> <span class="token operator">==</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//忽略alarm信号</span>            <span class="token keyword">echo</span> <span class="token variable">$time</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" ignore alarm signo[<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$signo</span><span class="token punctuation">&#125;</span></span>]\r\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$time</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" exit  signo[<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$signo</span><span class="token punctuation">&#125;</span></span>]\r\n"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$signo</span> <span class="token operator">==</span> <span class="token constant">SIGUSR1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"捕获自定义"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">taskFinish</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>代码很简单，就是让脚本每隔10秒输出一个字符串，任务之前对一些信号进行捕获。</p><p><img src="http://img.rc5j.cn/blog20200530114817.png" alt=""></p><p>分别对进程执行了，kill、kill QUIT、kill HUP 发现进程都会被直接终止。</p><p>下面我们开始,对<code>TERM</code>进行捕获。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGTERM</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sig_handler'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打开注释。</p><p><img src="http://img.rc5j.cn/blog20200530115128.png" alt=""></p><p>15信号(TERM)被捕获到了，但是进程并没有退出,还再继续执行。</p><p>我们再试下USR1信号。</p><p><img src="http://img.rc5j.cn/blog20200530115632.png" alt=""></p><p>USR1被捕获到了，并且程序立即执行完一次输出退出了。注意我是程序自己控制了,捕获到USR1之后不继续执行循环。</p><p>细心的朋友们可能会发现，程序中的sleep被跳过了。</p><p><strong>这是什么原因呢?</strong></p><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>事实上sleep是一个特殊的函数。其实官方文档有解释:</p><p><img src="http://img.rc5j.cn/blog20200530120859.png" alt=""></p><p><code>sleep</code>在被信号中止时，会返回非0值,非windows下会返回剩余秒数。</p><p>让我们来验证下。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">taskFinish</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sleep返回:"</span><span class="token operator">.</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们记录了sleep执行完的返回值。</p><p><img src="http://img.rc5j.cn/blog20200530121207.png" alt=""></p><p>发现信号给到时，sleep确实会返回剩余秒数。这就解释了为什么上面看到的sleep被跳过了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>A process can define how to handle incoming POSIX signals. If a process does not define a behaviour for a signal, then the default handler for that signal is being used. The table below lists some default actions for POSIX-compliant UNIX systems, such as FreeBSD, OpenBSD and Linux.</p></blockquote><ol><li>kill能给进程发送信号量，告诉进程按什么方式结束。</li><li>kill定义的不同信号量，用法不同，但是需要程序自己去处理。它只是定义了目的，但未定义过程和实际结果。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/Signal_(IPC)">https://en.wikipedia.org/wiki/Signal_(IPC)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> php linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot分环境自定义配置</title>
      <link href="2020/05/26/java/spring-boot%E5%88%86%E7%8E%AF%E5%A2%83%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/"/>
      <url>2020/05/26/java/spring-boot%E5%88%86%E7%8E%AF%E5%A2%83%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在一般规模企业，应当都有测试环境和正式环境区别，或者至少也有开发环境和正式环境。那不同环境必然就会有一些环境依赖的不同，不管是出于安全性考虑还是其他原因导致的。比如数据库配置、OSS账号信息等。那程序当中就需要配置多份配置信息和根据不同环境使用不同配置</p><span id="more"></span><h2 id="分环境配置"><a href="#分环境配置" class="headerlink" title="分环境配置"></a>分环境配置</h2><p><img src="http://img.rc5j.cn/blog20200526133442.png" alt=""></p><pre class="language-none"><code class="language-none"># 激活日志环境spring.profiles.active&#x3D;prd</code></pre><p>公共配置还是写在application。<br>相应配置写在-{env} 文件里。</p><h2 id="自定义配置获取"><a href="#自定义配置获取" class="headerlink" title="自定义配置获取"></a>自定义配置获取</h2><p>上面是spring框架所需的默认配置方法，我们通常还需要非常多的自定义配置。比如密码的加盐salt等等，这是项目的自定义配置。</p><p>那如果对这些自定义内容进行配置和获取呢。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我们依然可以在application.properties进行配置。</p><p>例如：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">app.security.salt</span><span class="token punctuation">=</span><span class="token attr-value">zM2Y&amp;*21.rkJr=11</span><span class="token attr-name">app.oss.host</span><span class="token punctuation">=</span><span class="token attr-value">http://oss-cn-beijing.aliyuncs.com</span><span class="token attr-name">app.oss.bucket</span><span class="token punctuation">=</span><span class="token attr-value">bucketNanme</span><span class="token attr-name">app.oss.accessKey</span><span class="token punctuation">=</span><span class="token attr-value">accessKey</span><span class="token attr-name">app.oss.accessSecret</span><span class="token punctuation">=</span><span class="token attr-value">accessSecret</span></code></pre><h2 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;app.oss.host&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;app.oss.accessKey&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeyId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;app.oss.accessSecret&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeySecret<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;app.oss.bucket&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>一定要是在spring bean里进行获取，否则无法获取到。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.spring.io/spring-boot/docs/1.5.22.RELEASE/reference/html/boot-features-external-config.html">https://docs.spring.io/spring-boot/docs/1.5.22.RELEASE/reference/html/boot-features-external-config.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java spring-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql单个表的权限控制</title>
      <link href="2020/05/08/mysql/mysql%E5%8D%95%E4%B8%AA%E8%A1%A8%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>2020/05/08/mysql/mysql%E5%8D%95%E4%B8%AA%E8%A1%A8%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在系统开发当中有这样的需求，A系统需要读写B系统的数据库数据,但是某些特殊的表数据只允许读操作。这时候就需要做到表级的权限控制。</p></blockquote><span id="more"></span><h2 id="revoke"><a href="#revoke" class="headerlink" title="revoke"></a>revoke</h2><p>Mysql本身是支持用revoke进行权限回收操作的。</p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/revoke.html">https://dev.mysql.com/doc/refman/5.6/en/revoke.html</a></p><pre class="language-none"><code class="language-none">REVOKE    priv_type [(column_list)]      [, priv_type [(column_list)]] ...    ON [object_type] priv_level    FROM user [, user] ...REVOKE ALL [PRIVILEGES], GRANT OPTION    FROM user [, user] ...REVOKE PROXY ON user    FROM user [, user] ...</code></pre><p>从语法当中可以看到还可以做到列级别的控制。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><pre class="language-none"><code class="language-none">mysql&gt; revoke insert,delete,update on db_oms.t_order from &#39;oms_order_ro&#39;@&#39;localhost&#39;;ERROR 1147 (42000): There is no such grant defined for user &#39;oms_order_ro&#39; on host &#39;localhost&#39; on table &#39;t_order&#39;</code></pre><p>但是事实上，执行的时候会遇到问题。</p><p><strong>什么原因呢？</strong></p><pre class="language-none"><code class="language-none">mysql&gt; show grants for oms_order_ro@localhost    -&gt; ;+----------------------------------------------------------------------------------+| Grants for oms_order_ro@localhost                                                |+----------------------------------------------------------------------------------+| GRANT USAGE ON *.* TO &#39;oms_order_ro&#39;@&#39;localhost&#39;                                 || GRANT SELECT, INSERT, UPDATE, DELETE ON &#96;db_oms&#96;.* TO &#39;oms_order_ro&#39;@&#39;localhost&#39; |+----------------------------------------------------------------------------------+</code></pre><p>仔细看下，我们是使用的通配符去进行赋权限。看起来这里mysql还是表现的比较本。认为没有该权限进行回收。</p><p>那么正确的做法应该是怎样的呢？</p><blockquote><p>Managing access in mysql can be quite dificult !!</p></blockquote><p>Once you gave him database.* you cannot revoke access for an object that is in that class. MySQL doesn’t expand the Hotels.* wildcard to the individual tables The permissions tables store the granted permissions. Therefore, since you didn’t actually grant anything on Hotels.AllHotels , there’s nothing for MySQL to revoke. In this case you need to do it granular form the start !</p><p>Remove all privileges on database, table, column levels, etccc.</p><p>Grant privileges to EACH table, except ‘you choose’.<br>Grant privilege to specified fields in table ‘you choose’.</p><p><strong>我们必须要逐个逐个表进行赋权限，然后进行回收。</strong></p><p>实际上这么操作虽然能解决问题，但是会带来跟多问题，如果表增加了。你必须再对这个表进行赋权限和回收权限。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium自动化测试在页面web性能测试应用的尝试</title>
      <link href="2020/05/07/Selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%9C%A8%E9%A1%B5%E9%9D%A2web%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%BA%94%E6%9C%89%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
      <url>2020/05/07/Selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%9C%A8%E9%A1%B5%E9%9D%A2web%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%BA%94%E6%9C%89%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>对于web测试，我们通常在做的测试都是人工的功能测试。那么少见的自动化测试到底适用哪些场景呢？</p><span id="more"></span><h1 id="用python进行web自动化测试"><a href="#用python进行web自动化测试" class="headerlink" title="用python进行web自动化测试"></a>用python进行web自动化测试</h1><blockquote><p>前段时间，在客服信息系统进入用户体验阶段时发现内存存在泄露问题。我们花了很多时间去排查原因。经过各种可能的优化方案，结果发现没有实质性的效果，于是我们决定重构。但是如何保证重构方案的可行呢？于是我们用到了python+Selenium</p></blockquote><h2 id="为什么会用到web自动化测试"><a href="#为什么会用到web自动化测试" class="headerlink" title="为什么会用到web自动化测试"></a>为什么会用到web自动化测试</h2><h3 id="web自动化测试适用场景"><a href="#web自动化测试适用场景" class="headerlink" title="web自动化测试适用场景"></a>web自动化测试适用场景</h3><p>对于web测试，我们通常在做的测试都是人工的功能测试。那么少见的自动化测试到底适用哪些场景呢？</p><ul><li>回归测试。每一次应用发布，都伴随着一次回归测试。对于重复性的工作，机器显然更适合。</li><li>兼容性测试。不管是Web测试，还是App测试，兼容性测试都是必不可少的一环。以Web测试为例，同样的测试用例，需要在不同的浏览器上分别运行一遍，这对测试人员而言不可谓不是一种折磨。</li><li>大规模测试。如果一次测试涉及的测试用例过多（比如100+），功能测试难免会有遗漏或者重复，而自动化测试可以轻松确保一个不少，一个也不多。</li><li>性能测试</li></ul><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>万事皆有利弊，机器的自动化测试没有广泛应用肯定是有原因的。</p><ul><li>不低的技术门槛。不论是使用哪种自动化测试框架，对于测试人员而言，都存在一定的技术门槛，一般至少需要学习并掌握一门编程语言。<br>可观的开发成本和维护成本。跟任何程序一样，无论是编写自动化测试脚本，还是在需求变化时修改脚本，都需要花费大量的时间。</li><li>需求要稳定。自动化测试的前提是测试用例要稳定，而测试用例稳定的前提是需求要稳定。对于临时的或者说一次性的需求，自动化测试往往是得不偿失的。</li><li>应用周期长。应用的生命周期越长，自动化测试节省的时间越多，带来的价值也越大。</li></ul><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>随着web前端技术发展更新越来越迅猛的态势，前端技术和框架层出不穷。但往往我们会在短期内高估技术带来的影响。</p><p><img src="http://img.rc5j.cn/blog20190524140107.png" alt=""></p><p>所以对于任何一个新的事物，我们采取保守的态度对待可能会少跌入一些<strong>幻灭的低谷期</strong>。对于新技术做充分的评估测试，可能会让我们少踩一些坑。当然往往这话，都是在事后才会提出来。</p><p>为什么可以用自动化测试做性能测试？<br>网上似乎都没有这种先例。我总结以下几个原因：</p><ol><li>脚本能强有规律地重复执行操作，而开发或测试自己做这个工作会很繁琐而且出了一步差错就得重来</li><li>脚本能将执行操作和数据记录结合起来。而人类执行一次数据记录和动作执行也许没问题，但重复500次或更多而无差错那就困难了。</li></ol><h2 id="web自动化测试方法"><a href="#web自动化测试方法" class="headerlink" title="web自动化测试方法"></a>web自动化测试方法</h2><ul><li>python+Selenium 跨浏览器支持</li><li>puppeteer 专注于chrome</li><li>airtest 跨平台，安卓、ios、web，web还是用的Selenium</li></ul><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="http://img.rc5j.cn/blog20190514101858.png" alt=""></p><p>执行脚本</p><p><img src="http://img.rc5j.cn/blog20190524162047.gif" alt=""></p><p>脚本运行情况，浏览器在自动进行操作</p><p><img src="http://img.rc5j.cn/blog20190524162725.png" alt=""></p><p>得出统计结果。我们模拟用户的某个最频繁的操作，发现采用新的方案后内存会在短时间内有效回收。整体上，页面内存会趋于稳定的态势。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="动态的ggcode"><a href="#动态的ggcode" class="headerlink" title="动态的ggcode"></a>动态的ggcode</h3><pre class="language-python" data-language="python"><code class="language-python">ggcode <span class="token operator">=</span> prompt<span class="token punctuation">(</span><span class="token string">"输入谷歌码: "</span><span class="token punctuation">)</span></code></pre><p>由于登录用的谷歌码是动态的，所以这里只能每次输入进行填充。这里我们引入prompt_toolkit进行终端的交互</p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p>如今的前端项目，由于使用的是数据驱动dom，不是传统的jquery操作，现在基本看不到id class等进行元素定位。现在最方便的做法只能是通过xpath寻找元素。</p><p><img src="http://img.rc5j.cn/blog20190524180042.png" alt=""></p><pre class="language-none"><code class="language-none">xpath &#x3D; &#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#39;element &#x3D; self.browser.find_element_by_xpath(                    xpath)</code></pre><p><strong>由于不是固定id，页面一旦改变xpath很有可能改变，会导致元素找不到。</strong></p><h3 id="webdriver进程不退出"><a href="#webdriver进程不退出" class="headerlink" title="webdriver进程不退出"></a>webdriver进程不退出</h3><p>在使用过程当中发现提供的<code>quit()</code> 方法并不能让进程退出，所以只能自己将进程kill掉。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">close_browser</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><h3 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h3><p>在进行按钮点击的时候，经常会因为页面未加载完等原因导致无法点击。结果就是可能会抛出异常。对于这种情况webdriver本身有提供wait等待。</p><pre class="language-python" data-language="python"><code class="language-python">wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>self<span class="token punctuation">.</span>browser<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>            element <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> xpath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>WebDriverWait</code> 需要设置一个等待时长，不可能无限等待</p><p>还有些情况下，是由于需要下拉滚动条才能进行点击。这种情况可以考虑执行js进行点击。</p><pre class="language-python" data-language="python"><code class="language-python">js_click_next_page <span class="token operator">=</span> <span class="token string">'document.querySelector("body > div.worker-order-search-list > div.content-wrapper > section > ul > li.ivu-page-next").click()'</span>                browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js_click_next_page<span class="token punctuation">)</span></code></pre><p><strong>使用webdriver.click还是用js点击？</strong></p><blockquote><p>When Should You Use JavaScript for Clicking?<br>If you are using Selenium for testing an application, my answer to this question is “almost never”. By and large, your Selenium test should reproduce what a user would do with the browser. Taking the example of the drop down menu: a test should click on the button that brings up the drop down first, and then click on the menu item. If there is a problem with the GUI because the button is invisible, or the button fails to show the menu items, or something similar, then your test will fail and you’ll have detected the bug. If you use JavaScript to click around, you won’t be able to detect these bugs through automated testing.</p></blockquote><p><strong>总之还是看你的使用目的，如果自动化测试的目的倾向于测试页面功能。那么建议使用webdriver.click。如果是为了测试性能，那可以进行js点击了。</strong></p><h2 id="获取页面内存"><a href="#获取页面内存" class="headerlink" title="获取页面内存"></a>获取页面内存</h2><p>浏览器的任务管理器可以很容易的看到页面的内存、cpu、网络情况，但是如何获取到记录并统计呢？</p><p>答案是，很可惜现在还没找到。如果有官方办法，请告诉我。</p><p>我走了一个其他途径获取，从操作系统层面获取进程。获取一个进程得内存占用是一个简单的事，但是如何知道某个页面的进程id呢。很遗憾的是，webdriver同样没有接口方法提供。于是我只能从webdriver子进程入手，看有没有信息能与page关联上。很遗憾的事，单单从子进程名看与页面毫无关联。所以。。最后，我只能做一个假设，假设浏览器启动类似linux启动。启动的程序是有先后关系的。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_page_pid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> page_num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""[获取启动页面的进程id,非官方方法,不一定正确。            原理:假设chrome主进程启动子进程是有顺序的,那么打开的页面进程在第4个开始启动]        Returns:            [type] -- [description]        """</span>        webdriver_pid <span class="token operator">=</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>service<span class="token punctuation">.</span>process<span class="token punctuation">.</span>pid        ps <span class="token operator">=</span> psutil<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>webdriver_pid<span class="token punctuation">)</span>        ps_children <span class="token operator">=</span> ps<span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ps_children<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">+</span>page_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pid</code></pre><p>这是一种对项目无侵入的做法，你不需要改动项目代码，就可以对浏览器页面内存进行统计。还有其他做法，可以对项目进行增加内存上报进行统计。但这样的做法同样有弊端：</p><ol><li>需要动被测项目，对项目干扰</li><li>增加工作量，不光是上报还包括接收上报接口</li><li>如果是多iframe页签方式，统计聚合上报将非常繁琐</li></ol><p>需要注意的是，统计页面进程方法。<strong>得到的数据是整个页面进程所占用的内存，并非页面js占用内存。</strong></p><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>在统计上，我使用了chartify+pandas,只要传入数据就能快捷地生成图表</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">chartArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> x_column<span class="token punctuation">,</span> y_column<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""[绘制区域图]        Arguments:            data &#123;[dict]&#125; -- [数据矩阵,拿去构建pandas dataFrame]            x_column &#123;[type]&#125; -- [x轴字段]            y_column &#123;[type]&#125; -- [y轴字段]        """</span>        data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>area<span class="token punctuation">(</span>data_frame<span class="token operator">=</span>data_frame<span class="token punctuation">,</span>                          x_column<span class="token operator">=</span>x_column<span class="token punctuation">,</span> y_column<span class="token operator">=</span>y_column<span class="token punctuation">,</span> stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> show_type<span class="token operator">=</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./output/%s-%s.png'</span> <span class="token operator">%</span>                     <span class="token punctuation">(</span>self<span class="token punctuation">.</span>subtitle<span class="token punctuation">,</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y%m%d%H%M%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>正如前面所说，web自动化测试没有广泛应用肯定是有原因的。但是做为前端问题的论证还是有很大意义。</p><p>比如，页面占用内存限制是多少？我找了很多资料没有找到(官方的才可信)。</p><p>通过测试，我得到的结果是，chrome 对单页面js 内存有限制2G,对页面进程内存无限制。你一个页面进程甚至可以跑到20G。</p><p>python+Selenium 使用起来很简单，感兴趣又有需要的话，不妨一试。</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello world</title>
      <link href="2020/05/07/Hello-world/"/>
      <url>2020/05/07/Hello-world/</url>
      
        <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">hello,world </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器-程序员工具</title>
      <link href="2019/04/04/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
      <url>2019/04/04/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>提高工作效率，首先你得有一套用的顺手的工具</p></blockquote><p><img src="http://img.rc5j.cn/blog20190404140301.png" alt=""></p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><span id="more"></span><p><strong>PicGo</strong></p><p><img src="http://img.rc5j.cn/blog20190404140404.png" alt=""></p><p>支持粘贴板，直接上传到云存储。</p><p>我用七牛云，上传之后制动把markdown的格式地址，放到粘贴板直接可以粘贴到markdown.</p><p>对喜欢用markdown写作的同学非常方便</p><h2 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h2><p><strong>avenote</strong></p><p>之前avenote无法写markdown，我是怎么也喜欢不上。最近发现版本更新之后可以新建markdown格式。我用重新使用上了。</p><p><img src="http://img.rc5j.cn/blog20190404175017.png" alt=""></p><p><strong>boostnote</strong></p><p>这是一款专为程序员设计的记事本，支持代码片段格式和markdown格式。</p><p><img src="http://img.rc5j.cn/blog20190404175220.png" alt=""></p><p>我最喜欢的一点是它的待办进度展示，很直观。</p><p>缺点就是没有云端功能和没有手机版。</p><h2 id="rest客户端"><a href="#rest客户端" class="headerlink" title="rest客户端"></a>rest客户端</h2><p><strong>Insomnia</strong></p><p>它最大的亮点是能支持从curl命令里新建request实例，能从chrome利的copy as curl 复制过来无缝对接。在调试接口的时候简直是完美！</p><p><img src="http://img.rc5j.cn/blog20190404180843.png" alt=""></p><h2 id="git客户端"><a href="#git客户端" class="headerlink" title="git客户端"></a>git客户端</h2><p><strong>gitKarken</strong></p><p>章鱼🐙哥是我到目前为止最喜欢的git客户端，界面美观，操作设计舒服，对gitflow优雅支持。</p><p><img src="http://img.rc5j.cn/blog20190404181218.png" alt=""></p><p>git flow 操作很方便了。</p><p><img src="http://img.rc5j.cn/blog20190404181623.png" alt=""></p><p>持续更新中。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker+compose+nginx+php</title>
      <link href="2018/07/22/docker-compose-nginx-php/"/>
      <url>2018/07/22/docker-compose-nginx-php/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.rc5j.cn/blog20200722165520.png" alt=""></p><span id="more"></span><blockquote><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p></blockquote><h2 id="我用docker做什么？"><a href="#我用docker做什么？" class="headerlink" title="我用docker做什么？"></a>我用docker做什么？</h2><p>快速搭建开发所需环境，测试实验新组件(如rabbitmq,kafka).避免因安装而浪费太多时间，我的目的是快速尝试使用。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><pre class="language-shell" data-language="shell"><code class="language-shell">brew cask install docker</code></pre><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>Compose 是一个用户定义和运行多个容器的 Docker 应用程序。在 Compose 中你可以使用 YAML 文件来配置你的应用服务。然后，只需要一个简单的命令，就可以创建并启动你配置的所有服务。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="http://upload-images.jianshu.io/upload_images/4033700-1a2d2c681ac9df9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2018-08-07-14-17-25"></p><p>一组服务建立一个目录</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">php7.2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> php<span class="token punctuation">:</span>7.2<span class="token punctuation">-</span>fpm    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9000:9000"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> ./php<span class="token punctuation">:</span>/usr/local/etc/php      <span class="token punctuation">-</span> /Users/caowenpeng/www<span class="token punctuation">:</span>/www  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token string">"80:80"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /Users/caowenpeng/www<span class="token punctuation">:</span>/www      <span class="token punctuation">-</span> ./nginx<span class="token punctuation">:</span>/etc/nginx</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class="language-shell" data-language="shell"><code class="language-shell">docker-compose up -d</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>up</td><td>创建和启动容器</td></tr><tr><td>ps</td><td>列出所有容器</td></tr><tr><td>down</td><td>停止并删除容器，镜像，挂载</td></tr><tr><td>start</td><td>启动服务</td></tr><tr><td>stop</td><td>停止服务</td></tr><tr><td>restart</td><td>重启服务</td></tr></tbody></table><p><strong>第一次使用up,之后使用start,如果再次使用up将会重新创建容器，一些对容器的修改将会丢失</strong></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>进入容器 </p><pre class="language-bash" data-language="bash"><code class="language-bash">docker-compose <span class="token builtin class-name">exec</span> php7.2 <span class="token function">bash</span></code></pre><p>进入容器后会发现只能用少量命令，连ps等都没有，这个时候需要安装一些程序</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update  <span class="token comment">##更新元</span><span class="token function">apt-get</span> <span class="token function">install</span> procps  <span class="token comment">## 安装 ps</span></code></pre><p>安装php-rdkafka拓展</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">wget</span><span class="token function">wget</span> https://github.com/edenhill/librdkafka/archive/master.zip<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">unzip</span><span class="token function">unzip</span> master.zip<span class="token builtin class-name">cd</span> librdkafka./configure <span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span> pecl <span class="token function">install</span> http://pecl.php.net/get/rdkafka-3.0.4.tgz<span class="token comment">#在php.ini 配置启用 rdkafka拓展</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地理位置geo处理之mysql函数</title>
      <link href="2017/12/01/mysql/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AEgeo%E5%A4%84%E7%90%86%E4%B9%8Bmysql%E5%87%BD%E6%95%B0/"/>
      <url>2017/12/01/mysql/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AEgeo%E5%A4%84%E7%90%86%E4%B9%8Bmysql%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前越来越多的业务都会基于LBS，附近的人，外卖位置，附近商家等等，现就讨论离我最近这一业务场景的解决方案。</p></blockquote><p>目前已知解决方案有:</p><ul><li>mysql 自定义函数计算</li><li>mysql geo索引</li><li>mongodb geo索引</li><li>postgresql PostGis索引</li><li>redis geo</li><li>ElasticSearch</li></ul><p>本文测试下mysql 函数运算的性能</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>driver<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>lng<span class="token punctuation">`</span> <span class="token keyword">float</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>lat<span class="token punctuation">`</span> <span class="token keyword">float</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h3 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h3><p>在创建数据之前先了解下基本的地理知识:</p><ul><li><p><strong>全球经纬度的取值范围为:</strong> 纬度-90<del>90，经度-180</del>180</p></li><li><p><strong>中国的经纬度范围大约为：</strong> 纬度3.86<del>53.55，经度73.66</del>135.05</p></li><li><p>北京行政中心的纬度为39.92，经度为116.46</p></li><li><p>越北面的地方纬度数值越大，越东面的地方经度数值越大</p></li><li><p>度分转换： 将度分单位数据转换为度单位数据，公式：度=度+分/60</p></li><li><p>分秒转换： 将度分秒单位数据转换为度单位数据，公式：度 = 度 + 分 / 60 + 秒 / 60 / 60</p></li></ul><p>在纬度相等的情况下：</p><ul><li>经度每隔0.00001度，距离相差约1米</li></ul><p>在经度相等的情况下：</p><ul><li>纬度每隔0.00001度，距离相差约1.1米</li></ul><h2 id="mysql函数计算"><a href="#mysql函数计算" class="headerlink" title="mysql函数计算"></a>mysql函数计算</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token comment">//</span><span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token punctuation">`</span>root<span class="token punctuation">`</span><span class="token variable">@`localhost`</span> <span class="token keyword">FUNCTION</span> <span class="token punctuation">`</span>getDistance<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>lng1<span class="token punctuation">`</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>     <span class="token punctuation">,</span><span class="token punctuation">`</span>lat1<span class="token punctuation">`</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>lng2<span class="token punctuation">`</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>     <span class="token punctuation">,</span><span class="token punctuation">`</span>lat2<span class="token punctuation">`</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">double</span>    <span class="token keyword">COMMENT</span> <span class="token string">'计算2坐标点距离'</span><span class="token keyword">BEGIN</span><span class="token keyword">declare</span> d <span class="token keyword">double</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> radius <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> radius <span class="token operator">=</span> <span class="token number">6371000</span><span class="token punctuation">;</span> <span class="token comment">#假设地球为正球形，直径为6371000米</span>    <span class="token keyword">set</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>ATAN2<span class="token punctuation">(</span>SQRT<span class="token punctuation">(</span>SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>lat1<span class="token operator">-</span>lat2<span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token operator">*</span>SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>lat1<span class="token operator">-</span>lat2<span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>           COS<span class="token punctuation">(</span>lat2<span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token operator">*</span>COS<span class="token punctuation">(</span>lat1<span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span>           <span class="token operator">*</span>SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>lng1<span class="token operator">-</span>lng2<span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token operator">*</span>SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>lng1<span class="token operator">-</span>lng2<span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           SQRT<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>lat1<span class="token operator">-</span>lat2<span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token operator">*</span>SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>lat1<span class="token operator">-</span>lat2<span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token operator">+</span>COS<span class="token punctuation">(</span>lat2<span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token operator">*</span>COS<span class="token punctuation">(</span>lat1<span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span>           <span class="token operator">*</span>SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>lng1<span class="token operator">-</span>lng2<span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token operator">*</span>SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>lng1<span class="token operator">-</span>lng2<span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">180</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>radius<span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token comment">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><h2 id="创建数据python脚本"><a href="#创建数据python脚本" class="headerlink" title="创建数据python脚本"></a>创建数据python脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> orator <span class="token keyword">import</span> DatabaseManager<span class="token punctuation">,</span> Model<span class="token keyword">import</span> logging<span class="token keyword">import</span> random<span class="token keyword">import</span> threading<span class="token triple-quoted-string string">""" 中国的经纬度范围 纬度3.86~53.55，经度73.66~135.05。大概0.00001度差距1米 """</span><span class="token comment"># 创建 日志 对象</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>    <span class="token string">'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token comment"># Connect to the database</span>config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'mysql'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'driver'</span><span class="token punctuation">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>        <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        <span class="token string">'database'</span><span class="token punctuation">:</span> <span class="token string">'dbtest'</span><span class="token punctuation">,</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'prefix'</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>db <span class="token operator">=</span> DatabaseManager<span class="token punctuation">(</span>config<span class="token punctuation">)</span>Model<span class="token punctuation">.</span>set_connection_resolver<span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __table__ <span class="token operator">=</span> <span class="token string">'driver'</span>    __timestamps__ <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">ins_driver</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'开启线程%s'</span> <span class="token operator">%</span> thread_name<span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        lng <span class="token operator">=</span> <span class="token string">'%.5f'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">73.66</span><span class="token punctuation">,</span> <span class="token number">135.05</span><span class="token punctuation">)</span>        lat <span class="token operator">=</span> <span class="token string">'%.5f'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">3.86</span><span class="token punctuation">,</span> <span class="token number">53.55</span><span class="token punctuation">)</span>        driver <span class="token operator">=</span> Driver<span class="token punctuation">(</span><span class="token punctuation">)</span>        driver<span class="token punctuation">.</span>lng <span class="token operator">=</span> lng        driver<span class="token punctuation">.</span>lat <span class="token operator">=</span> lat        driver<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>thread_nums <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>thread_nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>ins_driver<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">400000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4033700-dda526bdfcc5c759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>以上脚本创建10个线程，10个线程插入4万条数据。耗费150.18s执行完,总共插入40万条数据</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>测试环境</li></ul><p>系统：mac os</p><p>内存：16G</p><p>cpu: intel core i5</p><p>硬盘: 500g 固态硬盘</p><p>测试下查找距离(134.38753,18.56734)这个坐标点最近的10个司机</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token punctuation">`</span>getDistance<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token number">134.38753</span><span class="token punctuation">,</span><span class="token number">18.56734</span><span class="token punctuation">,</span><span class="token punctuation">`</span>lng<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>lat<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">as</span> dis <span class="token keyword">from</span> driver <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> dis <span class="token keyword">limit</span> <span class="token number">10</span></code></pre><ul><li>耗时：18.0s</li><li>explain:全表扫描</li></ul><p>我测试了从1万到10万间隔1万和从10万到90万每间隔10万测试的结果变化</p><p><img src="http://upload-images.jianshu.io/upload_images/4033700-c40f60c1ef7b3f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>此方案在数据量达到3万条查询耗时就会超过1秒</li><li>大约每增加1万条就会增加0.4秒的耗时</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据|地理位置geo处理之mongodb geo 索引</title>
      <link href="2017/12/01/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E5%A4%84%E7%90%86%E4%B9%8Bmongodb/"/>
      <url>2017/12/01/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E5%A4%84%E7%90%86%E4%B9%8Bmongodb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前越来越多的业务都会基于LBS，附近的人，外卖位置，附近商家等等，现就讨论离我最近这一业务场景的解决方案。</p></blockquote><p>目前已知解决方案有:</p><ul><li>mysql 自定义函数计算</li><li>mysql geo索引</li><li>mongodb geo索引</li><li>postgresql PostGis索引</li><li>redis geo</li><li>ElasticSearch</li></ul><p>本文测试下mongodb geo索引 函数运算的性能</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span>&#123;loc: <span class="token string">"2dsphere"</span>&#125;<span class="token punctuation">)</span></code></pre><h2 id="创建数据python脚本"><a href="#创建数据python脚本" class="headerlink" title="创建数据python脚本"></a>创建数据python脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">import</span> logging<span class="token keyword">import</span> random<span class="token keyword">import</span> threading<span class="token triple-quoted-string string">""" 中国的经纬度范围 纬度3.86~53.55，经度73.66~135.05。大概0.00001度差距1米 """</span><span class="token comment"># 创建 日志 对象</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>    <span class="token string">'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token comment"># Connect to the mongodb database</span>mongoconn <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>mdb <span class="token operator">=</span> mongoconn<span class="token punctuation">.</span>geo_analysisdriver_collection <span class="token operator">=</span> mdb<span class="token punctuation">.</span>driver<span class="token keyword">def</span> <span class="token function">ins_driver</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'开启线程%s'</span> <span class="token operator">%</span> thread_name<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        lng <span class="token operator">=</span> <span class="token string">'%.5f'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">73.66</span><span class="token punctuation">,</span> <span class="token number">135.05</span><span class="token punctuation">)</span>        lat <span class="token operator">=</span> <span class="token string">'%.5f'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">3.86</span><span class="token punctuation">,</span> <span class="token number">53.55</span><span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'插入记录:%s'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>        driver_collection<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"loc"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token builtin">float</span><span class="token punctuation">(</span>lng<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token builtin">float</span><span class="token punctuation">(</span>lat<span class="token punctuation">)</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>thread_nums <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>thread_nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>ins_driver<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4033700-dda526bdfcc5c759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>以上脚本创建10个线程，10个线程插入4万条数据。耗费52.43s执行完,总共插入40万条数据</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>测试环境</li></ul><p>系统：mac os</p><p>内存：16G</p><p>cpu: intel core i5</p><p>硬盘: 500g 固态硬盘</p><p>测试下查找距离(134.38753,18.56734)附近20公里的司机</p><pre class="language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>geoNear<span class="token operator">:</span><span class="token string">'driver'</span><span class="token punctuation">,</span> near<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">134.38753</span><span class="token punctuation">,</span><span class="token number">18.56734</span><span class="token punctuation">]</span><span class="token punctuation">,</span> spherical<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> maxDistance<span class="token operator">:</span><span class="token number">20000</span><span class="token operator">/</span><span class="token number">6378000</span><span class="token punctuation">,</span> distanceMultiplier<span class="token operator">:</span><span class="token number">6378000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>耗时：0.001s</li><li>explain:使用索引</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员代码下的许豪杰(技术篇)</title>
      <link href="2017/08/05/python/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%A3%E7%A0%81%E4%B8%8B%E7%9A%84%E8%AE%B8%E8%B1%AA%E6%9D%B0-%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
      <url>2017/08/05/python/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%A3%E7%A0%81%E4%B8%8B%E7%9A%84%E8%AE%B8%E8%B1%AA%E6%9D%B0-%E6%8A%80%E6%9C%AF%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接上篇，这一篇将从技术层面讲讲是如何实现的。阅读本文您将会了解如何用python爬取微博的评论以及如何用python word_cloud库进行数据可视化。</p></blockquote><p>上一篇:<a href="http://www.jianshu.com/p/ab49113c1fda">程序员代码下的许豪杰</a></p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>打开微博pc m站并找到许豪杰该条微博地址:<a href="https://m.weibo.cn/status/4132385564040383">https://m.weibo.cn/status/4132385564040383</a></p><p><strong>为什么要用m站地址？因为m站可以直接抓取到api json数据,而pc站虽然也有api返回的是html,相比而言选取m站会省去很多麻烦</strong></p><p>打开该页面，并且用chrome 的检查工具 查看network，可以获取到评论的api地址。</p><p><img src="http://upload-images.jianshu.io/upload_images/4033700-382e5a613595bc1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="chrome查看"></p><h2 id="数据抓取"><a href="#数据抓取" class="headerlink" title="数据抓取"></a>数据抓取</h2><p>首先观察api返回</p><p><img src="http://upload-images.jianshu.io/upload_images/4033700-f2aa3ddad169fe31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>从返回地址上可以看到可以通过参数page 改变请求的页码,并且每页都回返回总条数和总页码数。这里我决定采用<strong>多线程来抓去</strong>(其实数据量不大,也可以单线程跑)。</p><h3 id="其中在爬取数据的时候会面临几个问题："><a href="#其中在爬取数据的时候会面临几个问题：" class="headerlink" title="其中在爬取数据的时候会面临几个问题："></a>其中在爬取数据的时候会面临几个问题：</h3><p><strong>1.存储选择</strong></p><p>我这里选用了MongoDB作为数据存储，因为api通常返回的是json数据而json结构和MongoDB的存储方式可以结合的很默契，不需要经过任何处理可以直接的进行插入。</p><p><strong>2.防爬虫</strong></p><p>很多网站可能会做一些防爬虫的处理，面对同一个请求ip的短时间的高频率请求会进行服务隔断(直接告诉你服务不可用)，这个时候可以去网上找一些代理进行请求。</p><p><strong>3.多线程的任务分配</strong></p><p>采用多线程爬取你当然不能让多个线程去爬取同样的链接做别人已经做过的事情，那样多线程毫无意义。所以你需要制定一套规则，让不同线程爬取不同的链接。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division<span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> logging<span class="token keyword">import</span> threading<span class="token keyword">import</span> json<span class="token keyword">from</span> os <span class="token keyword">import</span> path<span class="token keyword">import</span> math<span class="token comment"># 爬取微博评论</span><span class="token comment"># m站微博地址</span>weibo_url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/status/4132385564040383'</span> thread_nums <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment">#线程数</span><span class="token comment">#代理地址</span>proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://171.92.4.67:9000"</span><span class="token punctuation">,</span>  <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://163.125.222.240:8118"</span><span class="token punctuation">,</span>  <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://121.232.145.251:9000"</span><span class="token punctuation">,</span>  <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://121.232.147.247:9000"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token comment"># 创建 日志 对象</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>    <span class="token string">'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>mongoconn <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>mdb <span class="token operator">=</span> mongoconn<span class="token punctuation">.</span>data_analysisdas_collection <span class="token operator">=</span> mdb<span class="token punctuation">.</span>weiboweiboid_reobj <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">r'.*status/(\d+)'</span><span class="token punctuation">,</span> weibo_url<span class="token punctuation">)</span>weibo_id <span class="token operator">=</span> weiboid_reobj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scrapy_comments</span><span class="token punctuation">(</span>weibo_id<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">:</span>    weibo_comment_url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/comments/show?id=%s&amp;page=%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>        weibo_id<span class="token punctuation">,</span> page<span class="token punctuation">)</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>weibo_comment_url<span class="token punctuation">)</span>    res_obj <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">return</span> res_obj<span class="token keyword">def</span> <span class="token function">import_comments</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> weibo_id<span class="token punctuation">,</span> page_start<span class="token punctuation">,</span> page_end<span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'开始线程:%s'</span> <span class="token operator">%</span> threadName<span class="token punctuation">)</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>page_start<span class="token punctuation">,</span> page_end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'读取第%s页'</span> <span class="token operator">%</span> page<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># continue</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res_obj <span class="token operator">=</span> scrapy_comments<span class="token punctuation">(</span>weibo_id<span class="token punctuation">,</span> page<span class="token punctuation">)</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'该页有%s条记录'</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res_obj<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'读取%s页时发生错误'</span> <span class="token operator">%</span> page<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> res_obj<span class="token punctuation">[</span><span class="token string">'ok'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            comments <span class="token operator">=</span> res_obj<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> comment <span class="token keyword">in</span> comments<span class="token punctuation">:</span>                comment_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>                    <span class="token string">r'&lt;/?\w+[^>]*>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'回复@.*:'</span><span class="token punctuation">,</span> comment_text<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># 过滤掉回复别人的评论</span>                    <span class="token keyword">continue</span>                comment<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> comment_text                comment<span class="token punctuation">[</span><span class="token string">'weibo_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> weibo_id                logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'读取评论:%s'</span> <span class="token operator">%</span> comment<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> das_collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> comment<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'在mongodb中存在'</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'插入记录:%s'</span> <span class="token operator">%</span> comment<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        das_collection<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>comment<span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'mongodb发生错误'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'读取第%s页时发生错误'</span> <span class="token operator">%</span> page<span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'线程%s结束'</span> <span class="token operator">%</span> threadName<span class="token punctuation">)</span>    <span class="token comment"># res_obj = scrapy_comments(weibo_id, page)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 分配不同链接到不同的线程上去</span>    res_obj <span class="token operator">=</span> scrapy_comments<span class="token punctuation">(</span>weibo_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res_obj<span class="token punctuation">[</span><span class="token string">'ok'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        total_number <span class="token operator">=</span> res_obj<span class="token punctuation">[</span><span class="token string">'total_number'</span><span class="token punctuation">]</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'该条微博有:%s条评论'</span> <span class="token operator">%</span> total_number<span class="token punctuation">)</span>        max_page <span class="token operator">=</span> res_obj<span class="token punctuation">[</span><span class="token string">'max'</span><span class="token punctuation">]</span>        page_nums <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>max_page <span class="token operator">/</span> thread_nums<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span>    <span class="token comment"># print max_page</span>    <span class="token comment"># print page_nums</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> thread_nums <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> thread_nums<span class="token punctuation">:</span>            page_end <span class="token operator">=</span> page_nums <span class="token operator">*</span> i        <span class="token keyword">else</span><span class="token punctuation">:</span>            page_end <span class="token operator">=</span> max_page        page_start <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> page_nums <span class="token operator">+</span> <span class="token number">1</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>import_comments<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>            i<span class="token punctuation">,</span> weibo_id<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>page_start<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>page_end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="数据整理可视化-data-visualization"><a href="#数据整理可视化-data-visualization" class="headerlink" title="数据整理可视化(data visualization)"></a>数据整理可视化(data visualization)</h2><p>运行脚本完毕，我的MongoDB得到了2万多条评论数据，接下来要做的事是对这部分数据进行提取、清洗、结构化等操作。这里顺便说明一下python 数据分析的 大致基本流程。</p><p><strong>1.与外界进行交互</strong><br>这个过程包括数据的获取、读取。不管是从网络资源上爬取、还是从现有资源(各样的文件如文本、excel、数据库存储对象)</p><p><strong>2.准备工作</strong><br>对数据进行清洗(cleaning)、修整(munging)、整合(combining)、规范化(normalizing)、重塑(reshaping)、切片(slicing)和切块(dicing)</p><p><strong>3.转换</strong><br>对数据集做一些数学和统计运算产生新的数据集</p><p><strong>4.建模和计算</strong><br>将数据跟统计模型、机器学习算法或其他计算工具联系起来</p><p><strong>5.展示</strong><br>创建交互式的或静态的图片或文字摘要</p><p>下面我们来进行2、3及5的工作:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">import</span> random<span class="token comment"># 分词库</span><span class="token comment"># from snownlp import SnowNLP</span><span class="token keyword">import</span> jieba<span class="token keyword">import</span> uniout<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token punctuation">,</span> OrderedDict<span class="token comment"># 词语云 文本统计可视化库</span><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloudmongoconn <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>mdb <span class="token operator">=</span> mongoconn<span class="token punctuation">.</span>data_analysisdas_collection <span class="token operator">=</span> mdb<span class="token punctuation">.</span>weibototal_counts <span class="token operator">=</span> das_collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># random_int = random.randint(0, total_counts - 1)</span>docs <span class="token operator">=</span> das_collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> docs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>words_counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> doc <span class="token keyword">in</span> docs<span class="token punctuation">:</span>    <span class="token keyword">print</span> doc    comment_text <span class="token operator">=</span> doc<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>comment_text<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>comment_text<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> words_counts<span class="token punctuation">:</span>            words_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            words_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words_counts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> words_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> words_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token comment"># print words_counts.items()</span><span class="token comment">#注意要让中文不乱码要指定中文字体</span><span class="token comment">#fit_words 接收参数是dict  eg:&#123;'你':333,'好':23&#125;  文字:出现次数</span>wordcloud <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>    font_path<span class="token operator">=</span><span class="token string">'/Users/cwp/font/msyh.ttf'</span><span class="token punctuation">,</span>    background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>    width<span class="token operator">=</span><span class="token number">1200</span><span class="token punctuation">,</span>    height<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_words<span class="token punctuation">(</span>words_counts<span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wordcloud<span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>介绍下以上代码：<br>我们主要用到了2个工具，jieba和word_cloud。前者对中文进行分词后者图形化展示词语的出现频率。<br>众所周知，中文系的语言处理恐怕是最难的自然语言处理(NLP)的语种。就基本的分词而言都是一项比较困难的工作,(英语句子中每个单词都是有空格分开的，而中文是由单个字组成词连接成串组成句).<br>举个例子,请用“孩提”造句,”那个男孩提交完代码就下班了”。如果人工分词，可以知道”男孩”和”提交”应该是分开的2个词，<strong>但是对于机器而言，要辨别”提”应该与”男”还是”交”进行组词就很难办了</strong>。要想机器能够更精确的辨别这类问题，就需要让机器不停学习，让它知道这种情况该这么分而不是那么分。研究中文自然语言处理将是一个长久而大的工程，对于分析数据(我们不是要研究自然语言处理😏)，这里就借助jieba这个库进行工作了.</p><p>对于word_cloud,图形化文本统计，网上有不少的博文都贴了代码，但我想说的是我不了解它们是不是真的运行出了结果。因为fit_words 这个函数接收的是dict而不是list，官方文档和函数doc其实写错了,在github上有披露。</p><p>最后得到结果:</p><p><img src="http://upload-images.jianshu.io/upload_images/4033700-dfbee241840ea23e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p><h2 id="一些用到的工具"><a href="#一些用到的工具" class="headerlink" title="一些用到的工具"></a>一些用到的工具</h2><p>1.<a href="https://github.com/amueller/word_cloud">word_cloud A little word cloud generator in Python</a></p><p>2.<a href="https://github.com/fxsjy/jieba">jieba 结巴中文分词</a></p><p>3.<a href="http://docs.python-requests.org/en/master/">Requests is the only Non-GMO HTTP library for Python, safe for human consumption.</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
